na.omit(match(sort(gsub(",|-",".",metadata$SampleID[metadata$SampleType=="ControlN"])),colnames(rawdata)))
]
1:length(rawdata[1,na.omit(match(sort(gsub(",|-",".",metadata$SampleID[metadata$SampleType=="ControlN"])),colnames(rawdata)))]
)
1:length(rawdata[1,na.omit(match(sort(gsub(",|-",".",metadata$SampleID[metadata$SampleType=="ControlN"])),colnames(rawdata)))]]
#here we get rid of any ASVs not represented in the positive controls
NegativeControls2 <- NegativeControls[
rowSums(
NegativeControls[1:length(rawdata[1,na.omit(match(sort(gsub(",|-",".",metadata$SampleID[metadata$SampleType=="ControlN"])),colnames(rawdata)))]]
rawdata[1,na.omit(match(sort(gsub(",|-",".",metadata$SampleID[metadata$SampleType=="ControlN"])),colnames(rawdata)))
)
colnames(rawdata)
(match(sort(gsub(",|-",".",metadata$SampleID[metadata$SampleType=="ControlN"])),colnames(rawdata)))
na.omit(match(sort(gsub(",|-",".",metadata$SampleID[metadata$SampleType=="ControlN"])),colnames(rawdata)))
rawdata[,na.omit(match(sort(gsub(",|-",".",metadata$SampleID[metadata$SampleType=="ControlN"])),colnames(rawdata)))]
1:length(rawdata[,match(gsub(",",".",sort(metadata$SampleID[metadata$SampleType=="ControlP"])),colnames(rawdata))])]
(rawdata[,match(gsub(",",".",sort(metadata$SampleID[metadata$SampleType=="ControlP"])),colnames(rawdata))])
length((rawdata[,match(gsub(",",".",sort(metadata$SampleID[metadata$SampleType=="ControlP"])),colnames(rawdata))]))
1:length(rawdata[1,match(gsub(",",".",sort(metadata$SampleID[metadata$SampleType=="ControlP"])),colnames(rawdata))])
rawdata[1,na.omit(match(sort(gsub(",|-",".",metadata$SampleID[metadata$SampleType=="ControlN"])),colnames(rawdata)))]
1:length(
rawdata[1,na.omit(match(sort(gsub(",|-",".",metadata$SampleID[metadata$SampleType=="ControlN"])),colnames(rawdata)))]
)
View(NegativeControls)
#here we get rid of any ASVs not represented in the positive controls
NegativeControls2 <- NegativeControls[
rowSums(
NegativeControls[1:length(rawdata[1,na.omit(match(sort(gsub(",|-",".",metadata$SampleID[metadata$SampleType=="ControlN"])),colnames(rawdata)))])
]
)
]
#here we get rid of any ASVs not represented in the positive controls
NegativeControls2 <- NegativeControls[
rowSums(NegativeControls[1:length(rawdata[1,na.omit(match(sort(gsub(",|-",".",metadata$SampleID[metadata$SampleType=="ControlN"])),colnames(rawdata)))]))
rowSums(NegativeControls[1:length(rawdata[1,na.omit(match(sort(gsub(",|-",".",metadata$SampleID[metadata$SampleType=="ControlN"])),colnames(rawdata)))]))
rowSums(NegativeControls[1:length(rawdata[1,na.omit(match(sort(gsub(",|-",".",metadata$SampleID[metadata$SampleType=="ControlN"])),colnames(rawdata)))])
)
rowSums(NegativeControls[1:length(rawdata[1,na.omit(match(sort(gsub(",|-",".",metadata$SampleID[metadata$SampleType=="ControlN"])),colnames(rawdata)))])))
NegativeControls[1:length(rawdata[1,na.omit(match(sort(gsub(",|-",".",metadata$SampleID[metadata$SampleType=="ControlN"])),colnames(rawdata)))]
)
]]
NegativeControls[1:length(rawdata[1,na.omit(match(sort(gsub(",|-",".",metadata$SampleID[metadata$SampleType=="ControlN"])),colnames(rawdata)))])]
rowSums( NegativeControls[1:length(rawdata[1,na.omit(match(sort(gsub(",|-",".",metadata$SampleID[metadata$SampleType=="ControlN"])),colnames(rawdata)))])])
rowSums( NegativeControls[1:length(rawdata[1,na.omit(match(sort(gsub(",|-",".",metadata$SampleID[metadata$SampleType=="ControlN"])),colnames(rawdata)))])])>0
#here we get rid of any ASVs not represented in the positive controls
NegativeControls2 <- NegativeControls[rowSums( NegativeControls[1:length(rawdata[1,na.omit(match(sort(gsub(",|-",".",metadata$SampleID[metadata$SampleType=="ControlN"])),colnames(rawdata)))])])>0,]
View(NegativeControls2)
## write out a csv
dir.create("data/controlData")
write.csv(PositiveControls2,"data/controlData/PositiveControls.csv")
#here we get rid of any ASVs not represented in the positive controls
PostiveControls2 <- PostiveControls[rowSums(PostiveControls[1:length(rawdata[1,match(gsub(",",".",sort(metadata$SampleID[metadata$SampleType=="ControlP"])),colnames(rawdata))])])>0,]
write.csv(PostiveControls2 ,"data/controlData/PositiveControls.csv")
write.csv(NegativeControls2 ,"data/controlData/NegativeControls.csv")
rawdata <- read.csv("data/rawdata/DADA2.18S.csv")
rawSeqs <- as.character(readDNAStringSet("data/ASVorOTU/DADA2.18S.ASVs.fasta"))
CombinedOutput <- cbind(rawdata,
unname(rawSeqs),
Assignments[match(row.names(rawdata),Assignments$OTU),])
write.csv(CombinedOutput,"data/rawdata/InitialData.csv")
#Now we should take a deep look into our control samples to check for anything crazy
#here we subset the data to inlclude on positve control samples
PostiveControls <-cbind(rawdata[,match(gsub(",",".",sort(metadata$SampleID[metadata$SampleType=="ControlP"])),colnames(rawdata))],
unname(rawSeqs),
Assignments[match(row.names(rawdata),Assignments$OTU),])
#here we get rid of any ASVs not represented in the positive controls
PostiveControls2 <- PostiveControls[rowSums(PostiveControls[1:length(rawdata[1,match(gsub(",",".",sort(metadata$SampleID[metadata$SampleType=="ControlP"])),colnames(rawdata))])])>0,]
## write out a csv
dir.create("data/controlData")
write.csv(PostiveControls2 ,"data/controlData/PositiveControls.csv")
#now we run the same thing  for the negative controls
NegativeControls <-cbind(rawdata[,na.omit(match(gsub(",|-",".",sort(metadata$SampleID[metadata$SampleType=="ControlN"])),colnames(rawdata)))],
unname(rawSeqs),
Assignments[match(row.names(rawdata),Assignments$OTU),])
#here we get rid of any ASVs not represented in the positive controls
NegativeControls2 <- NegativeControls[rowSums( NegativeControls[1:length(rawdata[1,na.omit(match(sort(gsub(",|-",".",metadata$SampleID[metadata$SampleType=="ControlN"])),colnames(rawdata)))])])>0,]
write.csv(NegativeControls2 ,"data/controlData/NegativeControls.csv")
indata <- "data/rawdata/InitialData.csv"
indata <- read.csv("data/rawdata/InitialData.csv")
View(indata)
indata <- read.csv("data/rawdata/InitialData.csv",row.names = 1)
View(indata)
unique(metadata$SampleType)
expSamples <- indata[,match(gsub(",|-",".",sort(metadata$SampleID[metadata$SampleType=="Experimental"])),colnames(indata))]
View(expSamples)
colnames(expSamples)
sort(colnames(expSamples))
sort(metadata$SampleID[metadata$SampleType=="Experimental"]))
sort(metadata$SampleID[metadata$SampleType=="Experimental"])
colnames(indata)
expSamples <- indata[,match(gsub(",|-",".",sort(metadata$SampleID[metadata$SampleType=="Experimental"])),colnames(indata))]
View(expSamples)
colnames(expSamples)
unique(metadata$SampleType)
ctlSamples <-indata[,match(gsub(",|-",".",sort(metadata$SampleID[metadata$SampleType=="ControlN"])),colnames(indata))]
metadata$SampleID[metadata$SampleType=="ControlN"]
sort(metadata$SampleID[metadata$SampleType=="ControlN"])
gsub(",|-",".",sort(metadata$SampleID[metadata$SampleType=="ControlN"]))
match(gsub(",|-",".",sort(metadata$SampleID[metadata$SampleType=="ControlN"])),colnames(indata))
ctlSamples <-indata[,omit.na(match(gsub(",|-",".",sort(metadata$SampleID[metadata$SampleType=="ControlN"])),colnames(indata)))]
ctlSamples <-indata[,na.omit(match(gsub(",|-",".",sort(metadata$SampleID[metadata$SampleType=="ControlN"])),colnames(indata)))]
View(ctlSamples)
#Filter 1 - minimum number of reads for any ID
expSamples[expSamples< minreads] <- 0
expSamples <- expSamples[rowSums(expSamples) > 0,]
#Filter 2 - within samples OTU must appear in more than one sample (this works because there are lots of reps per site and sample)
filtersam <- expSamples
filtersam[filtersam>0 ] <- 1
filtersam <-filtersam[rowSums(filtersam) > 1,]
View(filtersam)
expSamples <- expSamples[rownames(expSamples) %in% rownames(filtersam),]
View(expSamples)
#Filter 3 -Make the maximum umber of reads for each OTU in the contam 100
controlsCONTAM <- ctlSamples[rowSums(ctlSamples) > 0,]
View(controlsCONTAM)
View(expSamples)
View(indata)
View(expSamples)
contamOTU <- 1
loopOTU <- row.names(controlsCONTAM[contamOTU,])
max(controlsCONTAM[contamOTU,])
samples[loopOTU,]
expSamples[loopOTU,]
loopOTU
View(expSamples)
samples[loopOTU,]
expSamples[loopOTU,]
expSamples["ASV_1",]
expSamples["ASV_2",]
expSamples["ASV_3",]
expSamples["ASV_4",]
#Filter 3 -Anything in the negative controls removed
controlsCONTAM <- ctlSamples[rowSums(ctlSamples) > 0,]
for (contamOTU in 1:length(controlsCONTAM[,1])){
loopOTU <- row.names(controlsCONTAM[contamOTU,])
loopMax <- max(controlsCONTAM[contamOTU,])
if (any(is.na(expSamples[loopOTU,]))){next}
expSamples[loopOTU,expSamples[loopOTU,]<loopMax] <- 0
print(paste("Cleaning contaminants",contamOTU))
}
View(expSamples)
match(row.names(rawdata),names(rawSeqs))
match(row.names(expSamples),names(rawSeqs))
CleanedOutput <- cbind(expSamples,
unname(rawSeqs)[match(row.names(expSamples),names(rawSeqs))],
Assignments[match(row.names(expSamples),Assignments$OTU),])
View(CleanedOutput)
dir.create("data/cleanedData")
write.csv(CleanedOutput,"data/cleanedData/clean.dada2.csv")
rownames(expSamples)
colnames(expSamples)
metadata$SampleID
gsub(",|-",".",metadata$SampleID)
match(colnames(expSamples),gsub(",|-",".",metadata$SampleID))
metadata$Sample[match(colnames(expSamples),gsub(",|-",".",metadata$SampleID))]
expSampleBinary <- expSamples
expSampleBinary[expSampleBinary>0] <- 1
View(expSampleBinary)
test <- aggregate(expSampleBinary,
by=metadata$Sample[match(colnames(expSamples),gsub(",|-",".",metadata$SampleID))],
FUN=sum)
test <- aggregate(expSampleBinary,
by=as.list(metadata$Sample[match(colnames(expSamples),gsub(",|-",".",metadata$SampleID))]),
FUN=sum)
by=as.list(metadata$Sample[match(colnames(expSamples),gsub(",|-",".",metadata$SampleID))])
View(by)
for sample in unique(metadata$Sample[match(colnames(expSamples),gsub(",|-",".",metadata$SampleID))]){
for (sample in unique(metadata$Sample[match(colnames(expSamples),gsub(",|-",".",metadata$SampleID))])){
print(sample)
}
str(expSampleBinary)
str(expSampleBinary)[1]
length(expSampleBinary)
length(expSampleBinary[1,])
length(expSampleBinary[,1])
outdata <- as.data.frame(matrix(nrow = length(expSampleBinary[,1]),ncol=length(expSampleBinary[1,])))
View(outdata)
colnames(outdata) <- unique(metadata$Sample[match(colnames(expSamples),gsub(",|-",".",metadata$SampleID))])
View(outdata)
unique(metadata$Sample[match(colnames(expSamples),gsub(",|-",".",metadata$SampleID))]
)
colnames(outdata) <- gsub("-",".",unique(metadata$Sample[match(colnames(expSamples),gsub(",|-",".",metadata$SampleID))]))
View(outdata)
nownames(outdata) <- rownames(expSampleBinary)
rownames(outdata) <- rownames(expSampleBinary)
View(outdata)
for (sample in unique(metadata$Sample[match(colnames(expSamples),gsub(",|-",".",metadata$SampleID))])){
loopsample <- gsub("-",".",sample)
print(loopsample)
}
loopsample
match(loopsample,colnames(expSamplesBinary))
match(loopsample,colnames(expSampleBinary))
loopsample
colnames(expSampleBinary)
metadata$Sample[match(colnames(expSamples),gsub(",|-",".",metadata$SampleID))]
match(loopsample,metadata$Sample[match(colnames(expSamples),gsub(",|-",".",metadata$SampleID))])
metadata$Sample[match(colnames(expSamples),gsub(",|-",".",metadata$SampleID))]
sampleindex <- gsub("-|,",".",metadata$Sample[match(colnames(expSamples),gsub(",|-",".",metadata$SampleID))])
match(loopsample,sampleindex)
match(sampleindex,loopsample)
na.omit(match(sampleindex,loopsample))
sampleindex %in% loopsample
loopsample
expSampleBinary[,sampleindex %in% loopsample]
rowSums(expSampleBinary[,sampleindex %in% loopsample])
colnames(expSamples)
expSampleBinary <- expSamples
expSampleBinary[expSampleBinary>0] <- 1
outdata <- as.data.frame(matrix(nrow = length(expSampleBinary[,1]),ncol=length(expSampleBinary[1,])))
colnames(outdata) <- gsub("-",".",unique(metadata$Sample[match(colnames(expSamples),gsub(",|-",".",metadata$SampleID))]))
rownames(outdata) <- rownames(expSampleBinary)
for (sample in unique(metadata$Sample[match(colnames(expSamples),gsub(",|-",".",metadata$SampleID))])){
loopsample <- gsub("-",".",sample)
print(loopsample)
outdata[,loopsample] <- rowSums(expSampleBinary[,sampleindex %in% loopsample])
}
View(outdata)
outdata <- as.data.frame(matrix(nrow = length(expSampleBinary[,1]),ncol=length(expSampleBinary[1,])))
View(outdata)
outdata <- as.data.frame(matrix(nrow = length(expSampleBinary[,1]),ncol=length(unique(metadata$Sample[match(colnames(expSamples),gsub(",|-",".",metadata$SampleID))]))))
View(outdata)
colnames(outdata) <- gsub("-",".",unique(metadata$Sample[match(colnames(expSamples),gsub(",|-",".",metadata$SampleID))]))
rownames(outdata) <- rownames(expSampleBinary)
for (sample in unique(metadata$Sample[match(colnames(expSamples),gsub(",|-",".",metadata$SampleID))])){
loopsample <- gsub("-",".",sample)
print(loopsample)
outdata[,loopsample] <- rowSums(expSampleBinary[,sampleindex %in% loopsample])
}
View(outdata)
CleanedOutputSumSample <- cbind(outdata,
unname(rawSeqs)[match(row.names(outdata),names(rawSeqs))],
Assignments[match(row.names(outdata),Assignments$OTU),])
View(CleanedOutputSumSample)
write.csv(CleanedOutputSumSample,"data/cleanedData/clean.dada2.sampleSum.csv")
hist(CleanedOutputSumSample)
hist(as.numeric(CleanedOutputSumSample))
hist(as.numeric(CleanedOutputSumSample))
hist(outdata)
hist(as.numeric(outdata))
View(outdata)
as.numeric(outdata)
as.integer(outdata)
hist(as.matrix(outdata))
hist(as.matrix(outdata)>1)
hist(as.matrix(outdata[outdat>1]))
hist(as.matrix(outdata[outdata>1]))
assignments <- read.csv("data/taxonomy/Parsedtax.csv")
alldat <- read.csv("data/cleanedData/clean.dada2.csv",row.names = 1)
alldatSum <- read.csv("data/cleanedData/clean.dada2.sampleSum.csv",row.names = 1)
assignments.matched <- assignments[match(rownames(alldat),assignments$OTU),]
test <- rownames(assignments.matched)
test2 <- cbind(alldat,assignments.matched)
write.csv(test2,"data/test.csv")
require("vegan")
require("vegan")
set.seed("123456")
rrarefy(t(alldat))
View(alldat)
alldat <- read.csv("data/cleanedData/clean.dada2.csv",row.names = 1)[,1:360]
View(alldat)
alldat <- read.csv("data/cleanedData/clean.dada2.csv",row.names = 1)[,1:360]
rrarefy(t(alldat))
rrarefy(t(alldat),1000)
rrarefy(alldat,1000)
rarecurve(alldat,1000)
rarecurve(t(alldat),1000)
?rarecurve
rarecurve(t(alldat),1000,label = F)
dir.create("figures/")
#dir.create("figures/")
pdf("figures/rarefy1.pdf")
rarecurve(t(alldat),1000,label = F)
rarecurve(t(alldat),1000,label = F)
dev.off()
#dir.create("figures/")
pdf("figures/rarefy1.pdf",height = 8,width = 6)
rarecurve(t(alldat),1000,label = F)
rarecurve(t(alldat),1000,label = F)
dev.off()
#dir.create("figures/")
pdf("figures/rarefy1.pdf",height = 8,width = 6)
rarecurve(t(alldat),1000,label = F)
rarecurve(t(alldat),1000,label = F)
dev.off()
#dir.create("figures/")
pdf("figures/rarefy1.pdf",height = 8,width = 6)
rarecurve(t(alldat),1000,label = F)
dev.off()
#dir.create("figures/")
pdf("figures/rarefy1.pdf",height = 8,width = 6)
rarecurve(t(alldat),1000,label = F)
rarecurve(t(alldat),1000,label = F)
dev.off()
#dir.create("figures/")
pdf("figures/rarefy1.pdf",height = 8,width = 6)
rarecurve(t(alldat),1000,label = F)
dev.off()
#dir.create("figures/")
pdf("figures/rarefy1.pdf",height = 8,width = 6)
rarecurve(t(alldat),1000,label = F)
#dir.create("figures/")
pdf("figures/rarefy1.pdf",height = 8,width = 6)
rarecurve(t(alldat),1000,label = F)
dev.off()
```{r,eval=F,echo=F}
#dir.create("figures/")
pdf("figures/rarefy1.pdf",height = 8,width = 6)
rarecurve(t(alldat),1000,label = F)
dev.off()
require("vegan")
require("vegan")
set.seed("123456")
require("vegan")
set.seed("123456")
#dir.create("figures/")
pdf("figures/rarefy1.pdf",height = 8,width = 6)
rarecurve(t(alldat),1000,label = F)
assignments <- read.csv("data/taxonomy/Parsedtax.csv")
alldat <- read.csv("data/cleanedData/clean.dada2.csv",row.names = 1)[,1:360]
alldat <- read.csv("data/cleanedData/clean.dada2.csv",row.names = 1)[,1:360]
alldatSum <- read.csv("data/cleanedData/clean.dada2.sampleSum.csv",row.names = 1)[,1:360]
alldatSum <- read.csv("data/cleanedData/clean.dada2.sampleSum.csv",row.names = 1)[,1:360]
alldatSum <- read.csv("data/cleanedData/clean.dada2.sampleSum.csv",row.names = 1)
View(alldatSum)
assignments <- read.csv("data/taxonomy/Parsedtax.csv")
alldat <- read.csv("data/cleanedData/clean.dada2.csv",row.names = 1)[,1:360]
assignments.matched <- assignments[match(rownames(alldat),assignments$OTU),]
#dir.create("figures/")
pdf("figures/rarefy1.pdf",height = 8,width = 6)
rarecurve(t(alldat),1000,label = F)
rarecurve(t(alldat),1000,label = F)
dev.off()
require("vegan")
set.seed("123456")
#dir.create("figures/")
pdf("figures/rarefy1.pdf",height = 8,width = 6)
rarecurve(t(alldat),1000,label = F)
rarecurve(t(alldat),1000,label = F)
dev.off()
plot(1:10,1:10)
#dir.create("figures/")
pdf("figures/rarefy1.pdf",height = 8,width = 6)
rarecurve(t(alldat),1000,label = F)
rarecurve(t(alldat),1000,label = F)
dev.off()
#dir.create("figures/")
pdf("figures/rarefy1.pdf",height = 8,width = 6)
rarecurve(t(alldat),1000,label = F)
rarecurve(t(alldat),1000,label = F)
dev.off()
plot(1:10,1:10)
#dir.create("figures/")
pdf("figures/rarefy1.pdf",height = 8,width = 6)
rarecurve(t(alldat),1000,label = F)
dev.off()
plot(1:10,1:10)
#dir.create("figures/")
pdf("figures/rarefy1.pdf",height = 8,width = 6)
rarecurve(t(alldat),1000,label = F)
rarecurve(t(alldat),1000,label = F)
dev.off()
#dir.create("figures/")
pdf("figures/rarefy1.pdf",height = 8,width = 6)
rarecurve(t(alldat),1000,label = F)
rarecurve(t(alldat),1000,label = F)
dev.off()
pdf("figures/test.pdf")
plot(1:10,1:10,height = 8,width = 6)
pdf("figures/test.pdf")
plot(1:10,1:10,height = 8,width = 6)
plot(1:10,1:10)
dev.off()
pdf("figures/test.pdf",height = 8,width = 6)
plot(1:10,1:10)
dev.off()
#dir.create("figures/")
rarecurve(t(alldat),1000,label = F)
#dir.create("figures/")
rarecurve(t(alldat),1000,label = F)
```{r}
require("metabarTOAD")
require("lulu")
require("Biostrings")
require("metabarTOAD")
require("lulu")
require("Biostrings")
require("taxize")
#Set some variables
minreads <- 2
items <- NULL
#Set the seed
set.seed("123456")
#Read in metadata
metadata<-read.csv("metadata.csv")
metadata$rep <- sapply(strsplit(metadata$SampleID,","), `[`, 2)
|>
?|>
2 |> sqrt()
|>
2 |> sqrt()
library("metabarTOAD")
library("vegan")
library("Biostrings")
library("RColorBrewer")
library("seqinr")
library("sp")
#### Settings and Setup####
##Get metadata
metadat <- read.csv("metadata.csv")
metadat.site <- read.csv("metadata.site.csv")
#Set some variables
minreads <- 3
items <- NULL
#Set the seed
set.seed("123456")
palette(brewer.pal(12, "Set3"))
metadat.site$lat2 <- as.numeric(paste0("-",substr(metadat.site$latitude,3,4),".",substr(as.character(as.numeric(paste0(substr(metadat.site$latitude,6,7),".",substr(metadat.site$latitude,9,11)))/60),3,20)))
metadat.site$lon2 <- as.numeric(paste0("-",substr(metadat.site$longitude,4,5),".",substr(as.character(as.numeric(paste0(substr(metadat.site$longitude,8,9),".",substr(metadat.site$longitude,11,13)))/60),3,20)))
p.data <- read.csv("/Users/gwm297/GitHubRepos/GalapeDNA/ParticleTracking/AlexData010420.21/1km_new_stats.csv")
View(p.data)
p.data2 <- p.data[p.data$day==3]
p.data$day
p.data2 <- p.data[p.data$day==-3]
p.data2 <- p.data[p.data$day=="-3"]
p.data2 <- p.data[p.data$day=="-3",]
View(p.data2)
plot(p.data2)
plot(p.data2$area..km.,p.data2$ave_dist)
lm(plot(p.data2$area..km.,p.data2$ave_dist))
lm(plot(p.data2$area..km.~p.data2$ave_dist))
lm(p.data2$area..km.~p.data2$ave_dist)
summary(lm(p.data2$area..km.~p.data2$ave_dist))
plot(lm(p.data2$area..km.~p.data2$ave_dist))
plot(p.data2$area..km.,p.data2$ave_dist)
y_val <- 1+ 2*cos(pi*x1)+2/(1+exp(-5*(x2)))
set.seed(2)
n <- 400
x1 <- rnorm(n)
x2 <- rnorm(n)
y_val <- 1+ 2*cos(pi*x1)+2/(1+exp(-5*(x2)))
y_nrom <- y_val+rnorm(n,0,0.5)
y_negbinom <- rnbinom(n,miu=exp(y_val),size=10)
x1 <- rnorm(n)
x2 <- rnorm(n)
y_val <- 1+ 2*cos(pi*x1)+2/(1+exp(-5*(x2)))
y_nrom <- y_val+rnorm(n,0,0.5)
y_negbinom <- rnbinom(n,mu=exp(y_val),size=10)
y_nrom <- y_val+rnorm(n,0,0.5)
y_negbinom <- rnbinom(n,mu=exp(y_val),size=10)
y_binom <- rbinom(n,1,prob=exp(y_val)/(1+exp(y_val)))
set.seed(2)
n <- 400
x1 <- rnorm(n)
x2 <- rnorm(n)
y_val <- 1+ 2*cos(pi*x1)+2/(1+exp(-5*(x2)))
y_nrom <- y_val+rnorm(n,0,0.5)
y_negbinom <- rnbinom(n,mu=exp(y_val),size=10)
y_binom <- rbinom(n,1,prob=exp(y_val)/(1+exp(y_val)))
View(coastal_path)
# set data locale     ## -- will need to change for local copy -- ##
data_locale <- "data_raw/shapes/galcosta/"
# call to coastline
galcosta <-
paste0(data_locale, "galcosta.shp") %>%
st_read()
for core functionality
library(magrittr)
library(dplyr)
library(tidyr)
# functionality for spatial analyses
library(raster)
library(rgdal)
library(sf)
library(rgeos)
# call to additional functionality
library(viridis)
library(gdistance)
# set data locale     ## -- will need to change for local copy -- ##
data_locale <- "data_raw/shapes/galcosta/"
# call to coastline
galcosta <-
paste0(data_locale, "galcosta.shp") %>%
st_read()
getwd()
setwd("/Users/gwm297/GitHubRepos/GalapeDNA/FranzAnalysis ")
setwd("/Users/gwm297/GitHubRepos/GalapeDNA/FranzAnalysis")
# set utm details
utm_details <-
paste0("+proj=utm +zone=15 +south +datum=WGS84 +units=m",
" +no_defs +ellps=WGS84") %>% CRS()
# set data locale     ## -- will need to change for local copy -- ##
data_locale <- "data_raw/shapes/galcosta/"
# call to coastline
galcosta <-
paste0(data_locale, "galcosta.shp") %>%
st_read()
# set data locale     ## -- will need to change for local copy -- ##
data_locale <- "galcosta/"
# call to coastline
galcosta <-
paste0(data_locale, "galcosta.shp") %>%
st_read()
galcosta %>% plot()
## -- have a quick look -- ##
# open window
quartz("view platform", 5, 5)
## -- have a quick look -- ##
# open window
quartz("view platform", 5, 5)
galcosta %>% plot()
galcosta %>% plot()
