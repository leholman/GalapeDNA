loopPath <- shortestPath(tr2, c(sitePairwiseDist$Flon[row],
sitePairwiseDist$Flat[row]),
c(sitePairwiseDist$Tlon[row],
sitePairwiseDist$Tlat[row]), output="SpatialLines")
#calculate the distance of the shortest path
looplen <- lengthLine(loopPath)
#sample points along the path every 1000 metres
loopPathpoints <- spsample(loopPath,looplen/1000,type="regular")
#output lengths to dataframe
sitePairwiseDist$Calcdistance[row] <- looplen
#create point output table
loopPathPointsize <- length(loopPathpoints)
loopPointsTable <- data.frame("Order"=1:loopPathPointsize,
"Start"=rep(sitePairwiseDist$Start[row],loopPathPointsize),
"End"=rep(sitePairwiseDist$End[row],loopPathPointsize),
"lon"=loopPathpoints@coords[,1],
"lat"=loopPathpoints@coords[,2])
pathPointsTable <- rbind(pathPointsTable,loopPointsTable)
print(row)
}
View(sitePairwiseDist)
View(loopPointsTable)
View(pathPointsTable)
#calculate some distances 'as-the-fish-swims'
library('gdistance')
library('sf')
library('geosphere')
#Pull in galapagos
gebco.crop <- readRDS("mapBuilding/GalapBathy.rds")
gebco.crop2 <- gebco.crop
#set land to zero, sea to 1
gebco.crop2@data@values[gebco.crop2@data@values>-1] <-0
gebco.crop2@data@values[gebco.crop2@data@values<0] <-Inf
#Places
metadatSites <- read.csv("metadata.site.out.csv",row.names=1)
places <- cbind(metadatSites$lon2,metadatSites$lat2)
sitePairwiseDist <- expand.grid(Start=metadatSites$SiteID,
End=metadatSites$SiteID)
#
tr1 <- transition(gebco.crop2, transitionFunction=mean, directions=16)
tr2 <- geoCorrection(tr1, type="r", multpl=TRUE)
sitePairwiseDist$Flat <- metadatSites$lat2[match(sitePairwiseDist$Start,metadatSites$SiteID)]
sitePairwiseDist$Flon <- metadatSites$lon2[match(sitePairwiseDist$Start,metadatSites$SiteID)]
sitePairwiseDist$Tlat <- metadatSites$lat2[match(sitePairwiseDist$End,metadatSites$SiteID)]
sitePairwiseDist$Tlon <- metadatSites$lon2[match(sitePairwiseDist$End,metadatSites$SiteID)]
sitePairwiseDist$Calcdistance <- rep(NA,length(sitePairwiseDist$End))
pathPointsTable <- c()
for (row in 1:length(sitePairwiseDist$End)){
#for (row in 1:25){
#set dist to zero and skip loop for comparing a site to itself
if(sitePairwiseDist$Start[row]==sitePairwiseDist$End[row]){sitePairwiseDist$Calcdistance[row] <- 0
next()}
#get the shortest path
loopPath <- shortestPath(tr2, c(sitePairwiseDist$Flon[row],
sitePairwiseDist$Flat[row]),
c(sitePairwiseDist$Tlon[row],
sitePairwiseDist$Tlat[row]), output="SpatialLines")
#calculate the distance of the shortest path
looplen <- lengthLine(loopPath)
#sample points along the path every 1000 metres
loopPathpoints <- spsample(loopPath,looplen/1000,type="regular")
#output lengths to dataframe
sitePairwiseDist$Calcdistance[row] <- looplen
#create point output table
loopPathPointsize <- length(loopPathpoints)
loopPointsTable <- data.frame("Order"=1:loopPathPointsize,
"Start"=rep(sitePairwiseDist$Start[row],loopPathPointsize),
"End"=rep(sitePairwiseDist$End[row],loopPathPointsize),
"lon"=loopPathpoints@coords[,1],
"lat"=loopPathpoints@coords[,2])
pathPointsTable <- rbind(pathPointsTable,loopPointsTable)
print(row)
}
View(pathPointsTable)
# Load packages
library(ncdf4)
library(raster)
gebco.crop <- readRDS("mapBuilding/GalapBathy.rds")
#load lat lon
metadata <- read.csv(file = "metadata.site.out.csv")
#function to calculate break points for colours from https://www.benjaminbell.co.uk/2019/08/bathymetric-maps-in-r-colour-palettes.html
## x = raster, b1 & b2 = number of divisions for each sequence, r1 & r2 = rounding value
colbr <- function(x, b1=50, b2=50, r1=-2, r2=-2) {
# Min/max values of the raster (x)
mi <- cellStats(x, stat="min")-100
ma <- cellStats(x, stat="max")+100
# Create sequences, but only use unique numbers
s1 <- unique(round(seq(mi, 0, 0-mi/b1),r1))
s2 <- unique(round(seq(0, ma, ma/b2),r2))
# Combine sequence for our break points, removing duplicate 0
s3 <- c(s1, s2[-1])
# Create a list with the outputs
# [[1]] = length of the first sequence minus 1 (water)
# [[2]] = length of the second sequence minus 1 (land)
# [[3]] = The break points
x <- list(length(s1)-1, length(s2)-1, s3)
}
galap.br <- colbr(gebco.crop,b2=1)
# Get country shapefiles
eq <- getData("GADM", country="ECU", level=0)
# Colour palette
blue.col <- colorRampPalette(c("darkblue", "lightblue"))
plot(gebco.crop, col=c(blue.col(galap.br[[1]]), grey.colors(galap.br[[2]])), breaks=galap.br[[3]],axes = FALSE,box=F,legend = FALSE)
#plot(eq, add=TRUE)
points(metadata$lon2,metadata$lat2,pch=16, col='black',cex=1)
points(metadata$lon2,metadata$lat2,pch=16, col='white',cex=0.5)
points(pathPointsTable$lon,pathPointsTable$lat,col="darkgreen",pch=16,cex=0.2)
View(sitePairwiseDist)
write.csv(pathPointsTable,"pathPointsTable.csv")
write.csv(sitePairwiseDist,"SiteDistance.csv")
write.csv(pathPointsTable,"pathPointsTable.csv")
# Load packages
library(ncdf4)
library(raster)
##Lots of lines hashed out here, original file is 10GB+ so only subset used ;)
#load GEBCO_2022 netcdf downloaded on 110822 - https://www.gebco.net/data_and_products/gridded_bathymetry_data/
#gebco <- raster("mapBuilding/GEBCO_2022_sub_ice_topo.nc")
# Create extent (our map area)
#galap.ex <- extent(-92, -89, -1.55, 0.68)
# Create a crop of the bathymetric data
#gebco.crop <- crop(gebco, galap.ex)
#Save file
#saveRDS(gebco.crop,file="mapBuilding/GalapBathy.rds")
gebco.crop <- readRDS("mapBuilding/GalapBathy.rds")
#load lat lon
metadata <- read.csv(file = "metadata.site.out.csv")
#function to calculate break points for colours from https://www.benjaminbell.co.uk/2019/08/bathymetric-maps-in-r-colour-palettes.html
## x = raster, b1 & b2 = number of divisions for each sequence, r1 & r2 = rounding value
colbr <- function(x, b1=50, b2=50, r1=-2, r2=-2) {
# Min/max values of the raster (x)
mi <- cellStats(x, stat="min")-100
ma <- cellStats(x, stat="max")+100
# Create sequences, but only use unique numbers
s1 <- unique(round(seq(mi, 0, 0-mi/b1),r1))
s2 <- unique(round(seq(0, ma, ma/b2),r2))
# Combine sequence for our break points, removing duplicate 0
s3 <- c(s1, s2[-1])
# Create a list with the outputs
# [[1]] = length of the first sequence minus 1 (water)
# [[2]] = length of the second sequence minus 1 (land)
# [[3]] = The break points
x <- list(length(s1)-1, length(s2)-1, s3)
}
galap.br <- colbr(gebco.crop,b2=1)
# Get country shapefiles
eq <- getData("GADM", country="ECU", level=0)
# Colour palette
blue.col <- colorRampPalette(c("darkblue", "lightblue"))
#First plot
plot(gebco.crop, col=c(blue.col(galap.br[[1]]), grey.colors(galap.br[[2]])), breaks=galap.br[[3]],axes = FALSE,box=F,legend = FALSE)
#plot(eq, add=TRUE)
points(metadata$lon2,metadata$lat2,pch=16, col='black',cex=1)
points(metadata$lon2,metadata$lat2,pch=16, col='white',cex=0.5)
#calculate some distances 'as-the-fish-swims'
library('gdistance')
library('sf')
library('geosphere')
#Pull in galapagos
gebco.crop <- readRDS("mapBuilding/GalapBathy.rds")
gebco.crop2 <- gebco.crop
#set land to zero, sea to 1
gebco.crop2@data@values[gebco.crop2@data@values>-1] <-0
gebco.crop2@data@values[gebco.crop2@data@values<0] <-Inf
#Places
metadatSites <- read.csv("metadata.site.out.csv",row.names=1)
places <- cbind(metadatSites$lon2,metadatSites$lat2)
sitePairwiseDist <- expand.grid(Start=metadatSites$SiteID,
End=metadatSites$SiteID)
#
tr1 <- transition(gebco.crop2, transitionFunction=mean, directions=16)
tr2 <- geoCorrection(tr1, type="r", multpl=TRUE)
sitePairwiseDist$Flat <- metadatSites$lat2[match(sitePairwiseDist$Start,metadatSites$SiteID)]
sitePairwiseDist$Flon <- metadatSites$lon2[match(sitePairwiseDist$Start,metadatSites$SiteID)]
sitePairwiseDist$Tlat <- metadatSites$lat2[match(sitePairwiseDist$End,metadatSites$SiteID)]
sitePairwiseDist$Tlon <- metadatSites$lon2[match(sitePairwiseDist$End,metadatSites$SiteID)]
sitePairwiseDist$Calcdistance <- rep(NA,length(sitePairwiseDist$End))
pathPointsTable <- c()
for (row in 1:length(sitePairwiseDist$End)){
#set dist to zero and skip loop for comparing a site to itself
if(sitePairwiseDist$Start[row]==sitePairwiseDist$End[row]){sitePairwiseDist$Calcdistance[row] <- 0
next()}
#get the shortest path
loopPath <- shortestPath(tr2, c(sitePairwiseDist$Flon[row],
sitePairwiseDist$Flat[row]),
c(sitePairwiseDist$Tlon[row],
sitePairwiseDist$Tlat[row]), output="SpatialLines")
#calculate the distance of the shortest path
looplen <- lengthLine(loopPath)
#sample points along the path every 1000 metres
loopPathpoints <- spsample(loopPath,looplen/1000,type="regular")
#output lengths to dataframe
sitePairwiseDist$Calcdistance[row] <- looplen
#create point output table
loopPathPointsize <- length(loopPathpoints)
loopPointsTable <- data.frame("Order"=1:loopPathPointsize,
"Start"=rep(sitePairwiseDist$Start[row],loopPathPointsize),
"End"=rep(sitePairwiseDist$End[row],loopPathPointsize),
"lon"=loopPathpoints@coords[,1],
"lat"=loopPathpoints@coords[,2])
pathPointsTable <- rbind(pathPointsTable,loopPointsTable)
print(row)
}
site <- "CHOU"
site <- "CHOU"
points(pathPointsTable$lon[pathPointsTable$Start==site],
pathPointsTable$lat[pathPointsTable$Start==site],
col="darkgreen",
pch=16,
cex=0.2)
View(pathPointsTable)
site <- "CDOU"
points(pathPointsTable$lon[pathPointsTable$Start==site],
pathPointsTable$lat[pathPointsTable$Start==site],
col="darkgreen",
pch=16,
cex=0.2)
plot(gebco.crop, col=c(blue.col(galap.br[[1]]), grey.colors(galap.br[[2]])), breaks=galap.br[[3]],axes = FALSE,box=F,legend = FALSE)
#plot(eq, add=TRUE)
points(metadata$lon2,metadata$lat2,pch=16, col='black',cex=1)
points(metadata$lon2,metadata$lat2,pch=16, col='white',cex=0.5)
site <- "RED"
points(pathPointsTable$lon[pathPointsTable$Start==site],
pathPointsTable$lat[pathPointsTable$Start==site],
col="darkgreen",
pch=16,
cex=0.2)
View(loopPointsTable)
site <- "SUAR"
points(pathPointsTable$lon[pathPointsTable$Start==site],
pathPointsTable$lat[pathPointsTable$Start==site],
col="green",
pch=16,
cex=0.2)
### playground basement
plot(gebco.crop, col=c(blue.col(galap.br[[1]]), grey.colors(galap.br[[2]])), breaks=galap.br[[3]],axes = FALSE,box=F,legend = FALSE)
#plot(eq, add=TRUE)
points(metadata$lon2,metadata$lat2,pch=16, col='black',cex=1)
points(metadata$lon2,metadata$lat2,pch=16, col='white',cex=0.5)
site <- "RED"
site <- "SUAR"
points(pathPointsTable$lon[pathPointsTable$Start==site],
pathPointsTable$lat[pathPointsTable$Start==site],
col="darkgreen",
pch=16,
cex=0.2)
site <- "RED"
points(pathPointsTable$lon[pathPointsTable$Start==site],
pathPointsTable$lat[pathPointsTable$Start==site],
col="lightgreen",
pch=16,
cex=0.2)
### playground basement
plot(gebco.crop, col=c(blue.col(galap.br[[1]]), grey.colors(galap.br[[2]])), breaks=galap.br[[3]],axes = FALSE,box=F,legend = FALSE)
#plot(eq, add=TRUE)
points(metadata$lon2,metadata$lat2,pch=16, col='black',cex=1)
points(metadata$lon2,metadata$lat2,pch=16, col='white',cex=0.5)
site <- "RED"
site <- "SUAR"
points(pathPointsTable$lon[pathPointsTable$Start==site],
pathPointsTable$lat[pathPointsTable$Start==site],
col="lightgreen",
pch=16,
cex=0.2)
#calculate some distances 'as-the-fish-swims'
library('gdistance')
library('sf')
library('geosphere')
#Pull in galapagos
gebco.crop <- readRDS("mapBuilding/GalapBathy.rds")
gebco.crop2 <- gebco.crop
#set land to zero, sea to 1
gebco.crop2@data@values[gebco.crop2@data@values>-1] <-0
gebco.crop2@data@values[gebco.crop2@data@values<0] <-Inf
#Places
metadatSites <- read.csv("metadata.site.out.csv",row.names=1)
places <- cbind(metadatSites$lon2,metadatSites$lat2)
sitePairwiseDist <- expand.grid(Start=metadatSites$SiteID,
End=metadatSites$SiteID)
#
tr1 <- transition(gebco.crop2, transitionFunction=mean, directions=16)
tr2 <- geoCorrection(tr1, type="r", multpl=TRUE)
sitePairwiseDist$Flat <- metadatSites$lat2[match(sitePairwiseDist$Start,metadatSites$SiteID)]
sitePairwiseDist$Flon <- metadatSites$lon2[match(sitePairwiseDist$Start,metadatSites$SiteID)]
sitePairwiseDist$Tlat <- metadatSites$lat2[match(sitePairwiseDist$End,metadatSites$SiteID)]
sitePairwiseDist$Tlon <- metadatSites$lon2[match(sitePairwiseDist$End,metadatSites$SiteID)]
sitePairwiseDist$Calcdistance <- rep(NA,length(sitePairwiseDist$End))
pathPointsTable <- c()
for (row in 1:length(sitePairwiseDist$End)){
#set dist to zero and skip loop for comparing a site to itself
if(sitePairwiseDist$Start[row]==sitePairwiseDist$End[row]){sitePairwiseDist$Calcdistance[row] <- 0
next()}
#get the shortest path
loopPath <- shortestPath(tr2, c(sitePairwiseDist$Flon[row],
sitePairwiseDist$Flat[row]),
c(sitePairwiseDist$Tlon[row],
sitePairwiseDist$Tlat[row]), output="SpatialLines")
#calculate the distance of the shortest path
looplen <- lengthLine(loopPath)
#sample points along the path every 1000 metres
loopPathpoints <- spsample(loopPath,looplen/1000,type="regular")
#output lengths to dataframe
sitePairwiseDist$Calcdistance[row] <- looplen
#create point output table
loopPathPointsize <- length(loopPathpoints)
loopPointsTable <- data.frame("Order"=1:loopPathPointsize,
"Start"=rep(sitePairwiseDist$Start[row],loopPathPointsize),
"End"=rep(sitePairwiseDist$End[row],loopPathPointsize),
"lon"=loopPathpoints@coords[,1],
"lat"=loopPathpoints@coords[,2])
pathPointsTable <- rbind(pathPointsTable,loopPointsTable)
print(row)
}
write.csv(sitePairwiseDist,"SiteDistance.csv")
modeldat <-read.csv("pathPoints/pathPointsTable_Sep.csv")
View(modeldat)
hist(modeldat$UVEL)
hist(modeldat$VVEL)
modeldatLAND <- modeldat[modeldat$UVEL==0,]
View(modeldatLAND)
# Load packages
library(ncdf4)
library(raster)
##Lots of lines hashed out here, original file is 10GB+ so only subset used ;)
#load GEBCO_2022 netcdf downloaded on 110822 - https://www.gebco.net/data_and_products/gridded_bathymetry_data/
#gebco <- raster("mapBuilding/GEBCO_2022_sub_ice_topo.nc")
# Create extent (our map area)
#galap.ex <- extent(-92, -89, -1.55, 0.68)
# Create a crop of the bathymetric data
#gebco.crop <- crop(gebco, galap.ex)
#Save file
#saveRDS(gebco.crop,file="mapBuilding/GalapBathy.rds")
gebco.crop <- readRDS("mapBuilding/GalapBathy.rds")
#load lat lon
metadata <- read.csv(file = "metadata.site.out.csv")
#function to calculate break points for colours from https://www.benjaminbell.co.uk/2019/08/bathymetric-maps-in-r-colour-palettes.html
## x = raster, b1 & b2 = number of divisions for each sequence, r1 & r2 = rounding value
colbr <- function(x, b1=50, b2=50, r1=-2, r2=-2) {
# Min/max values of the raster (x)
mi <- cellStats(x, stat="min")-100
ma <- cellStats(x, stat="max")+100
# Create sequences, but only use unique numbers
s1 <- unique(round(seq(mi, 0, 0-mi/b1),r1))
s2 <- unique(round(seq(0, ma, ma/b2),r2))
# Combine sequence for our break points, removing duplicate 0
s3 <- c(s1, s2[-1])
# Create a list with the outputs
# [[1]] = length of the first sequence minus 1 (water)
# [[2]] = length of the second sequence minus 1 (land)
# [[3]] = The break points
x <- list(length(s1)-1, length(s2)-1, s3)
}
galap.br <- colbr(gebco.crop,b2=1)
# Get country shapefiles
eq <- getData("GADM", country="ECU", level=0)
# Colour palette
blue.col <- colorRampPalette(c("darkblue", "lightblue"))
#First plot
plot(gebco.crop, col=c(blue.col(galap.br[[1]]), grey.colors(galap.br[[2]])), breaks=galap.br[[3]],axes = FALSE,box=F,legend = FALSE)
#plot(eq, add=TRUE)
points(metadata$lon2,metadata$lat2,pch=16, col='black',cex=1)
points(metadata$lon2,metadata$lat2,pch=16, col='white',cex=0.5)
points(modeldatLAND$lon,modeldatLAND$lat,pch=16,col="red",cex=0.4)
modeldatLAND <- modeldat[modeldat$VVEL==0,]
points(modeldatLAND$lon,modeldatLAND$lat,pch=16,col="red",cex=0.4)
VectorSum <- function(Northing,Easting){
if (Northing==0|Easting==0){
stop("Northing or Easting is zero - land")
}
}
VectorSum <- function(Northing,Easting){
if (Northing==0|Easting==0){
stop("Northing or Easting is zero - land")
}
print("Working")
}
VectorSum(1,5)
VectorSum(1,0)
VectorSum <- function(Northing,Easting){
if (Northing==0|Easting==0){stop("Northing or Easting is zero - land")}
outputMagnitude <- sqrt(Northing^2 + Easting^2)
return(outputMagnitude)
print("Working")
}
VectorSum(1,5)
?asin
VectorSum <- function(Northing,Easting){
if (Northing==0|Easting==0){stop("Northing or Easting is zero - land")}
outputMagnitude <- sqrt(Northing^2 + Easting^2)
print(outputMagnitude)
outputAzimuth <- asin(Northing)
print(outputAzimuth)
print("Working")
}
VectorSum(1,5)
VectorSum(526,234)
VectorSum <- function(Northing,Easting){
if (Northing==0|Easting==0){stop("Northing or Easting is zero - land")}
outputMagnitude <- sqrt(Northing^2 + Easting^2)
print(outputMagnitude)
outputAzimuth <- asin(outputMagnitude)
print(outputAzimuth)
print("Working")
}
asin(1:1000)
?asin
asin(-1:1)
pi/180
sin(120)
sin(1200000)
sin(1200000000000)
VectorSum <- function(Northing,Easting){
if (Northing==0|Easting==0){stop("Northing or Easting is zero - land")}
outputMagnitude <- sqrt(Northing^2 + Easting^2)
print(outputMagnitude)
outputAzimuth <- sin(Northing/outputMagnitude)
print(outputAzimuth)
print("Working")
}
VectorSum(1,5)
VectorSum <- function(Northing,Easting){
if (Northing==0|Easting==0){stop("Northing or Easting is zero - land")}
outputMagnitude <- sqrt(Northing^2 + Easting^2)
print(outputMagnitude)
outputAzimuth <- sin(Northing/outputMagnitude)
print(outputAzimuth*(180/pi))
print("Working")
}
VectorSum(1,5)
VectorSum(100,5)
VectorSum(120,50)
θ
θ <- sin(Northing/outputMagnitude)
VectorSum <- function(Northing,Easting){
if (Northing==0|Easting==0){stop("Northing or Easting is zero - land")}
outputMagnitude <- sqrt(Northing^2 + Easting^2)
print(outputMagnitude)
θ <- sin(Northing/outputMagnitude)*(180/pi)
if (Northing>0 & Easting>0){
print("+ +")} else
if (Northing>0 & Easting<0){
print("+ -")} else
if (Northing<0 & Easting>0){
print("- +")} else
if (Northing<0 & Easting<0){
print("- -")}
print("Working")
}
VectorSum(120,50)
VectorSum(120,-50)
VectorSum(-120,-50)
VectorSum <- function(Northing,Easting){
if (Northing==0|Easting==0){stop("Northing or Easting is zero - land")}
outputMagnitude <- sqrt(Northing^2 + Easting^2)
print(outputMagnitude)
θ <- sin(Northing/outputMagnitude)*(180/pi)
if (Northing>0 & Easting>0){
print(90-θ)
print("N+ E+")} else
if (Northing<0 & Easting>0){
print(90+θ)
print("N- E+")} else
if (Northing<0 & Easting<0){
print(270-θ)
print("N- E-")} else
if (Northing>0 & Easting<0){
print(270+θ)
print("N+ E-")}
print("Working")
}
VectorSum(100,5)
VectorSum(100,500)
VectorSum(100,-500)
VectorSum(-100,-500)
VectorSum(-100000,-500)
VectorSum(-100000,-500)
VectorSum(-100,-500)
VectorSum(-1000,-500)
VectorSum <- function(Northing,Easting){
if (Northing==0|Easting==0){stop("Northing or Easting is zero - land")}
outputMagnitude <- sqrt(Northing^2 + Easting^2)
print(outputMagnitude)
θ <- tan(Northing/Easting)*(180/pi)
if (Northing>0 & Easting>0){
print(90-θ)
print("N+ E+")} else
if (Northing<0 & Easting>0){
print(90+θ)
print("N- E+")} else
if (Northing<0 & Easting<0){
print(270-θ)
print("N- E-")} else
if (Northing>0 & Easting<0){
print(270+θ)
print("N+ E-")}
print("Working")
}
VectorSum(70,100)
VectorSum(70,10000000000)
VectorSum(70,1000000000000000000)
VectorSum(70,10000)
VectorSum(70000,10000)
VectorSum(70000000000000000,10000)
VectorSum(7000000000000000000000000,10000)
tan(1000000/12)*(180/pi)
tan(100/12)*(180/pi)
tan(10000000000000000000000000000/12)*(180/pi)
tan(10000000000000000000000000000/12)
tan(1000000000000000000000000000000000000/12)
tan(1000/12)
tan(Northing/Easting)
tan(-100:100/-100:100)
tan(-100:100/100:-100)
