resultant_angle_degrees <- (180/pi) * resultant_angle
print(resultant_angle_degrees)
if(Northing>0 & Easting>0){return(90-resultant_angle_degrees)} else
if(Northing<0 & Easting>0){return(90+resultant_angle_degrees)} else
if(Northing<0 & Easting<0){return(270-resultant_angle_degrees)} else
if(Northing>0 & Easting<0){return(270+resultant_angle_degrees)}
}
vectorSum(5,5)
vectorSum(-5,5)
vectorSum(-5,-5)
vectorSum(5,-5)
vectorSum(5,1)
vectorSum(1,5)
vectorSum <- function(Northing,Easting){
if(Northing == 0 & Easting == 0){return(NA)}
resultant_angle <- atan2(sqrt(Northing^2),sqrt(Easting^2))
resultant_angle_degrees <- (180/pi) * resultant_angle
if(Northing>0 & Easting>0){return(90-resultant_angle_degrees)} else
if(Northing<0 & Easting>0){return(90+resultant_angle_degrees)} else
if(Northing<0 & Easting<0){return(270-resultant_angle_degrees)} else
if(Northing>0 & Easting<0){return(270+resultant_angle_degrees)}
}
vectorSum(1,5)
vectorSum(-5,5)
vectorSum(-5,-5)
vectorSum(5,-5)
vectorSum(500,-5)
test <- mapply(vectorSum,modeldat$UVEL,modeldat$VVEL)
hist(test,breaks=100)
View(test)
test <- mapply(vectorSum,modeldat$UVEL,modeldat$VVEL)
hist(unlist(test),breaks=100)
vectorSum <- function(Northing,Easting){
if(Northing == 0 & Easting == 0){return(NA)}
resultant_angle <- atan2(sqrt(Northing^2),sqrt(Easting^2))
resultant_angle_degrees <- (180/pi) * resultant_angle
if(Northing>0 & Easting>0){return(90-resultant_angle_degrees)} else
if(Northing<0 & Easting>0){return(90+resultant_angle_degrees)} else
if(Northing<0 & Easting<0){return(270-resultant_angle_degrees)} else
if(Northing>0 & Easting<0){return(270+resultant_angle_degrees)}
}
vectorSum(5,5)
vectorSum(-5,5)
vectorSum(-5,-5)
vectorSum(5,-5)
test <- mapply(vectorSum,modeldat$UVEL,modeldat$VVEL)
hist(unlist(test),breaks=100)
library(ggplot2)
# Function to convert angle and magnitude to x,y coordinates
get_xy <- function(angle, magnitude) {
x <- magnitude * sin(angle)
y <- magnitude * cos(angle)
c(x, y)
}
# Example data
magnitude <- c(2, 3, 4)
angle <- c(30, 60, 90) * (pi/180)
# Convert angle and magnitude to x,y coordinates
coords <- t(sapply(1:length(magnitude), function(i) {
get_xy(angle[i], magnitude[i])
}))
# Plot the lines
ggplot() +
geom_segment(aes(x = 0, y = 0, xend = coords[,1], yend = coords[,2]),
color = "red") +
coord_fixed() +
xlim(-5, 5) +
ylim(-5, 5) +
theme_void()
library(ggplot2)
library(grid)
# Function to convert angle and magnitude to x,y coordinates
get_xy <- function(angle, magnitude) {
angle_rad <- angle * (pi/180)
x <- magnitude * sin(angle_rad)
y <- magnitude * cos(angle_rad)
c(x, y)
}
# Function to add arrowheads to lines
add_arrowheads <- function(plot) {
x_ends <- plot$data[[1]]$xend
y_ends <- plot$data[[1]]$yend
plot + annotate("segment", x = x_ends, y = y_ends, xend = x_ends, yend = y_ends,
arrow = arrow(length = unit(0.05, "npc")))
}
View(modeldatLAND)
vectorSum <- function(Northing,Easting){
if(Northing == 0 & Easting == 0){return(NA)}
resultantMagnitude <- sqrt(Northing^2+Easting^2)
return(resultantMagnitude)}
vectorSum(1,2)
vectorSum(4,5)
test <- mapply(vectorSum,modeldat$UVEL,modeldat$VVEL)
hist(test)
Magnitudes <- mapply(vectorSum,modeldat$UVEL,modeldat$VVEL)
Angles <- mapply(vectorAngle,modeldat$UVEL,modeldat$VVEL)
#First the angle
vectorAngle <- function(Northing,Easting){
if(Northing == 0 & Easting == 0){return(NA)}
resultant_angle <- atan2(sqrt(Northing^2),sqrt(Easting^2))
resultant_angle_degrees <- (180/pi) * resultant_angle
if(Northing>0 & Easting>0){return(90-resultant_angle_degrees)} else
if(Northing<0 & Easting>0){return(90+resultant_angle_degrees)} else
if(Northing<0 & Easting<0){return(270-resultant_angle_degrees)} else
if(Northing>0 & Easting<0){return(270+resultant_angle_degrees)}
}
Angles <- mapply(vectorAngle,modeldat$UVEL,modeldat$VVEL)
# Convert angle and magnitude to x,y coordinates
coords <- t(sapply(1:length(Magnitudes), function(i) {
get_xy(Angles[i], Magnitudes[i])
}))
unlist(Angles)
test2 <- as.data.frame(Magnitudes,Angles)
View(test2)
Angles <- unlist(mapply(vectorAngle,modeldat$UVEL,modeldat$VVEL))
# Function to convert angle and magnitude to x,y coordinates
get_xy <- function(angle, magnitude) {
angle_rad <- angle * (pi/180)
x <- magnitude * sin(angle_rad)
y <- magnitude * cos(angle_rad)
c(x, y)
}
# Function to add arrowheads to lines
add_arrowheads <- function(plot) {
x_ends <- plot$data[[1]]$xend
y_ends <- plot$data[[1]]$yend
plot + annotate("segment", x = x_ends, y = y_ends, xend = x_ends, yend = y_ends,
arrow = arrow(length = unit(0.05, "npc")))
}
# Example data
magnitude <- c(2, 3, 4)
angle <- c(30, 60, 90)
test2 <- as.data.frame(Magnitudes,Angles)
library(ggplot2)
library(grid)
# Function to convert angle and magnitude to x,y coordinates
get_xy <- function(angle, magnitude) {
angle_rad <- angle * (pi/180)
x <- magnitude * sin(angle_rad)
y <- magnitude * cos(angle_rad)
c(x, y)
}
# Function to add arrowheads to lines
add_arrowheads <- function(plot) {
x_ends <- plot$data[[1]]$xend
y_ends <- plot$data[[1]]$yend
plot + annotate("segment", x = x_ends, y = y_ends, xend = x_ends, yend = y_ends,
arrow = arrow(length = unit(0.05, "npc")))
}
# Example data
magnitude <- c(2, 3, 4)
angle <- c(30, 60, 90)
# Convert angle and magnitude to x,y coordinates
coords <- t(sapply(1:length(magnitude), function(i) {
get_xy(angle[i], magnitude[i])
}))
# Plot the lines with arrowheads
add_arrowheads(ggplot() +
geom_segment(aes(x = 0, y = 0, xend = coords[,1], yend = coords[,2]),
color = "red") +
coord_fixed() +
xlim(-5, 5) +
ylim(-5, 5) +
theme_void())
library(ggplot2)
library(grid)
# Function to convert angle and magnitude to x,y coordinates
get_xy <- function(angle, magnitude) {
angle_rad <- angle * (pi/180)
x <- magnitude * sin(angle_rad)
y <- magnitude * cos(angle_rad)
c(x, y)
}
# Function to add arrowheads to lines
add_arrowheads <- function(plot) {
x_ends <- plot$data[[1]]$xend
y_ends <- plot$data[[1]]$yend
plot + annotate("segment", x = x_ends, y = y_ends, xend = x_ends, yend = y_ends,
arrow = arrow(length = unit(0.05, "npc")))
}
# Example data
magnitude <- c(2, 3, 4)
angle <- c(30, 60, 90)
# Convert angle and magnitude to x,y coordinates
coords <- t(sapply(1:length(magnitude), function(i) {
get_xy(angle[i], magnitude[i])
}))
# Plot the lines with arrowheads
add_arrowheads(ggplot() +
geom_segment(aes(x = 0, y = 0, xend = coords[,1], yend = coords[,2]),
color = "red") +
coord_fixed() +
xlim(-5, 5) +
ylim(-5, 5) +
theme_void())
dev.off()
# Plot the lines with arrowheads
ggplot() +
geom_segment(aes(x = 0, y = 0, xend = coords[,1], yend = coords[,2]),
color = "red") +
coord_fixed() +
xlim(-5, 5) +
ylim(-5, 5) +
theme_void()
#calculate some distances 'as-the-fish-swims'
####====0.0 Packages====####
library('gdistance')
library('sf')
library('geosphere')
####====1.0 As-the-fish-swims Distance & Points  ====####
#Pull in galapagos
gebco.crop <- readRDS("mapBuilding/GalapBathy.rds")
gebco.crop2 <- gebco.crop
#set land to zero, sea to 1
gebco.crop2@data@values[gebco.crop2@data@values>-1] <-0
gebco.crop2@data@values[gebco.crop2@data@values<0] <-Inf
#Places
metadatSites <- read.csv("metadata.site.out.csv",row.names=1)
places <- cbind(metadatSites$lon2,metadatSites$lat2)
sitePairwiseDist <- expand.grid(Start=metadatSites$SiteID,
End=metadatSites$SiteID)
#
tr1 <- transition(gebco.crop2, transitionFunction=mean, directions=16)
tr2 <- geoCorrection(tr1, type="r", multpl=TRUE)
sitePairwiseDist$Flat <- metadatSites$lat2[match(sitePairwiseDist$Start,metadatSites$SiteID)]
sitePairwiseDist$Flon <- metadatSites$lon2[match(sitePairwiseDist$Start,metadatSites$SiteID)]
sitePairwiseDist$Tlat <- metadatSites$lat2[match(sitePairwiseDist$End,metadatSites$SiteID)]
sitePairwiseDist$Tlon <- metadatSites$lon2[match(sitePairwiseDist$End,metadatSites$SiteID)]
sitePairwiseDist$Calcdistance <- rep(NA,length(sitePairwiseDist$End))
#empty points table
pathPointsTable <- c()
#Loop over site comparisons and output needed data
for (row in 1:length(sitePairwiseDist$End)){
#set dist to zero and skip loop for comparing a site to itself
if(sitePairwiseDist$Start[row]==sitePairwiseDist$End[row]){sitePairwiseDist$Calcdistance[row] <- 0
next()}
#get the shortest path
loopPath <- shortestPath(tr2, c(sitePairwiseDist$Flon[row],
sitePairwiseDist$Flat[row]),
c(sitePairwiseDist$Tlon[row],
sitePairwiseDist$Tlat[row]), output="SpatialLines")
#calculate the distance of the shortest path
looplen <- lengthLine(loopPath)
#sample points along the path every 1000 metres
loopPathpoints <- spsample(loopPath,looplen/1000,type="regular")
#output lengths to dataframe
sitePairwiseDist$Calcdistance[row] <- looplen
#create point output table
loopPathPointsize <- length(loopPathpoints)
loopPointsTable <- data.frame("Order"=1:loopPathPointsize,
"Start"=rep(sitePairwiseDist$Start[row],loopPathPointsize),
"End"=rep(sitePairwiseDist$End[row],loopPathPointsize),
"lon"=loopPathpoints@coords[,1],
"lat"=loopPathpoints@coords[,2])
pathPointsTable <- rbind(pathPointsTable,loopPointsTable)
print(row)
}
write.csv(sitePairwiseDist,"SiteDistance.csv")
write.csv(pathPointsTable,"pathPointsTable.csv")
## Now these lat long points are used to pull the model data in
####====2.0 Oceanographic Distance  ====####
modeldat <-read.csv("pathPoints/pathPointsTable_Sep.csv")
modeldatLAND <- modeldat[modeldat$VVEL==0,]
plot(modeldatLAND$lon,modeldatLAND$lat,pch=16,col="red",cex=0.4)
####====2.1 Calculate sum of vectors ====####
#First the angle
vectorAngle <- function(Northing,Easting){
if(Northing == 0 & Easting == 0){return(NA)}
resultant_angle <- atan2(sqrt(Northing^2),sqrt(Easting^2))
resultant_angle_degrees <- (180/pi) * resultant_angle
if(Northing>0 & Easting>0){return(90-resultant_angle_degrees)} else
if(Northing<0 & Easting>0){return(90+resultant_angle_degrees)} else
if(Northing<0 & Easting<0){return(270-resultant_angle_degrees)} else
if(Northing>0 & Easting<0){return(270+resultant_angle_degrees)}
}
vectorAngle(5,5)
vectorAngle(-5,5)
vectorAngle(-5,-5)
vectorAngle(5,-5)
Angles <- unlist(mapply(vectorAngle,modeldat$UVEL,modeldat$VVEL))
Angles
vectorAngle(5,5)
vectorAngle(-5,5)
vectorAngle(-5,-5)
vectorAngle(5,-5)
Angles <- unlist(mapply(vectorAngle,modeldat$UVEL,modeldat$VVEL))
hist(unlist(test),breaks=100)
hist(unlist(Angles),breaks=100)
hist(unlist(Angles[!is.na(Angles)]),breaks=100)
modeldat$resultantAngle <- unlist(mapply(vectorAngle,modeldat$UVEL,modeldat$VVEL))
#First the angle
vectorAngle <- function(Northing,Easting){
if(Northing == 0 & Easting == 0){return(NA)}
resultant_angle <- atan2(sqrt(Northing^2),sqrt(Easting^2))
resultant_angle_degrees <- (180/pi) * resultant_angle
if(Northing>0 & Easting>0){return(90-resultant_angle_degrees)} else
if(Northing<0 & Easting>0){return(90+resultant_angle_degrees)} else
if(Northing<0 & Easting<0){return(270-resultant_angle_degrees)} else
if(Northing>0 & Easting<0){return(270+resultant_angle_degrees)}
}
vectorAngle(5,5)
vectorAngle(5,6)
#calculate some distances 'as-the-fish-swims'
####====0.0 Packages====####
library('gdistance')
library('sf')
library('geosphere')
modeldat <-read.csv("pathPoints/pathPointsTable_Sep.csv")
modeldatLAND <- modeldat[modeldat$VVEL==0,]
plot(modeldatLAND$lon,modeldatLAND$lat,pch=16,col="red",cex=0.4)
#First the angle
vectorAngle <- function(Northing,Easting){
if(Northing == 0 & Easting == 0){return(NA)}
resultant_angle <- atan2(sqrt(Northing^2),sqrt(Easting^2))
resultant_angle_degrees <- (180/pi) * resultant_angle
if(Northing>0 & Easting>0){return(90-resultant_angle_degrees)} else
if(Northing<0 & Easting>0){return(90+resultant_angle_degrees)} else
if(Northing<0 & Easting<0){return(270-resultant_angle_degrees)} else
if(Northing>0 & Easting<0){return(270+resultant_angle_degrees)}
}
vectorAngle(5,5)
vectorAngle(-5,5)
vectorAngle(-5,-5)
vectorAngle(5,-5)
modeldat$resultantAngle <- unlist(mapply(vectorAngle,modeldat$UVEL,modeldat$VVEL))
hist(unlist(Angles),breaks=100)
#First the angle
vectorAngle <- function(Northing,Easting){
if(Northing == 0 & Easting == 0){return(0)}
resultant_angle <- atan2(sqrt(Northing^2),sqrt(Easting^2))
resultant_angle_degrees <- (180/pi) * resultant_angle
if(Northing>0 & Easting>0){return(90-resultant_angle_degrees)} else
if(Northing<0 & Easting>0){return(90+resultant_angle_degrees)} else
if(Northing<0 & Easting<0){return(270-resultant_angle_degrees)} else
if(Northing>0 & Easting<0){return(270+resultant_angle_degrees)}
}
vectorAngle(5,5)
vectorAngle(-5,5)
vectorAngle(-5,-5)
vectorAngle(5,-5)
modeldat$resultantAngle <- unlist(mapply(vectorAngle,modeldat$UVEL,modeldat$VVEL))
View(modeldat)
summary(modeldat$UVEL)
table(is.na(modeldat$UVEL))
#First the angle
vectorAngle <- function(Northing,Easting){
if(Northing == 0 & Easting == 0){return(0)}
resultant_angle <- atan2(sqrt(Northing^2),sqrt(Easting^2))
resultant_angle_degrees <- (180/pi) * resultant_angle
if(Northing>0 & Easting>0){return(90-resultant_angle_degrees)} else
if(Northing<0 & Easting>0){return(90+resultant_angle_degrees)} else
if(Northing<0 & Easting<0){return(270-resultant_angle_degrees)} else
if(Northing>0 & Easting<0){return(270+resultant_angle_degrees)}
}
vectorAngle(5,5)
vectorAngle(-5,5)
vectorAngle(-5,-5)
vectorAngle(5,-5)
modeldat$resultantAngle <- unlist(mapply(vectorAngle,modeldat$UVEL,modeldat$VVEL))
test <-mapply(vectorAngle,modeldat$UVEL,modeldat$VVEL)
View(test)
test(())
?unlist
test==NULL
test
View(test)
View(modeldat)
vectorAngle(100,0)
#First the angle
vectorAngle <- function(Northing,Easting){
if(Northing == 0 & Easting == 0){return(0)}
Northing=Northing+0.0000001
Easting=Easting+0.0000001
resultant_angle <- atan2(sqrt(Northing^2),sqrt(Easting^2))
resultant_angle_degrees <- (180/pi) * resultant_angle
if(Northing>0 & Easting>0){return(90-resultant_angle_degrees)} else
if(Northing<0 & Easting>0){return(90+resultant_angle_degrees)} else
if(Northing<0 & Easting<0){return(270-resultant_angle_degrees)} else
if(Northing>0 & Easting<0){return(270+resultant_angle_degrees)}
}
modeldat$resultantAngle <- unlist(mapply(vectorAngle,modeldat$UVEL,modeldat$VVEL))
View(modeldat)
vectorSum <- function(Northing,Easting){
if(Northing == 0 & Easting == 0){return(NA)}
resultantMagnitude <- sqrt(Northing^2+Easting^2)
return(resultantMagnitude)}
Magnitudes <- mapply(vectorSum,modeldat$UVEL,modeldat$VVEL)
modeldat$magnitudes <- unlist(mapply(vectorSum,modeldat$UVEL,modeldat$VVEL))
View(modeldat)
View(modeldat)
exampleAngles <- seq(10,180,10)
exampleAngles
View(modeldat)
exampleAngles <- seq(10,180,10)
resistanceAngle <- modeldat$resultantAngle[1:10]
resistanceMabgnitude <- modeldat$magnitudes[1:10]
exampleAngles
resistanceAngle
resistanceMabgnitude
resistanceMagnitude <- modeldat$magnitudes[1:10]
resistanceMagnitude
?sin
seq(-2,2,0.5)
sin(seq(-2,2,0.5))
sin(seq(-3,2,0.5))
sin(seq(-3,3,0.5))
sin(seq(-3,30000,0.5))
sin(seq(-3,30,0.5))
sin(seq(-3,10,0.5))
sin(seq(-3,6,0.5))
sin(seq(-3,4,0.5))
sin(seq(-3,3,0.5))
plot( sin(seq(-3,3,0.5)))
plot( sin(seq(-3,3,0.1)))
plot( cos(seq(-3,3,0.1)))
plot( cos(seq(-3,30,0.1)))
pi
pi/2
0(pi/2)
0*(pi/2)
(sin(seq(-3,3,0.5)))*pi
(sin(seq(-3,3,0.5)))*(pi/2)
(sin(seq(-3,3,0.5)))/pi
(sin(seq(-3,3,0.5)))/(pi*2)
pi
?pi
(pi/2)0.1
pi/2
pi/2
pi*2
pi/2
pi/1
pi/0.1
(pi/2)
sin(seq(-3,3,0.5))
modeldat <-read.csv("pathPoints/pathPointsTable_Sep.csv")
modeldatLAND <- modeldat[modeldat$VVEL==0,]
plot(modeldatLAND$lon,modeldatLAND$lat,pch=16,col="red",cex=0.4)
#First the angle
vectorAngle <- function(Northing,Easting){
if(Northing == 0 & Easting == 0){return(0)}
Northing=Northing+0.0000001
Easting=Easting+0.0000001
resultant_angle <- atan2(sqrt(Northing^2),sqrt(Easting^2))
resultant_angle_degrees <- (180/pi) * resultant_angle
if(Northing>0 & Easting>0){return(90-resultant_angle_degrees)} else
if(Northing<0 & Easting>0){return(90+resultant_angle_degrees)} else
if(Northing<0 & Easting<0){return(270-resultant_angle_degrees)} else
if(Northing>0 & Easting<0){return(270+resultant_angle_degrees)}
}
vectorAngle(5,5)
vectorAngle(-5,5)
vectorAngle(-5,-5)
vectorAngle(5,-5)
modeldat$resultantAngle <- unlist(mapply(vectorAngle,modeldat$UVEL,modeldat$VVEL))
hist(unlist(Angles),breaks=100)
vectorSum <- function(Northing,Easting){
if(Northing == 0 & Easting == 0){return(NA)}
resultantMagnitude <- sqrt(Northing^2+Easting^2)
return(resultantMagnitude)}
modeldat$magnitudes <- unlist(mapply(vectorSum,modeldat$UVEL,modeldat$VVEL))
View(modeldat)
exampleAngles <- seq(10,180,10)
resistanceAngle <- modeldat$resultantAngle[1:10]
resistanceMagnitude <- modeldat$magnitudes[1:10]
sin((pi/180)*0)
sin((pi/180)*3)
sin((pi/180)*180)
sin((pi/180)*360)
input <- 1:360
cosin((input/360)*(2*pi))
?sin
cos((input/360)*(2*pi))
plot(cos((input/360)*(2*pi)))
exampleAngles <- seq(10,180,10)
resistanceAngle <- modeldat$resultantAngle[1:10]
resistanceMagnitude <- modeldat$magnitudes[1:10]
resistanceAngle
resistanceMagnitude
resistanceAngle/360
exampleAngles/360
((exampleAngles/360)-(resistanceAngle/360))*360
(exampleAngles/360)-(resistanceAngle/360)
resistanceAngle <- modeldat$resultantAngle[1:11]
resistanceMagnitude <- modeldat$magnitudes[1:11]
((exampleAngles/360)-(resistanceAngle/360))*360
(exampleAngles/360)
(resistanceAngle/360)
exampleAngles <- seq(0,100,10)
((exampleAngles/360)-(resistanceAngle/360))*360
exampleAngles
resistanceAngle
((exampleAngles/360)+(resistanceAngle/360))*360
((exampleAngles/360)-(resistanceAngle/360))*360
exampleAngles <- seq(20,120,10)
resistanceAngle <- modeldat$resultantAngle[1:10]
resistanceMagnitude <- modeldat$magnitudes[1:10]
((exampleAngles/360)-(resistanceAngle/360))*360
exampleAngles <- seq(20,130,10)
resistanceAngle <- modeldat$resultantAngle[1:10]
resistanceMagnitude <- modeldat$magnitudes[1:10]
((exampleAngles/360)-(resistanceAngle/360))*360
exampleAngles <- seq(100,200,10)
exampleAngles <- seq(110,200,10)
resistanceAngle <- modeldat$resultantAngle[1:10]
resistanceMagnitude <- modeldat$magnitudes[1:10]
((exampleAngles/360)-(resistanceAngle/360))*360
exampleAngles
resistanceAngle
exampleAngles/360
exampleAngles/360
cos(360)
