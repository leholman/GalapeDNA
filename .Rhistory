myjac = function (datamat) {
datamat = datamat>0
mj = apply(datamat, 2, function(x) {
apply(datamat, 2, function(y) {
return(sum(x&y)/sum(x|y))
})
})
return(1-mj)
}
myjac_mod = function (datamat) {
datamat = datamat>0
mj = apply(datamat, 2, function(x) {
apply(datamat, 2, function(y) {
return(sum(x&y)/sum(x))
})
})
return(1-mj)
}
####====1.0 Pull in Data ====####
#Fish first
fishAll <- read.csv("cleandata/Cleaned_Fish_wTAX.csv",row.names=1)
fishAssign <- fishAll[,70:86]
fishdat <- fishAll[,1:69]
#Pull out site information
sites <- unlist(lapply(strsplit(colnames(fishdat),"\\."), `[[`, 1))
#Get the metadata
metadat <- read.csv("metadata.csv")
metadatSites <- read.csv("metadata.site.out.csv",row.names=1)
#Make a dataset across sites with mean values
fishdatSite <- as.data.frame(matrix(ncol=length(unique(sites)),nrow=dim(fishdat[1])))
colnames(fishdatSite) <- unique(sites)
rownames(fishdatSite) <- rownames(fishdat)
for (column in colnames(fishdatSite)){
running <- fishdat[,sites==column]
fishdatSite[,colnames(fishdatSite)==column] <- rowSums(running)/3
}
## pull in distance measures
siteDist <- as.matrix(read.csv("distanceData/SiteDistanceMatrix.csv",row.names = 1))
oceanResistance <- as.matrix(read.csv("distanceData/OceanogrphicResistanceMatrix.csv",row.names = 1))
tempDist <- as.matrix(read.csv("distanceData/tempDistance.csv",row.names = 1))
# pull the data in
particle <- read.csv("ParticleTracking/ParticleSpread.csv")
# make the colour index
cols <- c("#80B1D3","#FFFFB3","#FFFFB3","#80B1D3","#FB8072","#BEBADA","#FFED6F","#CCEBC5",
"#80B1D3","#8DD3C7","#FDB462","#FFFFB3","#B3DE69","gray85","#FFFFB3","#80B1D3",
"#FCCDE5","#80B1D3","#80B1D3","#CCEBC5","#BC80BD","#8DD3C7","#80B1D3")
SEasternCols <- colorRampPalette(c("#D55E00","#E69F00","#faf6c1"))
NorthernCols <-colorRampPalette(c("#003e60","#56B4E9"))
ElizCols <- colorRampPalette(c("#CC79A7","#762d55"))
WesternCols <- colorRampPalette(c("#009E73","#004935"))
AllCols <- c(SEasternCols(8),ElizCols(2),NorthernCols(4),WesternCols(2))
ColIndex <- data.frame("EcoIsland"=sort(unique(paste0(metadatSites$EcoRegion,"-",metadatSites$island))),
"Colour"=AllCols)
metadatSites$col <- ColIndex$Colour[match(paste0(metadatSites$EcoRegion,"-",metadatSites$island),ColIndex$EcoIsland)]
####====2.0 Taxonomy ====####
sum(table(fishAll$Assign.BestLevel))
table(fishAll$Assign.BestLevel)
table(fishAll$Assign.Assigment[fishAll$Assign.BestLevel=="Species"])
barplot(table(fishAll$Assign.Assigment[fishAll$Assign.BestLevel=="Genus"]))
####====3.0 Alpha Diversity ====####
# Set up a richness dataset
fishdatB <- fishdatSite
fishdatB[fishdatB>0] <- 1
fishAlpha <- data.frame("ID"=names(fishdatB),"Richness"= colSums(fishdatB))
## test for sig difference between ecoregions
#build the model
lm1 <- lm(fishAlpha$Richness~as.factor(metadatSites$EcoRegion[match(fishAlpha$ID,metadatSites$SiteID)]))
summary(lm1)
# are residuals norm distributed?
shapiro.test(residuals(lm1))
#any sig differences? (no)
TukeyHSD(aov(lm1))
#mean values
unlist(by(fishAlpha$Richness,as.factor(metadatSites$EcoRegion[match(fishAlpha$ID,metadatSites$SiteID)]),FUN=mean))
##Plots
##by island
pdf("figures/FishRichness.pdf",height = 5,width = 6)
par(mar=c(6.1, 4.1, 2.1, 2.1))
plot(as.numeric(as.factor(metadatSites$island[match(fishAlpha$ID,metadatSites$SiteID)])),fishAlpha$Richness,
col=metadatSites$col[match(fishAlpha$ID,metadatSites$SiteID)],
pch=16,
cex=2.5,
ylab="ASV Richness",
xlab="",
xaxt='n'
)
axis(1,at=1:12,labels=levels(as.factor(metadatSites$island[match(fishAlpha$ID,metadatSites$SiteID)])),cex=0.2,las=2)
dev.off()
#by ecoregion
pdf("figures/FishRichness.ecoregion.pdf",height = 5,width = 3)
par(mar=c(7.1, 2.1, 2.1, 5.1))
plot(as.numeric(as.factor(metadatSites$EcoRegion[match(fishAlpha$ID,metadatSites$SiteID)])),fishAlpha$Richness,
col=adjustcolor(metadatSites$col[match(fishAlpha$ID,metadatSites$SiteID)],alpha.f = 0.5),
pch=16,
cex=1.5,
ylab="ASV Richness",
xlab="",
xaxt='n',xlim=c(0,5),yaxt='n',
bty="n"
)
box(lwd=0.5)
points(1:4,unlist(by(fishAlpha$Richness,as.factor(metadatSites$EcoRegion[match(fishAlpha$ID,metadatSites$SiteID)]),FUN=mean)),
col=c(SEasternCols(3)[1],
ElizCols(3)[1],
NorthernCols(3)[1],
WesternCols(3)[1]),pch="-",cex=3)
#axis(1,at=1:4,labels=levels(as.factor(metadatSites$EcoRegion[match(fishAlpha$ID,metadatSites$SiteID)])),cex=0.2,las=2,lwd=0.5)
axis(1,at=1:4,labels=rep("",4),cex=0.2,las=2,lwd=0.5)
axis(4,lwd=0.5)
dev.off()
####====4.0 Beta Diversity ====####
### What are the previously described ecoregions from
groups0 <- sapply(strsplit(colnames(fishdatSite),"\\."),"[",1)
#Groups 1 as ecoregions
groups1 <- metadatSites$EcoRegion[match(groups0,metadatSites$SiteID)]
#Groups 2 w/ RED as Northern
groups2 <- groups1
groups2[groups0=="RED"]<-"Western"
#ius the variance between ecoregions similar? -  lets run a PERMdisp
fishbetadisp <- betadisper(vegdist(t(fishdatSite), "jaccard",binary=TRUE),groups1)
#fishbetadisp <- betadisper(vegdist(t(fishdatSite), "bray"),groups1)
anova(fishbetadisp)
sink("statisticsReports/betadisp.txt")
TukeyHSD(fishbetadisp)
sink()
#Sig difference in multivariate homogeneity - probably due to different numbers of samples
#Is there a sig diff in PERMANOVA between ecoregions?
sink("statisticsReports/PERMANOVA.txt")
adonis2(vegdist(t(fishdatSite), "jaccard",binary=TRUE)~groups1,permutations = 10000)
## quite uneven samples so lets test individually
adonis.pair(vegdist(t(fishdatSite), "jaccard",binary=TRUE),as.factor(groups1),nper = 10000)
#adonis.pair(vegdist(t(fishdatSite), "bray"),as.factor(groups1),nper = 1000)
sink()
## Elizabeth bio region simply doesnt have enough observations....... here we run again with reps not averaged
adonis.pair(vegdist(t(fishdat), "jaccard",binary=TRUE),
as.factor(metadatSites$EcoRegion[match(sapply(strsplit(colnames(fishdat),"\\."),"[",1),metadatSites$SiteID)]),
nper = 10000)
# plots
pdf("figures/FishBetaDiv.pdf",height = 5,width = 6)
par(mar=c(2.1, 2.1, 2.1, 2.1))
nMDS <- metaMDS(vegdist(t(fishdat),method="jaccard",binary=TRUE),trymax=500)
#nMDS <- metaMDS(vegdist(t(fishdat),method="bray"),trymax=500)
plot(nMDS$points[,1],nMDS$points[,2],
pch=16,
cex=1.5,
col=metadatSites$col[match(sites,metadatSites$SiteID)],
#col=cols[match(sites,metadatSites$SiteID)],
main="",
ylab="",xlab="")
ordihull(nMDS,groups = sites,col = "grey71",draw = "polygon",lty=0)
points(nMDS$points[,1],nMDS$points[,2],pch=16,cex=1.5,
col=metadatSites$col[match(sites,metadatSites$SiteID)])
#col=cols[match(sites,metadatSites$SiteID)])
text(-0.8,-0.6,labels = paste0("Stress = ",round(nMDS$stress,2)))
dev.off()
## add in the text to see sites
par(mar=c(2.1, 2.1, 2.1, 2.1))
nMDS <- metaMDS(vegdist(t(fishdat),method="jaccard",binary=TRUE),trymax=500)
plot(nMDS$points[,1],nMDS$points[,2],
pch=16,
cex=1.5,
col=metadatSites$col[match(sites,metadatSites$SiteID)],
main="",
ylab="",xlab="")
ordihull(nMDS,groups = sites,col = "grey71",draw = "polygon",lty=0)
points(nMDS$points[,1],nMDS$points[,2],pch=16,cex=1.5,
col=metadatSites$col[match(sites,metadatSites$SiteID)])
text(nMDS$points[,1],nMDS$points[,2]+0.05,labels=colnames(fishdat),cex=0.3)
####====5.0 Linking to Oceanography ====####
### first let's pull in the data for Lagrangian measures of distance
drift.days <- as.matrix(read.csv("ParticleTracking/AlexData071222/sites_in_range_named.csv",row.names = 1))
drift.days.long <- reshape2::melt(drift.days,varnames = c("Start","End"))
drift.frac <- as.matrix(read.csv("ParticleTracking/AlexData071222/fract_in_range_named.csv",row.names = 1))
drift.frac.long <- reshape2::melt(drift.frac,varnames = c("Start","End"))
#Do these values contain the ame information?
index <- which(!is.na(drift.days.long$value) & !is.na(drift.frac.long$value))
plot(log10(drift.frac.long$value[index]),log10(drift.days.long$value[index]))
# roughly yes - R2 of 0.67, we will just use the drift days metric
summary(lm(log10(drift.frac.long$value[index])~log10(drift.days.long$value[index])))
##let's pull in other distances
geographicDistance.pair <- reshape2::melt(as.matrix(read.csv("distanceData/SiteDistanceMatrix.csv",row.names = 1)),varnames = c("Start","End"))
geographicDistance.pair.No0 <- geographicDistance.pair[-which(geographicDistance.pair$value == 0),]
oceanResistance.pair <- reshape2::melt(as.matrix(read.csv("distanceData/OceanogrphicResistanceMatrix.csv",row.names = 1)),varnames = c("Start","End"))
oceanResistance.pair.No0 <- oceanResistance.pair[-which(geographicDistance.pair$value == 0),]
## now let's compare days drift dist to oceanographic resistance
comparisons <- paste0(drift.days.long$Start[!is.na(drift.days.long$value)],drift.days.long$End[!is.na(drift.days.long$value)])
oc.resis.subset <- oceanResistance.pair.No0[match(comparisons,paste0(oceanResistance.pair.No0$Start,oceanResistance.pair.No0$End)),]
drift.days.long.subset <- drift.days.long[!is.na(drift.days.long$value),]
## there seems to be a relationship with poor R2 0.086
plot(oc.resis.subset$value,drift.days.long.subset$value,pch=16)
summary(lm(drift.days.long.subset$value~oc.resis.subset$value))
abline(lm(drift.days.long.subset$value~oc.resis.subset$value),col="red")
#However it is all driven by the values with low (<-0.1) Oceanresist
plot(oc.resis.subset$value[oc.resis.subset$value>-0.1],drift.days.long.subset$value[oc.resis.subset$value>-0.1],pch=16)
summary(lm(drift.days.long.subset$value[oc.resis.subset$value>-0.1]~oc.resis.subset$value[oc.resis.subset$value>-0.1]))
abline(lm(drift.days.long.subset$value[oc.resis.subset$value>-0.1]~oc.resis.subset$value[oc.resis.subset$value>-0.1]),col="red")
##TRY FOR SYMETRIC
## what about geographic distance? lets compare that
geo.resis.subset <- geographicDistance.pair.No0[match(comparisons,paste0(geographicDistance.pair.No0$Start,geographicDistance.pair.No0$End)),]
## there seems to be a relationship with R2 0.28
plot(geo.resis.subset$value,drift.days.long.subset$value,pch=16)
summary(lm(drift.days.long.subset$value~geo.resis.subset$value))
abline(lm(drift.days.long.subset$value~geo.resis.subset$value),col="red")
## if we log10 transform the days R2 = 0.333
plot(geo.resis.subset$value,log10(drift.days.long.subset$value),pch=16)
summary(lm(log10(drift.days.long.subset$value)~geo.resis.subset$value))
abline(lm(log10(drift.days.long.subset$value)~geo.resis.subset$value),col="red")
## an interesting linear model
summary(lm(log10(drift.days.long.subset$value)~geo.resis.subset$value+oc.resis.subset$value))
## 5.1 Describe Lagrangian results
#Overview
drift.days <- as.matrix(read.csv("ParticleTracking/AlexData071222/sites_in_range_named.csv",row.names = 1))
drift.days.long <- reshape2::melt(drift.days,varnames = c("Start","End"))
drift.frac <- as.matrix(read.csv("ParticleTracking/AlexData071222/fract_in_range_named.csv",row.names = 1))
drift.frac.long <- reshape2::melt(drift.frac,varnames = c("Start","End"))
#Do these values contain the same information?
index <- which(!is.na(drift.days.long$value) & !is.na(drift.frac.long$value))
plot(log10(drift.frac.long$value[index]),log10(drift.days.long$value[index]))
# roughly yes - R2 of 0.67, we will just use the drift days metric
summary(lm(log10(drift.frac.long$value[index])~log10(drift.days.long$value[index])))
#Summary statistics
drift.days.long.naomit <- drift.days.long[!is.na(drift.days.long$value),]
min(drift.days.long.naomit$value)
max(drift.days.long.naomit$value)
mean(drift.days.long.naomit$value)
sd(drift.days.long.naomit$value)
#proportion of journeys
length(drift.days.long.naomit$value)/506
## 5.2 Describe Oceanographic resistance
#-Summary statistics
oceanResistance.pair <- reshape2::melt(as.matrix(read.csv("distanceData/OceanogrphicResistanceMatrix.csv",row.names = 1)),varnames = c("Start","End"))
oceanResistance.pair.No0 <- oceanResistance.pair[!is.na(oceanResistance.pair$value),]
min(oceanResistance.pair.No0$value)
max(oceanResistance.pair.No0$value)
mean(oceanResistance.pair.No0$value)
sd(oceanResistance.pair.No0$value)
#proportion of journeys
length(oceanResistance.pair.No0$value)/506
## 5.3 compare Lag to Ocr
comparisons <- paste0(drift.days.long.naomit$Start,drift.days.long.naomit$End)
oc.resis.subset <- oceanResistance.pair.No0[match(comparisons,paste0(oceanResistance.pair.No0$Start,oceanResistance.pair.No0$End)),]
oc.resis.others <- oceanResistance.pair.No0[-match(comparisons,paste0(oceanResistance.pair.No0$Start,oceanResistance.pair.No0$End)),]
## there seems to be a relationship with poor R2 0.086
plot(oc.resis.subset$value,drift.days.long.naomit$value,pch=16,ylim=c(-5,55))
points(oc.resis.others$value,jitter(rep(-3,length(oc.resis.others$value)),40),col="darkred",pch=16)
summary(lm(drift.days.long.naomit$value~oc.resis.subset$value))
abline(lm(drift.days.long.naomit$value~oc.resis.subset$value),col="red")
plot(density(oc.resis.others$value))
#However it is all driven by the values with low (<-0.1) Oceanresist
plot(oc.resis.subset$value[oc.resis.subset$value>-0.1],drift.days.long.subset$value[oc.resis.subset$value>-0.1],pch=16)
summary(lm(drift.days.long.subset$value[oc.resis.subset$value>-0.1]~oc.resis.subset$value[oc.resis.subset$value>-0.1]))
abline(lm(drift.days.long.subset$value[oc.resis.subset$value>-0.1]~oc.resis.subset$value[oc.resis.subset$value>-0.1]),col="red")
#-Statistics
## 5.4 First lets run a lm with the limited size lagragian datasets
## pull in the eDNA data
eDNAdistance.pair.mod = reshape2::melt(myjac_mod(fishdatSite), varnames=c("Start","End"))
eDNAdistance.pair.mod.No0 <- eDNAdistance.pair.mod[-which(eDNAdistance.pair.mod$value == 0),]
tempDist.pair <- reshape2::melt(as.matrix(read.csv("distanceData/tempDistance.csv",row.names = 1)),varnames = c("Start","End"))
tempDist.pair.No0 <- tempDist.pair[-which(eDNAdistance.pair.mod$value == 0),]
eDNAdistance.pair.mod.L <- eDNAdistance.pair.mod.No0[match(comparisons,paste0(eDNAdistance.pair.mod.No0$Start,eDNAdistance.pair.mod.No0$End)),]
tempDist.pair.L <- tempDist.pair.No0[match(comparisons,paste0(tempDist.pair.No0$Start,tempDist.pair.No0$End)),]
lag.data <- data.frame("eDNAjacc"=eDNAdistance.pair.mod.L$value,
"OceanRes"=oc.resis.subset$value,
"Lagran"= drift.days.long.subset$value,
"GeoDist"=geo.resis.subset$value,
"TempDist"=tempDist.pair.L$value)
model1 = lm(eDNAjacc~GeoDist,data=lag.data)
model2 = lm(eDNAjacc~GeoDist+OceanRes+Lagran+TempDist,data=lag.data)
model3 = lm(eDNAjacc~GeoDist+Lagran,data=lag.data)
model4 = lm(eDNAjacc~GeoDist+OceanRes,data=lag.data)
model5 = lm(eDNAjacc~GeoDist+TempDist,data=lag.data)
summary(model1)
crPlots(model1)
??crPlots
library("car")
crPlots(model1)
summary(model2)
summary(model1)
crPlots(model1)
summary(model2)
crPlots(model2)
summary(model3)
crPlots(model3)
summary(model4)
crPlots(model4)
summary(model5)
crPlots(model5)
model6 = lm(eDNAjacc~GeoDist+OceanRes+TempDist,data=lag.data)
summary(model6)
crPlots(model6)
model6 = lm(eDNAjacc~GeoDist+OceanRes+Lagran,data=lag.data)
summary(model6)
crPlots(model6)
model1 = lm(eDNAjacc~GeoDist,data=lag.data)
model2 = lm(eDNAjacc~GeoDist+OceanRes+Lagran+TempDist,data=lag.data)
model3 = lm(eDNAjacc~GeoDist+Lagran,data=lag.data)
model4 = lm(eDNAjacc~GeoDist+OceanRes,data=lag.data)
model5 = lm(eDNAjacc~GeoDist+TempDist,data=lag.data)
aic(model1,model2,model3,model4,model5)
AIC(model1,model2,model3,model4,model5)
model2 = lm(eDNAjacc~GeoDist+OceanRes+Lagran+TempDist,data=lag.data)
model5 = lm(eDNAjacc~GeoDist+TempDist,data=lag.data)
summary(model2)
summary(model5)
## 5.5 mantel tests
mantel_pearson_full <- function(x, y, n.iter=999) {
# Function to permute matrix y
permute <- function(z) {
i <- sample.int(nrow(z), nrow(z))
return (z[i, i])
}
# Flatten matrices excluding the diagonal
flatten_matrix_full <- function(mat) {
return(as.vector(mat[row(mat) != col(mat)]))
}
# Calculate Pearson correlation as the test statistic
pearson_stat <- function(a, b) {
cor(flatten_matrix_full(a), flatten_matrix_full(b), method = "pearson")
}
# Calculate the observed Pearson correlation
observed_stat <- pearson_stat(x, y)
# Generate the null distribution by permuting y
permuted_stats <- sapply(1:n.iter, function(i) pearson_stat(x, permute(y)))
# Calculate the p-value (two-tailed test)
p_value <- (sum(abs(permuted_stats) >= abs(observed_stat)) + 1) / (n.iter + 1)
# Calculate upper quantiles of the null distribution
quantiles <- quantile(permuted_stats, probs = c(0.90, 0.95, 0.975, 0.99))
# Return the result
result <- list(
Mantel_statistic_r = observed_stat,
Significance = p_value,
Upper_quantiles = quantiles
)
# Print a formatted output for the user
cat(sprintf("Mantel statistic r: %.4f\n", result$Mantel_statistic_r))
cat(sprintf("      Significance: %.4g\n\n", result$Significance))
cat("Upper quantiles of permutations (null model):\n")
print(result$Upper_quantiles)
# Optionally, you can return the full result object if you want to store it for further use
return(result)
}
# Create example asymmetric matrices
X <- matrix(rnorm(100), 10, 10)
Y <- matrix(rnorm(100), 10, 10)
Y2 <- X*100
Y3 <- X*100+rnorm(100)
Y4 <- X+5*rnorm(100)
# Run the Mantel test with Pearson correlation using the entire matrix (excluding diagonal) - seems to act correct...
mantel_pearson_full(X, Y, n.iter=9999)
mantel_pearson_full(X, Y2, n.iter=9999)
mantel_pearson_full(X, Y3, n.iter=9999)
mantel_pearson_full(X, Y4, n.iter=9999)
## now with real data
eDNAjacc.fish <- myjac_mod(fishdatSite)
geographicDistance <- as.matrix(read.csv("distanceData/SiteDistanceMatrix.csv",row.names = 1))
oceanResistance <- as.matrix(read.csv("distanceData/OceanogrphicResistanceMatrix.csv",row.names = 1))
tempdist <- as.matrix(read.csv("distanceData/tempDistance.csv",row.names = 1))
?pearson
?cor
## now with real data
eDNAjacc.fish <- myjac_mod(fishdatSite)
geographicDistance <- as.matrix(read.csv("distanceData/SiteDistanceMatrix.csv",row.names = 1))
oceanResistance <- as.matrix(read.csv("distanceData/OceanogrphicResistanceMatrix.csv",row.names = 1))
tempdist <- as.matrix(read.csv("distanceData/tempDistance.csv",row.names = 1))
mantel_pearson_full(eDNAjacc.fish, geographicDistance, n.iter=999)
mantel_pearson_full(eDNAjacc.fish, oceanResistance, n.iter=999)
mantel_pearson_full(eDNAjacc.fish, tempdist, n.iter=999)
summary(model2)
crPlots(model2)
### Now beta dissimilarity
#first lets pull in the data and melt it into pairwise observations
geographicDistance.pair <- reshape2::melt(as.matrix(read.csv("distanceData/SiteDistanceMatrix.csv",row.names = 1)),varnames = c("Start","End"))
oceanResistance.pair <- reshape2::melt(as.matrix(read.csv("distanceData/OceanogrphicResistanceMatrix.csv",row.names = 1)),varnames = c("Start","End"))
geographicDistance.pair.No0 <- geographicDistance.pair[-which(geographicDistance.pair$value == 0),]
oceanResistance.pair.No0 <- oceanResistance.pair[-which(geographicDistance.pair$value == 0),]
eDNAdistance.pair.mod = reshape2::melt(myjac_mod(fishdatSite), varnames=c("Start","End"))
eDNAdistance.pair.mod.No0 <- eDNAdistance.pair.mod[-which(eDNAdistance.pair.mod$value == 0),]
tempDist.pair <- reshape2::melt(as.matrix(read.csv("distanceData/tempDistance.csv",row.names = 1)),varnames = c("Start","End"))
tempDist.pair.No0 <- tempDist.pair[-which(eDNAdistance.pair.mod$value == 0),]
#now lets build some models
model1 = lm (eDNAdistance.pair.mod.No0$value~geographicDistance.pair.No0$value)
model2 = lm (eDNAdistance.pair.mod.No0$value~oceanResistance.pair.No0$value)
model3 = lm (model1$residuals ~ oceanResistance.pair.No0$value)
model4 = lm (eDNAdistance.pair.mod.No0$value~geographicDistance.pair.No0$value + oceanResistance.pair.No0$value)
model5 = lm (eDNAdistance.pair.mod.No0$value~geographicDistance.pair.No0$value + tempDist.pair.No0$value)
model6 = lm (eDNAdistance.pair.mod.No0$value~geographicDistance.pair.No0$value + tempDist.pair.No0$value+ oceanResistance.pair.No0$value)
crPlots(model6)
summary(model6)
## 5.1 Describe Lagrangian results
#Overview
drift.days <- as.matrix(read.csv("ParticleTracking/AlexData071222/sites_in_range_named.csv",row.names = 1))
min(drift.days.long.naomit$value)
max(drift.days.long.naomit$value)
mean(drift.days.long.naomit$value)
sd(drift.days.long.naomit$value)
#proportion of journeys
length(drift.days.long.naomit$value)/506
## 5.2 Describe Oceanographic resistance
#-Summary statistics
oceanResistance.pair <- reshape2::melt(as.matrix(read.csv("distanceData/OceanogrphicResistanceMatrix.csv",row.names = 1)),varnames = c("Start","End"))
oceanResistance.pair.No0 <- oceanResistance.pair[!is.na(oceanResistance.pair$value),]
min(oceanResistance.pair.No0$value)
max(oceanResistance.pair.No0$value)
mean(oceanResistance.pair.No0$value)
sd(oceanResistance.pair.No0$value)
#proportion of journeys
length(oceanResistance.pair.No0$value)/506
min(oceanResistance.pair.No0$value)
max(oceanResistance.pair.No0$value)
mean(oceanResistance.pair.No0$value)
sd(oceanResistance.pair.No0$value)
#Do these values contain the same information?
index <- which(!is.na(drift.days.long$value) & !is.na(drift.frac.long$value))
plot(log10(drift.frac.long$value[index]),log10(drift.days.long$value[index]))
## 5.3 compare Lag to Ocr
comparisons <- paste0(drift.days.long.naomit$Start,drift.days.long.naomit$End)
oc.resis.subset <- oceanResistance.pair.No0[match(comparisons,paste0(oceanResistance.pair.No0$Start,oceanResistance.pair.No0$End)),]
oc.resis.others <- oceanResistance.pair.No0[-match(comparisons,paste0(oceanResistance.pair.No0$Start,oceanResistance.pair.No0$End)),]
## there seems to be a relationship with poor R2 0.086
plot(oc.resis.subset$value,drift.days.long.naomit$value,pch=16,ylim=c(-5,55))
points(oc.resis.others$value,jitter(rep(-3,length(oc.resis.others$value)),40),col="darkred",pch=16)
summary(lm(drift.days.long.naomit$value~oc.resis.subset$value))
abline(lm(drift.days.long.naomit$value~oc.resis.subset$value),col="red")
abline(h=0)
## there seems to be a relationship with poor R2 0.086
plot(oc.resis.subset$value,drift.days.long.naomit$value,pch=16,ylim=c(-5,55))
abline(h=0)
points(oc.resis.others$value,jitter(rep(-3.5,length(oc.resis.others$value)),40),col="darkred",pch=16)
summary(lm(drift.days.long.naomit$value~oc.resis.subset$value))
abline(lm(drift.days.long.naomit$value~oc.resis.subset$value),col="red")
model2 = lm(eDNAjacc~GeoDist+OceanRes+Lagran+TempDist,data=lag.data)
summary(model2)
crPlots(model2)
mantel_pearson_full(eDNAjacc.fish, geographicDistance, n.iter=999)
mantel_pearson_full(eDNAjacc.fish, oceanResistance, n.iter=999)
mantel_pearson_full(eDNAjacc.fish, tempdist, n.iter=999)
## there seems to be a relationship with poor R2 0.086
plot(oc.resis.subset$value,drift.days.long.naomit$value,pch=16,ylim=c(-5,55))
abline(h=0)
points(oc.resis.others$value,jitter(rep(-3.5,length(oc.resis.others$value)),40),col="darkred",pch=16)
abline(lm(drift.days.long.naomit$value~oc.resis.subset$value),col="red")
summary(lm(drift.days.long.naomit$value~oc.resis.subset$value))
plot(density(oc.resis.others$value))
#Do these values contain the same information?
index <- which(!is.na(drift.days.long$value) & !is.na(drift.frac.long$value))
plot(log10(drift.frac.long$value[index]),log10(drift.days.long$value[index]))
# roughly yes - R2 of 0.67, we will just use the drift days metric
summary(lm(log10(drift.frac.long$value[index])~log10(drift.days.long$value[index])))
## there seems to be a relationship with poor R2 0.086
plot(oc.resis.subset$value,drift.days.long.naomit$value,pch=16,ylim=c(-5,55))
abline(h=0)
points(oc.resis.others$value,jitter(rep(-3.5,length(oc.resis.others$value)),40),col="darkred",pch=16)
abline(lm(drift.days.long.naomit$value~oc.resis.subset$value),col="red")
summary(lm(drift.days.long.naomit$value~oc.resis.subset$value))
#Do these values contain the ame information?
index <- which(!is.na(drift.days.long$value) & !is.na(drift.frac.long$value))
plot(log10(drift.frac.long$value[index]),log10(drift.days.long$value[index]))
# roughly yes - R2 of 0.67, we will just use the drift days metric
summary(lm(log10(drift.frac.long$value[index])~log10(drift.days.long$value[index])))
drift.days <- as.matrix(read.csv("ParticleTracking/AlexData071222/sites_in_range_named.csv",row.names = 1))
drift.days.long <- reshape2::melt(drift.days,varnames = c("Start","End"))
drift.frac <- as.matrix(read.csv("ParticleTracking/AlexData071222/fract_in_range_named.csv",row.names = 1))
drift.frac.long <- reshape2::melt(drift.frac,varnames = c("Start","End"))
#Do these values contain the ame information?
index <- which(!is.na(drift.days.long$value) & !is.na(drift.frac.long$value))
plot(log10(drift.frac.long$value[index]),log10(drift.days.long$value[index]))
# roughly yes - R2 of 0.67, we will just use the drift days metric
summary(lm(log10(drift.frac.long$value[index])~log10(drift.days.long$value[index])))
dev.off()
# roughly yes - R2 of 0.67, we will just use the drift days metric
summary(lm(log10(drift.frac.long$value[index])~log10(drift.days.long$value[index])))
#Do these values contain the ame information?
index <- which(!is.na(drift.days.long$value) & !is.na(drift.frac.long$value))
plot(log10(drift.frac.long$value[index]),log10(drift.days.long$value[index]))
# roughly yes - R2 of 0.67, we will just use the drift days metric
summary(lm(log10(drift.frac.long$value[index])~log10(drift.days.long$value[index])))
plot(drift.frac.long$value[index],drift.days.long$value[index])
plot(log10(drift.frac.long$value[index]),log10(drift.days.long$value[index]))
# correlation
corr(log10(drift.frac.long$value[index]),log10(drift.days.long$value[index]))
# correlation
cor(log10(drift.frac.long$value[index]),log10(drift.days.long$value[index]),method = "spearman")
# roughly yes - R2 of 0.67, we will just use the drift days metric
summary(lm(log10(drift.frac.long$value[index])~log10(drift.days.long$value[index])))
plot(drift.frac.long$value[index],drift.days.long$value[index])
plot(log10(drift.frac.long$value[index]),log10(drift.days.long$value[index]))
abline(lm(log10(drift.frac.long$value[index])~log10(drift.days.long$value[index])),col="darkred")
r
abline(lm(log10(drift.frac.long$value[index])~log10(drift.days.long$value[index])),col="darkred")
plot(log10(drift.frac.long$value[index]),log10(drift.days.long$value[index]))
abline(lm(log10(drift.frac.long$value[index])~log10(drift.days.long$value[index])),col="darkred")
plot(log10(drift.days.long$value[index]),log10(drift.frac.long$value[index]))
abline(lm(log10(drift.frac.long$value[index])~log10(drift.days.long$value[index])),col="darkred")
plot(log10(drift.frac.long$value[index]),log10(drift.days.long$value[index]))
abline(lm(log10(drift.days.long$value[index])~log10(drift.frac.long$value[index])),col="darkred")
# roughly yes - R2 of 0.67, we will just use the drift days metric
summary(lm(log10(drift.days.long$value[index])~log10(drift.frac.long$value[index])))
plot(log10(drift.frac.long$value[index]),log10(drift.days.long$value[index]),xlab = expression(log[10]~"Drift Fraction"), ylab = expression(log[10]~"Drift Days"))
plot(log10(drift.frac.long$value[index]),log10(drift.days.long$value[index]),xlab = expression(log[10]~"Particle Drift Fraction"), ylab = expression(log[10]~"Particle Minimum Drift Days"))
plot(log10(drift.frac.long$value[index]),log10(drift.days.long$value[index]),xlab = expression(log[10]~"Particle Drift Fraction"), ylab = expression(log[10]~"Particle Minimum Drift Days"),pch=16)
pdf("figures/Suppl/particleTrackingComp.pdf",width = 6,height = 5)
plot(log10(drift.frac.long$value[index]),log10(drift.days.long$value[index]),xlab = expression(log[10]~"Particle Drift Fraction"), ylab = expression(log[10]~"Particle Minimum Drift Days"),pch=16)
abline(lm(log10(drift.days.long$value[index])~log10(drift.frac.long$value[index])),col="darkred")
dev.off()
pdf("figures/Suppl/particleTrackingComp.pdf",width = 5,height = 5)
plot(log10(drift.frac.long$value[index]),log10(drift.days.long$value[index]),xlab = expression(log[10]~"Particle Drift Fraction"), ylab = expression(log[10]~"Particle Minimum Drift Days"),pch=16)
abline(lm(log10(drift.days.long$value[index])~log10(drift.frac.long$value[index])),col="darkred")
dev.off()
pdf("figures/Suppl/particleTrackingComp.pdf",width = 5,height = 5)
plot(log10(drift.frac.long$value[index]),log10(drift.days.long$value[index]),xlab = expression(log[10]~"Particle Drift Fraction"), ylab = expression(log[10]~"Particle Minimum Drift Days"),pch=16)
abline(lm(log10(drift.days.long$value[index])~log10(drift.frac.long$value[index])),col="darkred",lwd=2)
dev.off()
