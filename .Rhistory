Bacon("mbaPC014", rotate.axes=TRUE, title.location="topright", thick=4,slump = c(170,159), remember=FALSE, d.by=0.5,boundary=92.5, acc.mean=c(50,5))
library(rbacon)
library("rbacon")
library("bacon")
install.packages('rbacon')
Bacon("mbaPC014", rotate.axes=TRUE, title.location="topright", thick=4,slump = c(170,159), remember=FALSE, d.by=0.5,boundary=92.5, acc.mean=c(50,5))
library("rbacon")
Bacon("mbaPC014", rotate.axes=TRUE, title.location="topright", thick=4,slump = c(170,159), remember=FALSE, d.by=0.5,boundary=92.5, acc.mean=c(50,5))
system2("ls")
system2("cutadapt")
system2("/Users/gwm297/miniconda3/envs/cutadapt/bin/cutadapt", args = "--version")
system2("cutadapt")
if (!requireNamespace("BiocManager", quietly=TRUE))
install.packages("BiocManager")
BiocManager::install("dada2")
library(dada2)
install.packages("devtools")
library("devtools")
install_github("leholman/metabarTOAD")
library("metabarTOAD")
install_github("tobiasgf/lulu")
install_github("leholman/metabarTOAD")
library("metabarTOAD")
library(lulu)
version(lulu)
package_version(lulu)
packageVersion(lulu)
env.profile()
environment()
sessionInfo()
###############################################################################
# Point Extraction Script: Mean velocities at surface, top-20m, top-50m for:
#   (1) October subset (days 275 to 305 )
#   (2) Yearly average file (already time-mean)
#
# Then do nearest-neighbor extraction to pathpoints, producing 6 columns each
# for October and Yearly means.
###############################################################################
library(ncdf4)   # For NetCDF file operations
library(RANN)    # For fast nearest-neighbor search
library(dplyr)   # Optional, for data manipulation
# ----------------------------------------------------------------------------
# 1) Define File Paths
# ----------------------------------------------------------------------------
grid_file       <- "OceanModelDataExtraction/hiRGEMS_grid.nc"
vel_file        <- "OceanModelDataExtraction/hiRGEMS_vel_2018.nc"           # for October subset
vel_file_mean   <- "OceanModelDataExtraction/hiRGEMS_vel_2018_timmean.nc"   # already time-mean (yearly)
#UNIX - cdo timmean hiRGEMS_vel_2018.nc hiRGEMS_vel_2018_timmean.nc
hyd_file <- "OceanModelDataExtraction/hiRGEMS_hyd_2018.nc"
hyd_file_mean <-"OceanModelDataExtraction/hiRGEMS_hyd_2018_mean.nc"
# ----------------------------------------------------------------------------
# 2) Open and Read Grid Data
# ----------------------------------------------------------------------------
ncg <- nc_open(grid_file)
lon_grid <- ncvar_get(ncg, "XC")          # Longitudes [630]
lat_grid <- ncvar_get(ncg, "YC")          # Latitudes [768]
maskC    <- ncvar_get(ncg, "maskC")       # [630, 768, 75] (1=water,0=land)
# ----------------------------------------------------------------------------
# 2) Open and Read Grid Data
# ----------------------------------------------------------------------------
ncg <- nc_open(grid_file)
setwd("GitHubRepos/GalapeDNA")
# ----------------------------------------------------------------------------
# 2) Open and Read Grid Data
# ----------------------------------------------------------------------------
ncg <- nc_open(grid_file)
lon_grid <- ncvar_get(ncg, "XC")          # Longitudes [630]
lat_grid <- ncvar_get(ncg, "YC")          # Latitudes [768]
maskC    <- ncvar_get(ncg, "maskC")       # [630, 768, 75] (1=water,0=land)
Z        <- ncvar_get(ncg, "Z")           # [75], negative downward
nc_close(ncg)
# 2D surface mask = top cell
mask_surface <- maskC[ , , 1]
mask_flat    <- as.vector(mask_surface)
# ----------------------------------------------------------------------------
# 3) Define a vertical averaging function
# ----------------------------------------------------------------------------
vertical_average_top <- function(U_3d, Z, z_max) {
# U_3d shape can be [630,768,75] or [630,768,75,<time> averaged]
# Z is negative below surface => top z_max means Z >= -z_max
z_idx <- which(Z >= -z_max)
if (length(z_idx) == 0) {
return(array(NA_real_, dim = c(dim(U_3d)[1], dim(U_3d)[2])))
}
U_subset <- U_3d[ , , z_idx, drop=FALSE]
U_final  <- apply(U_subset, c(1, 2), mean, na.rm = TRUE)
return(U_final)
}
# ----------------------------------------------------------------------------
# 4) Function to read a time-range from vel_file and average over time
# ----------------------------------------------------------------------------
read_timeavg_3D <- function(filename, varname, day1, day2) {
nc    <- nc_open(filename)
t_len <- day2 - day1 + 1
# shape => [630,768,75,t_len]
U_4d <- ncvar_get(
nc, varid=varname,
start=c(1,1,1,day1),
count=c(-1,-1,-1,t_len)
)
nc_close(nc)
# average over time dimension => [630,768,75]
U_3d_mean <- apply(U_4d, c(1,2,3), mean, na.rm=TRUE)
return(U_3d_mean)
}
#### ocean temp
temp_oct_3d <- read_timeavg_3D(hyd_file,"THETA", oct_t1, oct_t2)
temp_oct_surf <- temp_oct_3d[, ,1]
temp_oct_20 <- vertical_average_top(temp_oct_3d, Z, 20)
temp_oct_50 <- vertical_average_top(temp_oct_3d, Z, 50)
# ----------------------------------------------------------------------------
# 6) OCTOBER Subset (Days 274..304)
# ----------------------------------------------------------------------------
#### ocean movement
oct_t1 <- 275
oct_t2 <- 305  # about 31 days
#### ocean temp
temp_oct_3d <- read_timeavg_3D(hyd_file,"THETA", oct_t1, oct_t2)
temp_oct_surf <- temp_oct_3d[, ,1]
temp_oct_20 <- vertical_average_top(temp_oct_3d, Z, 20)
temp_oct_50 <- vertical_average_top(temp_oct_3d, Z, 50)
image(lon_grid, lat_grid, temp_oct_surf, main = "Surface Temperature")
image(lon_grid, lat_grid, temp_oct_20, main = "Surface Temperature")
image(lon_grid, lat_grid, temp_oct_50, main = "Surface Temperature")
ncy <- nc_open(hyd_file_mean)
temp_year_3d <-ncvar_get(ncy,"THETA", collapse_degen=FALSE)
nc_close(ncy)
length(dim(temp_year_3d))
temp_year_3d_2 <-  drop(u_year_3d)
temp_year_3d_2 <-  drop(temp_year_3d)
?drop
temp_year_3d <-  drop(temp_year_3d)
ncy <- nc_open(hyd_file_mean)
temp_year_3d <-ncvar_get(ncy,"THETA", collapse_degen=FALSE)
nc_close(ncy)
temp_year_3d <-  drop(temp_year_3d)
temp_year_surf <- temp_year_3d[ , , 1]
temp_year_surf <- temp_year_3d[ , , 1]
temp_year_20 <- vertical_average_top(temp_year_3d,Z,20)
temp_year_50 <- vertical_average_top(temp_year_3d,Z,50)
image(lon_grid, lat_grid, temp_year_surf, main = "Year Surface Temperature")
image(lon_grid, lat_grid, temp_year_20, main = "Year Surface Temperature")
image(lon_grid, lat_grid, temp_year_50, main = "Year Surface Temperature")
nn_extract_scalar_to_pathpoints <- function(scalar_2d, pathDF, mask_surf,
lon_grid, lat_grid, out_colname) {
# Flatten scalar and mask
scalar_flat <- as.vector(scalar_2d)
mask_flat   <- as.vector(mask_surf)
# Create grid points for nearest-neighbor search
nx <- length(lon_grid)
ny <- length(lat_grid)
grid_lon_2D <- outer(lon_grid, rep(1, ny))  # dim = [nx, ny]
grid_lat_2D <- outer(rep(1, nx), lat_grid)
grid_points <- cbind(as.vector(grid_lon_2D), as.vector(grid_lat_2D))
# Nearest-neighbor search
query_sites <- as.matrix(pathDF[, c("lon", "lat")])
nn_result   <- nn2(data=grid_points, query=query_sites, k=1)
nearest_idx <- nn_result$nn.idx[,1]
# Assign output column
pathDF[[out_colname]] <- NA_real_
for (i in seq_len(nrow(pathDF))) {
idx <- nearest_idx[i]
if (!is.na(mask_flat[idx]) && mask_flat[idx] == 1) {
pathDF[[out_colname]][i] <- scalar_flat[idx]
}
}
return(pathDF)
}
sitemetadata <- read.csv("metadata.site.out.csv")
View(sitemetadata)
nn_extract_scalar <- function(scalar_2d, lon_grid, lat_grid, query_lon, query_lat) {
# Flatten scalar and build grid point list
nx <- length(lon_grid)
ny <- length(lat_grid)
grid_lon_2D <- outer(lon_grid, rep(1, ny))
grid_lat_2D <- outer(rep(1, nx), lat_grid)
grid_points <- cbind(as.vector(grid_lon_2D), as.vector(grid_lat_2D))
scalar_flat <- as.vector(scalar_2d)
# Nearest-neighbor search
query_points <- cbind(query_lon, query_lat)
nn_result <- nn2(data=grid_points, query=query_points, k=1)
nearest_idx <- nn_result$nn.idx[,1]
# Return matched values
return(scalar_flat[nearest_idx])
}
test <- nn_extract_scalar(temp_year_surf,lon_grid, lat_grid,sitemetadata$lon2,sitemetadata$lat2)
nn_extract_scalar(temp_year_surf,lon_grid, lat_grid,sitemetadata$lon2,sitemetadata$lat2)
View(temp_year_surf)
temp_year_surf==0
table(temp_year_surf==0)
temp_year_surf_2 <- temp_year_surf
temp_year_surf_2[temp_year_surf_2==0] <- NA
image(lon_grid, lat_grid, temp_year_surf_2, main = "Year Surface Temperature")
nn_extract_scalar <- function(scalar_2d, lon_grid, lat_grid, query_lon, query_lat, mask2d = NULL) {
nx <- length(lon_grid)
ny <- length(lat_grid)
grid_lon_2D <- outer(lon_grid, rep(1, ny))
grid_lat_2D <- outer(rep(1, nx), lat_grid)
grid_points <- cbind(as.vector(grid_lon_2D), as.vector(grid_lat_2D))
scalar_flat <- as.vector(scalar_2d)
query_points <- cbind(query_lon, query_lat)
nn_result <- nn2(data=grid_points, query=query_points, k=1)
nearest_idx <- nn_result$nn.idx[,1]
# If mask provided, respect it
if (!is.null(mask2d)) {
mask_flat <- as.vector(mask2d)
output <- rep(NA_real_, length(nearest_idx))
for (i in seq_along(nearest_idx)) {
idx <- nearest_idx[i]
if (!is.na(mask_flat[idx]) && mask_flat[idx] == 1) {
output[i] <- scalar_flat[idx]
}
}
} else {
output <- scalar_flat[nearest_idx]
}
return(output)
}
test <- nn_extract_scalar(temp_year_surf,lon_grid, lat_grid,sitemetadata$lon2,sitemetadata$lat2,mask2d = mask_surface)
test
nn_extract_scalar <- function(scalar_2d, lon_grid, lat_grid, query_lon, query_lat, mask2d = NULL) {
nx <- length(lon_grid)
ny <- length(lat_grid)
grid_lon_2D <- outer(lon_grid, rep(1, ny))
grid_lat_2D <- outer(rep(1, nx), lat_grid)
lon_vec <- as.vector(grid_lon_2D)
lat_vec <- as.vector(grid_lat_2D)
scalar_flat <- as.vector(scalar_2d)
# Apply mask: only use ocean points for nearest-neighbor search
if (!is.null(mask2d)) {
mask_flat <- as.vector(mask2d)
valid_idx <- which(!is.na(mask_flat) & mask_flat == 1)
grid_points <- cbind(lon_vec[valid_idx], lat_vec[valid_idx])
scalar_flat <- scalar_flat[valid_idx]
} else {
grid_points <- cbind(lon_vec, lat_vec)
}
query_points <- cbind(query_lon, query_lat)
nn_result <- nn2(data=grid_points, query=query_points, k=1)
nearest_idx <- nn_result$nn.idx[,1]
return(scalar_flat[nearest_idx])
}
test <- nn_extract_scalar(temp_year_surf,lon_grid, lat_grid,sitemetadata$lon2,sitemetadata$lat2,mask2d = mask_surface)
test
sitemetadata$temp_year_surf <- nn_extract_scalar(temp_year_surf,lon_grid, lat_grid,sitemetadata$lon2,sitemetadata$lat2,mask2d = mask_surface)
sitemetadata$temp_year_20 <- nn_extract_scalar(temp_year_20,lon_grid, lat_grid,sitemetadata$lon2,sitemetadata$lat2,mask2d = mask_surface)
sitemetadata$temp_year_50 <- nn_extract_scalar(temp_year_50,lon_grid, lat_grid,sitemetadata$lon2,sitemetadata$lat2,mask2d = mask_surface)
View(sitemetadata)
temp_oct_50
summary(temp_oct_50)
unlist(temp_oct_50)
summary(unlist(temp_oct_50))
c(temp_oct_50)
summary(c(temp_oct_50))
plot(temp_oct_50)
plot(c(temp_oct_50))
hist(temp_oct_50)
# ----------------------------------------------------------------------------
# 1) Define File Paths
# ----------------------------------------------------------------------------
#UNIX - cdo timmean hiRGEMS_vel_2018.nc hiRGEMS_vel_2018_timmean.nc
grid_file       <- "OceanModelDataExtraction/hiRGEMS_grid.nc"
vel_file        <- "OceanModelDataExtraction/hiRGEMS_vel_2018.nc"           # for October subset
vel_file_mean   <- "OceanModelDataExtraction/hiRGEMS_vel_2018_timmean.nc"   # already time-mean (yearly)
hyd_file <- "OceanModelDataExtraction/hiRGEMS_hyd_2018.nc"
hyd_file_mean <-"OceanModelDataExtraction/hiRGEMS_hyd_2018_mean.nc"
# ----------------------------------------------------------------------------
# 2) Open and Read Grid Data
# ----------------------------------------------------------------------------
ncg <- nc_open(grid_file)
lon_grid <- ncvar_get(ncg, "XC")          # Longitudes [630]
lat_grid <- ncvar_get(ncg, "YC")          # Latitudes [768]
maskC    <- ncvar_get(ncg, "maskC")       # [630, 768, 75] (1=water,0=land)
Z        <- ncvar_get(ncg, "Z")           # [75], negative downward
nc_close(ncg)
# 2D surface mask = top cell
mask_surface <- maskC[ , , 1]
mask_flat    <- as.vector(mask_surface)
test <- ncvar_get(hyd_file_mean,"THETA")
hist(c(temp_oct_50),breaks=100)
vertical_average_top <- function(U_3d, Z, z_max, maskC = NULL) {
z_idx <- which(Z >= -z_max)
if (length(z_idx) == 0) {
return(array(NA_real_, dim = c(dim(U_3d)[1], dim(U_3d)[2])))
}
U_subset <- U_3d[ , , z_idx, drop=FALSE]
# Apply 3D land mask if provided
if (!is.null(maskC)) {
mask_subset <- maskC[ , , z_idx, drop=FALSE]
U_subset[mask_subset == 0] <- NA  # mask out land
}
U_final  <- apply(U_subset, c(1, 2), mean, na.rm = TRUE)
return(U_final)
}
hist(c(vertical_average_top(temp_oct_3d, Z, 50, maskC = maskC)),breaks=100)
#### ocean temp
temp_oct_3d <- read_timeavg_3D(hyd_file,"THETA", oct_t1, oct_t2)
temp_oct_surf <- temp_oct_3d[, ,1]
temp_oct_20 <- vertical_average_top(temp_oct_3d, Z, 20, maskC = maskC)
temp_oct_50 <- vertical_average_top(temp_oct_3d, Z, 50, maskC = maskC)
temp_year_surf <- temp_year_3d[ , , 1]
temp_year_20 <- vertical_average_top(temp_year_3d,Z,20, maskC = maskC)
temp_year_50 <- vertical_average_top(temp_year_3d,Z,50, maskC = maskC)
image(lon_grid, lat_grid, temp_year_surf_2, main = "Year Surface Temperature")
image(lon_grid, lat_grid, temp_year_50, main = "Year Surface Temperature")
image(lon_grid, lat_grid, temp_year_20, main = "Year Surface Temperature")
image(lon_grid, lat_grid, temp_year_surf, main = "Year Surface Temperature")
image(lon_grid, lat_grid, temp_year_50, main = "Year Surface Temperature")
image(lon_grid, lat_grid, temp_year_20, main = "Year Surface Temperature")
image(lon_grid, lat_grid, temp_oct_20, main = "Year Surface Temperature")
sitemetadata$temp_year_surf <- nn_extract_scalar(temp_year_surf,lon_grid, lat_grid,sitemetadata$lon2,sitemetadata$lat2,mask2d = mask_surface)
sitemetadata$temp_year_20 <- nn_extract_scalar(temp_year_20,lon_grid, lat_grid,sitemetadata$lon2,sitemetadata$lat2,mask2d = mask_surface)
sitemetadata$temp_year_50 <- nn_extract_scalar(temp_year_50,lon_grid, lat_grid,sitemetadata$lon2,sitemetadata$lat2,mask2d = mask_surface)
sitemetadata$temp_oct_surf <- nn_extract_scalar(temp_oct_surf,lon_grid, lat_grid,sitemetadata$lon2,sitemetadata$lat2,mask2d = mask_surface)
sitemetadata$temp_oct_20 <- nn_extract_scalar(temp_oct_20,lon_grid, lat_grid,sitemetadata$lon2,sitemetadata$lat2,mask2d = mask_surface)
sitemetadata$temp_oct_50 <- nn_extract_scalar(temp_oct_50,lon_grid, lat_grid,sitemetadata$lon2,sitemetadata$lat2,mask2d = mask_surface)
View(sitemetadata)
oltemp <- read.csv("distanceData/archive/Temp_030623.csv")
plot(oltemp$Oct,sitemetadata$temp_oct_20)
summary(lm(oltemp$Oct~sitemetadata$temp_oct_20))
summary(lm(oltemp$Oct~sitemetadata$temp_oct_50))
plot(oltemp$Oct~sitemetadata$temp_oct_50)
plot(oltemp$Oct~sitemetadata$temp_year_20)
write.csv(sitemetadata,"distanceData/Temp.csv")
