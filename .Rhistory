colnames(expSamples)
sort(colnames(expSamples))
sort(metadata$SampleID[metadata$SampleType=="Experimental"]))
sort(metadata$SampleID[metadata$SampleType=="Experimental"])
colnames(indata)
expSamples <- indata[,match(gsub(",|-",".",sort(metadata$SampleID[metadata$SampleType=="Experimental"])),colnames(indata))]
View(expSamples)
colnames(expSamples)
unique(metadata$SampleType)
ctlSamples <-indata[,match(gsub(",|-",".",sort(metadata$SampleID[metadata$SampleType=="ControlN"])),colnames(indata))]
metadata$SampleID[metadata$SampleType=="ControlN"]
sort(metadata$SampleID[metadata$SampleType=="ControlN"])
gsub(",|-",".",sort(metadata$SampleID[metadata$SampleType=="ControlN"]))
match(gsub(",|-",".",sort(metadata$SampleID[metadata$SampleType=="ControlN"])),colnames(indata))
ctlSamples <-indata[,omit.na(match(gsub(",|-",".",sort(metadata$SampleID[metadata$SampleType=="ControlN"])),colnames(indata)))]
ctlSamples <-indata[,na.omit(match(gsub(",|-",".",sort(metadata$SampleID[metadata$SampleType=="ControlN"])),colnames(indata)))]
View(ctlSamples)
#Filter 1 - minimum number of reads for any ID
expSamples[expSamples< minreads] <- 0
expSamples <- expSamples[rowSums(expSamples) > 0,]
#Filter 2 - within samples OTU must appear in more than one sample (this works because there are lots of reps per site and sample)
filtersam <- expSamples
filtersam[filtersam>0 ] <- 1
filtersam <-filtersam[rowSums(filtersam) > 1,]
View(filtersam)
expSamples <- expSamples[rownames(expSamples) %in% rownames(filtersam),]
View(expSamples)
#Filter 3 -Make the maximum umber of reads for each OTU in the contam 100
controlsCONTAM <- ctlSamples[rowSums(ctlSamples) > 0,]
View(controlsCONTAM)
View(expSamples)
View(indata)
View(expSamples)
contamOTU <- 1
loopOTU <- row.names(controlsCONTAM[contamOTU,])
max(controlsCONTAM[contamOTU,])
samples[loopOTU,]
expSamples[loopOTU,]
loopOTU
View(expSamples)
samples[loopOTU,]
expSamples[loopOTU,]
expSamples["ASV_1",]
expSamples["ASV_2",]
expSamples["ASV_3",]
expSamples["ASV_4",]
#Filter 3 -Anything in the negative controls removed
controlsCONTAM <- ctlSamples[rowSums(ctlSamples) > 0,]
for (contamOTU in 1:length(controlsCONTAM[,1])){
loopOTU <- row.names(controlsCONTAM[contamOTU,])
loopMax <- max(controlsCONTAM[contamOTU,])
if (any(is.na(expSamples[loopOTU,]))){next}
expSamples[loopOTU,expSamples[loopOTU,]<loopMax] <- 0
print(paste("Cleaning contaminants",contamOTU))
}
View(expSamples)
match(row.names(rawdata),names(rawSeqs))
match(row.names(expSamples),names(rawSeqs))
CleanedOutput <- cbind(expSamples,
unname(rawSeqs)[match(row.names(expSamples),names(rawSeqs))],
Assignments[match(row.names(expSamples),Assignments$OTU),])
View(CleanedOutput)
dir.create("data/cleanedData")
write.csv(CleanedOutput,"data/cleanedData/clean.dada2.csv")
rownames(expSamples)
colnames(expSamples)
metadata$SampleID
gsub(",|-",".",metadata$SampleID)
match(colnames(expSamples),gsub(",|-",".",metadata$SampleID))
metadata$Sample[match(colnames(expSamples),gsub(",|-",".",metadata$SampleID))]
expSampleBinary <- expSamples
expSampleBinary[expSampleBinary>0] <- 1
View(expSampleBinary)
test <- aggregate(expSampleBinary,
by=metadata$Sample[match(colnames(expSamples),gsub(",|-",".",metadata$SampleID))],
FUN=sum)
test <- aggregate(expSampleBinary,
by=as.list(metadata$Sample[match(colnames(expSamples),gsub(",|-",".",metadata$SampleID))]),
FUN=sum)
by=as.list(metadata$Sample[match(colnames(expSamples),gsub(",|-",".",metadata$SampleID))])
View(by)
for sample in unique(metadata$Sample[match(colnames(expSamples),gsub(",|-",".",metadata$SampleID))]){
for (sample in unique(metadata$Sample[match(colnames(expSamples),gsub(",|-",".",metadata$SampleID))])){
print(sample)
}
str(expSampleBinary)
str(expSampleBinary)[1]
length(expSampleBinary)
length(expSampleBinary[1,])
length(expSampleBinary[,1])
outdata <- as.data.frame(matrix(nrow = length(expSampleBinary[,1]),ncol=length(expSampleBinary[1,])))
View(outdata)
colnames(outdata) <- unique(metadata$Sample[match(colnames(expSamples),gsub(",|-",".",metadata$SampleID))])
View(outdata)
unique(metadata$Sample[match(colnames(expSamples),gsub(",|-",".",metadata$SampleID))]
)
colnames(outdata) <- gsub("-",".",unique(metadata$Sample[match(colnames(expSamples),gsub(",|-",".",metadata$SampleID))]))
View(outdata)
nownames(outdata) <- rownames(expSampleBinary)
rownames(outdata) <- rownames(expSampleBinary)
View(outdata)
for (sample in unique(metadata$Sample[match(colnames(expSamples),gsub(",|-",".",metadata$SampleID))])){
loopsample <- gsub("-",".",sample)
print(loopsample)
}
loopsample
match(loopsample,colnames(expSamplesBinary))
match(loopsample,colnames(expSampleBinary))
loopsample
colnames(expSampleBinary)
metadata$Sample[match(colnames(expSamples),gsub(",|-",".",metadata$SampleID))]
match(loopsample,metadata$Sample[match(colnames(expSamples),gsub(",|-",".",metadata$SampleID))])
metadata$Sample[match(colnames(expSamples),gsub(",|-",".",metadata$SampleID))]
sampleindex <- gsub("-|,",".",metadata$Sample[match(colnames(expSamples),gsub(",|-",".",metadata$SampleID))])
match(loopsample,sampleindex)
match(sampleindex,loopsample)
na.omit(match(sampleindex,loopsample))
sampleindex %in% loopsample
loopsample
expSampleBinary[,sampleindex %in% loopsample]
rowSums(expSampleBinary[,sampleindex %in% loopsample])
colnames(expSamples)
expSampleBinary <- expSamples
expSampleBinary[expSampleBinary>0] <- 1
outdata <- as.data.frame(matrix(nrow = length(expSampleBinary[,1]),ncol=length(expSampleBinary[1,])))
colnames(outdata) <- gsub("-",".",unique(metadata$Sample[match(colnames(expSamples),gsub(",|-",".",metadata$SampleID))]))
rownames(outdata) <- rownames(expSampleBinary)
for (sample in unique(metadata$Sample[match(colnames(expSamples),gsub(",|-",".",metadata$SampleID))])){
loopsample <- gsub("-",".",sample)
print(loopsample)
outdata[,loopsample] <- rowSums(expSampleBinary[,sampleindex %in% loopsample])
}
View(outdata)
outdata <- as.data.frame(matrix(nrow = length(expSampleBinary[,1]),ncol=length(expSampleBinary[1,])))
View(outdata)
outdata <- as.data.frame(matrix(nrow = length(expSampleBinary[,1]),ncol=length(unique(metadata$Sample[match(colnames(expSamples),gsub(",|-",".",metadata$SampleID))]))))
View(outdata)
colnames(outdata) <- gsub("-",".",unique(metadata$Sample[match(colnames(expSamples),gsub(",|-",".",metadata$SampleID))]))
rownames(outdata) <- rownames(expSampleBinary)
for (sample in unique(metadata$Sample[match(colnames(expSamples),gsub(",|-",".",metadata$SampleID))])){
loopsample <- gsub("-",".",sample)
print(loopsample)
outdata[,loopsample] <- rowSums(expSampleBinary[,sampleindex %in% loopsample])
}
View(outdata)
CleanedOutputSumSample <- cbind(outdata,
unname(rawSeqs)[match(row.names(outdata),names(rawSeqs))],
Assignments[match(row.names(outdata),Assignments$OTU),])
View(CleanedOutputSumSample)
write.csv(CleanedOutputSumSample,"data/cleanedData/clean.dada2.sampleSum.csv")
hist(CleanedOutputSumSample)
hist(as.numeric(CleanedOutputSumSample))
hist(as.numeric(CleanedOutputSumSample))
hist(outdata)
hist(as.numeric(outdata))
View(outdata)
as.numeric(outdata)
as.integer(outdata)
hist(as.matrix(outdata))
hist(as.matrix(outdata)>1)
hist(as.matrix(outdata[outdat>1]))
hist(as.matrix(outdata[outdata>1]))
assignments <- read.csv("data/taxonomy/Parsedtax.csv")
alldat <- read.csv("data/cleanedData/clean.dada2.csv",row.names = 1)
alldatSum <- read.csv("data/cleanedData/clean.dada2.sampleSum.csv",row.names = 1)
assignments.matched <- assignments[match(rownames(alldat),assignments$OTU),]
test <- rownames(assignments.matched)
test2 <- cbind(alldat,assignments.matched)
write.csv(test2,"data/test.csv")
require("vegan")
require("vegan")
set.seed("123456")
rrarefy(t(alldat))
View(alldat)
alldat <- read.csv("data/cleanedData/clean.dada2.csv",row.names = 1)[,1:360]
View(alldat)
alldat <- read.csv("data/cleanedData/clean.dada2.csv",row.names = 1)[,1:360]
rrarefy(t(alldat))
rrarefy(t(alldat),1000)
rrarefy(alldat,1000)
rarecurve(alldat,1000)
rarecurve(t(alldat),1000)
?rarecurve
rarecurve(t(alldat),1000,label = F)
dir.create("figures/")
#dir.create("figures/")
pdf("figures/rarefy1.pdf")
rarecurve(t(alldat),1000,label = F)
rarecurve(t(alldat),1000,label = F)
dev.off()
#dir.create("figures/")
pdf("figures/rarefy1.pdf",height = 8,width = 6)
rarecurve(t(alldat),1000,label = F)
rarecurve(t(alldat),1000,label = F)
dev.off()
#dir.create("figures/")
pdf("figures/rarefy1.pdf",height = 8,width = 6)
rarecurve(t(alldat),1000,label = F)
rarecurve(t(alldat),1000,label = F)
dev.off()
#dir.create("figures/")
pdf("figures/rarefy1.pdf",height = 8,width = 6)
rarecurve(t(alldat),1000,label = F)
dev.off()
#dir.create("figures/")
pdf("figures/rarefy1.pdf",height = 8,width = 6)
rarecurve(t(alldat),1000,label = F)
rarecurve(t(alldat),1000,label = F)
dev.off()
#dir.create("figures/")
pdf("figures/rarefy1.pdf",height = 8,width = 6)
rarecurve(t(alldat),1000,label = F)
dev.off()
#dir.create("figures/")
pdf("figures/rarefy1.pdf",height = 8,width = 6)
rarecurve(t(alldat),1000,label = F)
#dir.create("figures/")
pdf("figures/rarefy1.pdf",height = 8,width = 6)
rarecurve(t(alldat),1000,label = F)
dev.off()
```{r,eval=F,echo=F}
#dir.create("figures/")
pdf("figures/rarefy1.pdf",height = 8,width = 6)
rarecurve(t(alldat),1000,label = F)
dev.off()
require("vegan")
require("vegan")
set.seed("123456")
require("vegan")
set.seed("123456")
#dir.create("figures/")
pdf("figures/rarefy1.pdf",height = 8,width = 6)
rarecurve(t(alldat),1000,label = F)
assignments <- read.csv("data/taxonomy/Parsedtax.csv")
alldat <- read.csv("data/cleanedData/clean.dada2.csv",row.names = 1)[,1:360]
alldat <- read.csv("data/cleanedData/clean.dada2.csv",row.names = 1)[,1:360]
alldatSum <- read.csv("data/cleanedData/clean.dada2.sampleSum.csv",row.names = 1)[,1:360]
alldatSum <- read.csv("data/cleanedData/clean.dada2.sampleSum.csv",row.names = 1)[,1:360]
alldatSum <- read.csv("data/cleanedData/clean.dada2.sampleSum.csv",row.names = 1)
View(alldatSum)
assignments <- read.csv("data/taxonomy/Parsedtax.csv")
alldat <- read.csv("data/cleanedData/clean.dada2.csv",row.names = 1)[,1:360]
assignments.matched <- assignments[match(rownames(alldat),assignments$OTU),]
#dir.create("figures/")
pdf("figures/rarefy1.pdf",height = 8,width = 6)
rarecurve(t(alldat),1000,label = F)
rarecurve(t(alldat),1000,label = F)
dev.off()
require("vegan")
set.seed("123456")
#dir.create("figures/")
pdf("figures/rarefy1.pdf",height = 8,width = 6)
rarecurve(t(alldat),1000,label = F)
rarecurve(t(alldat),1000,label = F)
dev.off()
plot(1:10,1:10)
#dir.create("figures/")
pdf("figures/rarefy1.pdf",height = 8,width = 6)
rarecurve(t(alldat),1000,label = F)
rarecurve(t(alldat),1000,label = F)
dev.off()
#dir.create("figures/")
pdf("figures/rarefy1.pdf",height = 8,width = 6)
rarecurve(t(alldat),1000,label = F)
rarecurve(t(alldat),1000,label = F)
dev.off()
plot(1:10,1:10)
#dir.create("figures/")
pdf("figures/rarefy1.pdf",height = 8,width = 6)
rarecurve(t(alldat),1000,label = F)
dev.off()
plot(1:10,1:10)
#dir.create("figures/")
pdf("figures/rarefy1.pdf",height = 8,width = 6)
rarecurve(t(alldat),1000,label = F)
rarecurve(t(alldat),1000,label = F)
dev.off()
#dir.create("figures/")
pdf("figures/rarefy1.pdf",height = 8,width = 6)
rarecurve(t(alldat),1000,label = F)
rarecurve(t(alldat),1000,label = F)
dev.off()
pdf("figures/test.pdf")
plot(1:10,1:10,height = 8,width = 6)
pdf("figures/test.pdf")
plot(1:10,1:10,height = 8,width = 6)
plot(1:10,1:10)
dev.off()
pdf("figures/test.pdf",height = 8,width = 6)
plot(1:10,1:10)
dev.off()
#dir.create("figures/")
rarecurve(t(alldat),1000,label = F)
#dir.create("figures/")
rarecurve(t(alldat),1000,label = F)
```{r}
require("metabarTOAD")
require("lulu")
require("Biostrings")
require("metabarTOAD")
require("lulu")
require("Biostrings")
require("taxize")
#Set some variables
minreads <- 2
items <- NULL
#Set the seed
set.seed("123456")
#Read in metadata
metadata<-read.csv("metadata.csv")
metadata$rep <- sapply(strsplit(metadata$SampleID,","), `[`, 2)
|>
?|>
2 |> sqrt()
|>
2 |> sqrt()
library("metabarTOAD")
library("vegan")
library("Biostrings")
library("RColorBrewer")
library("seqinr")
library("sp")
#### Settings and Setup####
##Get metadata
metadat <- read.csv("metadata.csv")
metadat.site <- read.csv("metadata.site.csv")
#Set some variables
minreads <- 3
items <- NULL
#Set the seed
set.seed("123456")
palette(brewer.pal(12, "Set3"))
metadat.site$lat2 <- as.numeric(paste0("-",substr(metadat.site$latitude,3,4),".",substr(as.character(as.numeric(paste0(substr(metadat.site$latitude,6,7),".",substr(metadat.site$latitude,9,11)))/60),3,20)))
metadat.site$lon2 <- as.numeric(paste0("-",substr(metadat.site$longitude,4,5),".",substr(as.character(as.numeric(paste0(substr(metadat.site$longitude,8,9),".",substr(metadat.site$longitude,11,13)))/60),3,20)))
p.data <- read.csv("/Users/gwm297/GitHubRepos/GalapeDNA/ParticleTracking/AlexData010420.21/1km_new_stats.csv")
View(p.data)
p.data2 <- p.data[p.data$day==3]
p.data$day
p.data2 <- p.data[p.data$day==-3]
p.data2 <- p.data[p.data$day=="-3"]
p.data2 <- p.data[p.data$day=="-3",]
View(p.data2)
plot(p.data2)
plot(p.data2$area..km.,p.data2$ave_dist)
lm(plot(p.data2$area..km.,p.data2$ave_dist))
lm(plot(p.data2$area..km.~p.data2$ave_dist))
lm(p.data2$area..km.~p.data2$ave_dist)
summary(lm(p.data2$area..km.~p.data2$ave_dist))
plot(lm(p.data2$area..km.~p.data2$ave_dist))
plot(p.data2$area..km.,p.data2$ave_dist)
y_val <- 1+ 2*cos(pi*x1)+2/(1+exp(-5*(x2)))
set.seed(2)
n <- 400
x1 <- rnorm(n)
x2 <- rnorm(n)
y_val <- 1+ 2*cos(pi*x1)+2/(1+exp(-5*(x2)))
y_nrom <- y_val+rnorm(n,0,0.5)
y_negbinom <- rnbinom(n,miu=exp(y_val),size=10)
x1 <- rnorm(n)
x2 <- rnorm(n)
y_val <- 1+ 2*cos(pi*x1)+2/(1+exp(-5*(x2)))
y_nrom <- y_val+rnorm(n,0,0.5)
y_negbinom <- rnbinom(n,mu=exp(y_val),size=10)
y_nrom <- y_val+rnorm(n,0,0.5)
y_negbinom <- rnbinom(n,mu=exp(y_val),size=10)
y_binom <- rbinom(n,1,prob=exp(y_val)/(1+exp(y_val)))
set.seed(2)
n <- 400
x1 <- rnorm(n)
x2 <- rnorm(n)
y_val <- 1+ 2*cos(pi*x1)+2/(1+exp(-5*(x2)))
y_nrom <- y_val+rnorm(n,0,0.5)
y_negbinom <- rnbinom(n,mu=exp(y_val),size=10)
y_binom <- rbinom(n,1,prob=exp(y_val)/(1+exp(y_val)))
View(combined_distances.ednasites)
library(metabarTOAD)
MamMeta <- read.csv("mam16s_PSinfo.txt")
View(MamMeta)
MamMeta <- read.table("mam16s_PSinfo.txt",sep="\t")
View(MamMeta)
View(MamMeta)
Mamtags <- read.table("mam16s_tags.txt",sep="\t")
View(Mamtags)
View(MamMeta)
View(Mamtags)
Mamtags$v1[match(Mamtags$V2,MamMeta$V2)]
Mamtags$V1[match(Mamtags$V2,MamMeta$V2)]
Mamtags$V1[match(MamMeta$V2,Mamtags$V2)]
MamMeta$fwdTag <- Mamtags$V1[match(MamMeta$V2,Mamtags$V2)]
MamMeta$revTag <- Mamtags$V1[match(MamMeta$V3,Mamtags$V2)]
View(MamMeta)
paste(MamMeta,1:4)
paste(MamMeta$V1,1:4)
paste0(MamMeta$V1,1:4)
paste0(MamMeta$V1,1:4,sep='.')
paste0(MamMeta$V1,c(1:4),sep='.')
paste(MamMeta$V1,c(1:4),sep='.')
paste(MamMeta$V1,1:4,sep='.')
MamMeta$NewName <- paste(MamMeta$V1,1:4,sep='.')
View(MamMeta)
files <- MamMeta
View(files)
files <- MamMeta
SeqCentreOutput <- "MTOAAirMam16S_S1_L001_R"
SeqCentreOutput <- "MTOAAirMam16S_S1_L001_R"
paste0("--pair-adapters --trimmed-only -g ^",files$fwdTag[loopfile]," -G ^",files$revTag[loopfile]," -j 7 -o ",files$NewName[loopfile],".R1.fastq.gz -p ",files$NewName[loopfile],".R2.fastq.gz ",SeqCentreOutput,"1_001.fastq.gz ",SeqCentreOutput,"2_001.fastq.gz")
loopfile <- 1
paste0("--pair-adapters --trimmed-only -g ^",files$fwdTag[loopfile]," -G ^",files$revTag[loopfile]," -j 7 -o ",files$NewName[loopfile],".R1.fastq.gz -p ",files$NewName[loopfile],".R2.fastq.gz ",SeqCentreOutput,"1_001.fastq.gz ",SeqCentreOutput,"2_001.fastq.gz")
MamMeta <- read.table("mam16s_PSinfo.txt",sep="\t")
Mamtags <- read.table("mam16s_tags.txt",sep="\t")
MamMeta$fwdTag <- Mamtags$V1[match(MamMeta$V2,Mamtags$V2)]
MamMeta$revTag <- Mamtags$V1[match(MamMeta$V3,Mamtags$V2)]
MamMeta$NewName <- paste(MamMeta$V1,1:4,sep='.')
View(MamMeta)
View(MamMeta)
forwards <- list.files("1.rawreads/",pattern="R1.fastq.gz")
reverses <- list.files("1.rawreads/",pattern="R2.fastq.gz")
forwards <- list.files("scratch/",pattern="R1.fastq.gz")
reverses <- list.files("scratch/",pattern="R2.fastq.gz")
forwards <- list.files("scratch/testSet/",pattern="R1.fastq.gz")
reverses <- list.files("scratch/testSet/",pattern="R2.fastq.gz")
forwards.S <- list.files("scratch/testSet/",pattern="S.R1.fastq.gz")
forwards.S <- list.files("scratch/testSet/",pattern="S.R1.fastq.gz")
forwards.A <- list.files("scratch/testSet/",pattern="A.R1.fastq.gz")
reverses.S <- list.files("scratch/testSet/",pattern="S.R2.fastq.gz")
reverses.A <- list.files("scratch/testSet/",pattern="A.R2.fastq.gz")
#a little function to do revcomp
RevComp <- function(input){
require(Biostrings)
dna <- DNAString(input)
dna <- reverseComplement(dna)
return(toString(dna))}
if(length(forwards.S)!=length(reverses.S)){message("Files look good, crack on!")}else{stop("F & R different lengths")}
length(forwards.S)
length(reverses.S)
if(length(forwards.S)!=length(reverses.S)){message("Files look good, crack on!")}else{stop("F & R different lengths")}
loopname <-  gsub("*.R[12].fastq.gz","",forwards.S)
loopname <-  gsub("*.[A|S].R[12].fastq.gz","",forwards.S)
loopname
View(files)
names <-  gsub("*.[A|S].R[12].fastq.gz","",forwards.S)
loopfile <- 1
loopname <- names[loopfile]
loopname
names
paste0("--pair-adapters --trimmed-only -g ^",primerF," -G ^",primerR," -j 7 -o 7.DADA2/trimmed/temp/",loopname,".S.R1.fastq.gz -p 7.DADA2/trimmed/temp/",loopname,".S.R2.fastq.gz 1.rawreads/",loopname,".T.S.R1.fastq.gz 1.rawreads/",loopname,".T.S.R1.fastq.gz")
primerF <- "CGGTTGGGGTGACCTCGGA"   # mammal 16s
primerR <- "GCTGTTATCCCTAGGGTAACT" # mammal 16s
forwards <- list.files("1.rawreads/",pattern="R1.fastq.gz")
reverses <- list.files("1.rawreads/",pattern="R2.fastq.gz")
forwards.S <- list.files("scratch/testSet/",pattern="S.R1.fastq.gz")
forwards.A <- list.files("scratch/testSet/",pattern="A.R1.fastq.gz")
reverses.S <- list.files("scratch/testSet/",pattern="S.R2.fastq.gz")
reverses.A <- list.files("scratch/testSet/",pattern="A.R2.fastq.gz")
paste0("--pair-adapters --trimmed-only -g ^",primerF," -G ^",primerR," -j 7 -o 7.DADA2/trimmed/temp/",loopname,".S.R1.fastq.gz -p 7.DADA2/trimmed/temp/",loopname,".S.R2.fastq.gz 1.rawreads/",loopname,".T.S.R1.fastq.gz 1.rawreads/",loopname,".T.S.R1.fastq.gz")
View(files)
View(MamMeta)
primerF <- "CGGTTGGGGTGACCTCGGA"   # mammal 16s
fnFsSense[57:60]
# Load packages
library(ncdf4)
library(raster)
install.packages("ncdf4","raster")
# Load packages
library(ncdf4)
library(raster)
install.packages(raster")
""
install.packages("raster")
install.packages("raster")
library(raster)
# Load packages
library(ncdf4)
gwtwd
getwd
getwd()
setwd("GitHubRepos/GalapeDNA/")
#load GEBCO_2022 netcdf downloaded on 110822 - https://www.gebco.net/data_and_products/gridded_bathymetry_data/
gebco <- raster("mapBuilding/gebco_2022_sub_ice_topo/GEBCO_2022_sub_ice_topo.nc")
plot(gebco)
nc_open("GEBCO_2019.nc")
nc_open("mapBuilding/gebco_2022_sub_ice_topo/GEBCO_2022_sub_ice_topo.nc")
?getData
?extent
# Create extent (our map area)
galap.ex <- extent(-92.145, -88.1749, -1.8196, 1.8677)
# Create a crop of the bathymetric data
gebco.crop <- crop(gebco, galap.ex)
plot(gebco.crop)
#function from https://www.benjaminbell.co.uk/2019/08/bathymetric-maps-in-r-colour-palettes.html
colbr <- function(x, b1=50, b2=50, r1=-2, r2=-2) {
# Min/max values of the raster (x)
mi <- cellStats(x, stat="min")-100
ma <- cellStats(x, stat="max")+100
# Create sequences, but only use unique numbers
s1 <- unique(round(seq(mi, 0, 0-mi/b1),r1))
s2 <- unique(round(seq(0, ma, ma/b2),r2))
# Combine sequence for our break points, removing duplicate 0
s3 <- c(s1, s2[-1])
# Create a list with the outputs
# [[1]] = length of the first sequence minus 1 (water)
# [[2]] = length of the second sequence minus 1 (land)
# [[3]] = The break points
x <- list(length(s1)-1, length(s2)-1, s3)
}
pr.br <- colbr(gebco.crop)
pr.br
pr.br <- colbr(gebco.crop,b2=100)
pr.br
pr.br <- colbr(gebco.crop,b2=4)
pr.br
?getData()
