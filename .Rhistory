pch=16, cex=0.95,
xlab="Geographic Distance (km)",
ylab="Jaccard Dissimilarity")
polygon(x = c(predictedData$x.GeoG[predictedData$z.OceR==0.38],
rev(predictedData$x.GeoG[predictedData$z.OceR==0.38]))/1000,
y = c(predictedData$lwr[predictedData$z.OceR==0.38],
rev(predictedData$upr[predictedData$z.OceR==0.38])),
col =  adjustcolor("blue", alpha.f = 0.10), border = NA)
points(predictedData$x.GeoG[predictedData$z.OceR==0.38]/1000,
predictedData$fit[predictedData$z.OceR==0.38],
type="l",col=adjustcolor("blue", alpha.f = 0.30),lwd=2)
polygon(x = c(predictedData$x.GeoG[predictedData$z.OceR==-0.38],
rev(predictedData$x.GeoG[predictedData$z.OceR==-0.38]))/1000,
y = c(predictedData$lwr[predictedData$z.OceR==-0.38],
rev(predictedData$upr[predictedData$z.OceR==-0.38])),
col =  adjustcolor("red", alpha.f = 0.10), border = NA)
points(predictedData$x.GeoG[predictedData$z.OceR==-0.38]/1000,
predictedData$fit[predictedData$z.OceR==-0.38],
type="l",col=adjustcolor("red", alpha.f = 0.30),lwd=2)
points(geographicDistance.pair.No0$value/1000,
eDNAdistance.pair.mod.No0$value,
col=my_colours[findInterval(oceanResistance.pair.No0$value, seq(-0.38, 0.38, length.out = 100))],
pch=16,cex=0.8)
legend_image <- as.raster(matrix(rev(my_palette(100)), ncol=1))
rasterImage(legend_image, 330, 0.40, 340,0.6,xpd=T)
text(x=333, y = seq(0.4,0.6,l=5), labels = paste0("-  ",seq(-0.38,0.38,l=5)),xpd=T,pos = 4,cex=0.7)
dev.off()
# Let's subset the data to take only the -3 day data & match it up with the correct order of sites
particle3 <- particle[particle$day=="-2",]
particle3o <- particle3[match(fishAlpha$ID,particle3$site),]
# Lets run linear models to test for individual effects
summary(lm(fishAlpha$Richness~particle3o$mean_spread))
summary(lm(fishAlpha$Richness~particle3o$ave_dist))
summary(lm(fishAlpha$Richness~particle3o$area..km.))
summary(lm(fishAlpha$Richness~particle3o$mean_dist))
#joint model
summary(lm(fishAlpha$Richness~particle3o$mean_spread+
particle3o$ave_dist+
particle3o$area..km.+
particle3o$mean_dist))
m1 <- dbrda(vegdist(t(fishdatSite),method="jaccard",binary=TRUE)~particle3o$mean_spread+
particle3o$ave_dist+
particle3o$area..km.+
particle3o$mean_dist)
plot(m1)
anova(m1,permutations = 10000)
anova(m1,by="margin",permutations = 10000)
RsquareAdj(m1)
pdf("figures/FishRichnessToOceanography.pdf",width =9,height=7)
par(mfrow=c(2,2))
par(mar=c(4.1, 4.1, 2.1, 1.1))
plot(particle3o$mean_spread,
fishAlpha$Richness,
ylab="ASV Richness",
xlab="Average Spread of Particles from Mean (km)",
col=metadatSites$col[match(fishAlpha$ID,metadatSites$SiteID)],pch=16,cex=2.5)
plot(particle3o$mean_dist,
fishAlpha$Richness,
ylab="ASV Richness",
xlab="Distance of Particle Centroid from Sampling Site (km)",
col=metadatSites$col[match(fishAlpha$ID,metadatSites$SiteID)],pch=16,cex=2.5)
plot(particle3o$area..km.,
fishAlpha$Richness,
ylab="ASV Richness",
xlab="Surface Area of Particles (km)",
col=metadatSites$col[match(fishAlpha$ID,metadatSites$SiteID)],pch=16,cex=2.5)
plot(particle3o$ave_dist,
fishAlpha$Richness,
ylab="ASV Richness",
xlab="Average Distance of Particles From Sampling Point (km)",
col=metadatSites$col[match(fishAlpha$ID,metadatSites$SiteID)],pch=16,cex=2.5)
dev.off()
#####################################
####====0.0 Packages====####
library("vegan")
library("ade4")
library("RColorBrewer")
library("reshape2")
library("EcolUtils")
#Set the seed
set.seed("123456")
palette(brewer.pal(12, "Set3"))
####====0.1 Functions====####
## A couple of ways to calculate jaccard (the second assymetrically)
myjac = function (datamat) {
datamat = datamat>0
mj = apply(datamat, 2, function(x) {
apply(datamat, 2, function(y) {
return(sum(x&y)/sum(x|y))
})
})
return(1-mj)
}
myjac_mod = function (datamat) {
datamat = datamat>0
mj = apply(datamat, 2, function(x) {
apply(datamat, 2, function(y) {
return(sum(x&y)/sum(x))
})
})
return(1-mj)
}
####====1.0 Pull in Data ====####
#Fish first
fishAll <- read.csv("cleandata/Cleaned_Fish_wTAX.csv",row.names=1)
fishAssign <- fishAll[,70:86]
fishdat <- fishAll[,1:69]
#Pull out site information
sites <- unlist(lapply(strsplit(colnames(fishdat),"\\."), `[[`, 1))
#Get the metadata
metadat <- read.csv("metadata.csv")
metadatSites <- read.csv("metadata.site.out.csv",row.names=1)
#Make a dataset across sites with mean values
fishdatSite <- as.data.frame(matrix(ncol=length(unique(sites)),nrow=dim(fishdat[1])))
colnames(fishdatSite) <- unique(sites)
rownames(fishdatSite) <- rownames(fishdat)
for (column in colnames(fishdatSite)){
running <- fishdat[,sites==column]
fishdatSite[,colnames(fishdatSite)==column] <- rowSums(running)/3
}
## pull in distance measures
siteDist <- as.matrix(read.csv("distanceData/SiteDistanceMatrix.csv",row.names = 1))
oceanResistance <- as.matrix(read.csv("distanceData/OceanogrphicResistanceMatrix.csv",row.names = 1))
# pull the data in
particle <- read.csv("ParticleTracking/ParticleSpread.csv")
# make the colour index
SEasternCols <- colorRampPalette(c("#D55E00","#E69F00","#faf6c1"))
NorthernCols <-colorRampPalette(c("#003e60","#56B4E9"))
ElizCols <- colorRampPalette(c("#CC79A7","#762d55"))
WesternCols <- colorRampPalette(c("#009E73","#004935"))
AllCols <- c(SEasternCols(8),ElizCols(2),NorthernCols(4),WesternCols(2))
ColIndex <- data.frame("EcoIsland"=sort(unique(paste0(metadatSites$EcoRegion,"-",metadatSites$island))),
"Colour"=AllCols)
metadatSites$col <- ColIndex$Colour[match(paste0(metadatSites$EcoRegion,"-",metadatSites$island),ColIndex$EcoIsland)]
####====2.0 Taxonomy ====####
sum(table(fishAll$Assign.BestLevel))
table(fishAll$Assign.BestLevel)
table(fishAll$Assign.Assigment[fishAll$Assign.BestLevel=="Species"])
barplot(table(fishAll$Assign.Assigment[fishAll$Assign.BestLevel=="Genus"]))
####====3.0 Alpha Diversity ====####
# Set up a richness dataset
fishdatB <- fishdatSite
fishdatB[fishdatB>0] <- 1
fishAlpha <- data.frame("ID"=names(fishdatB),"Richness"= colSums(fishdatB))
## test for sig difference between ecoregions
#build the model
lm1 <- lm(fishAlpha$Richness~as.factor(metadatSites$EcoRegion[match(fishAlpha$ID,metadatSites$SiteID)]))
summary(lm1)
# are residuals norm distributed?
shapiro.test(residuals(lm1))
#any sig differences? (no)
TukeyHSD(aov(lm1))
#mean values
unlist(by(fishAlpha$Richness,as.factor(metadatSites$EcoRegion[match(fishAlpha$ID,metadatSites$SiteID)]),FUN=mean))
##Plots
##by island
pdf("figures/FishRichness.pdf",height = 5,width = 6)
par(mar=c(6.1, 4.1, 2.1, 2.1))
plot(as.numeric(as.factor(metadatSites$island[match(fishAlpha$ID,metadatSites$SiteID)])),fishAlpha$Richness,
col=metadatSites$col[match(fishAlpha$ID,metadatSites$SiteID)],
pch=16,
cex=2.5,
ylab="ASV Richness",
xlab="",
xaxt='n'
)
axis(1,at=1:12,labels=levels(as.factor(metadatSites$island[match(fishAlpha$ID,metadatSites$SiteID)])),cex=0.2,las=2)
dev.off()
#by ecoregion
pdf("figures/FishRichness.ecoregion.pdf",height = 5,width = 3)
par(mar=c(7.1, 2.1, 2.1, 5.1))
plot(as.numeric(as.factor(metadatSites$EcoRegion[match(fishAlpha$ID,metadatSites$SiteID)])),fishAlpha$Richness,
col=adjustcolor(metadatSites$col[match(fishAlpha$ID,metadatSites$SiteID)],alpha.f = 0.5),
pch=16,
cex=1.5,
ylab="ASV Richness",
xlab="",
xaxt='n',xlim=c(0,5),yaxt='n',
bty="n"
)
box(lwd=0.5)
points(1:4,unlist(by(fishAlpha$Richness,as.factor(metadatSites$EcoRegion[match(fishAlpha$ID,metadatSites$SiteID)]),FUN=mean)),
col=c(SEasternCols(3)[1],
ElizCols(3)[1],
NorthernCols(3)[1],
WesternCols(3)[1]),pch="-",cex=3)
axis(1,at=1:4,labels=levels(as.factor(metadatSites$EcoRegion[match(fishAlpha$ID,metadatSites$SiteID)])),cex=0.2,las=2,lwd=0.5)
axis(4,lwd=0.5)
dev.off()
####====4.0 Beta Diversity ====####
### What are the previously described ecoregions from
groups0 <- sapply(strsplit(colnames(fishdatSite),"\\."),"[",1)
#Groups 1 as ecoregions
groups1 <- metadatSites$EcoRegion[match(groups0,metadatSites$SiteID)]
#Groups 2 w/ RED as Northern
groups2 <- groups1
groups2[groups0=="RED"]<-"Western"
#ius the variance between ecoregions similar? -  lets run a PERMdisp
fishbetadisp <- betadisper(vegdist(t(fishdatSite), "jaccard",binary=TRUE),groups1)
#fishbetadisp <- betadisper(vegdist(t(fishdatSite), "bray"),groups1)
anova(fishbetadisp)
sink("statisticsReports/betadisp.txt")
TukeyHSD(fishbetadisp)
sink()
#Sig difference in multivariate homogeneity - probably due to different numbers of samples
#Is there a sig diff in PERMANOVA between ecoregions?
sink("statisticsReports/PERMANOVA.txt")
adonis2(vegdist(t(fishdatSite), "jaccard",binary=TRUE)~groups1,permutations = 1000)
## quite uneven samples so lets test individually
adonis.pair(vegdist(t(fishdatSite), "jaccard",binary=TRUE),as.factor(groups1),nper = 1000)
#adonis.pair(vegdist(t(fishdatSite), "bray"),as.factor(groups1),nper = 1000)
sink()
## Elizabeth bio region simply doesnt have enough observations....... here we run again with reps not averaged
adonis.pair(vegdist(t(fishdat), "jaccard",binary=TRUE),
as.factor(metadatSites$EcoRegion[match(sapply(strsplit(colnames(fishdat),"\\."),"[",1),metadatSites$SiteID)]),
nper = 1000)
# plots
pdf("figures/FishBetaDiv.pdf",height = 5,width = 6)
par(mar=c(2.1, 2.1, 2.1, 2.1))
nMDS <- metaMDS(vegdist(t(fishdat),method="jaccard",binary=TRUE),trymax=500)
#nMDS <- metaMDS(vegdist(t(fishdat),method="bray"),trymax=500)
plot(nMDS$points[,1],nMDS$points[,2],
pch=16,
cex=1.5,
col=metadatSites$col[match(sites,metadatSites$SiteID)],
main="",
ylab="",xlab="")
ordihull(nMDS,groups = sites,col = "grey71",draw = "polygon",lty=0)
points(nMDS$points[,1],nMDS$points[,2],pch=16,cex=1.5,
col=metadatSites$col[match(sites,metadatSites$SiteID)])
text(-0.8,-0.6,labels = paste0("Stress = ",round(nMDS$stress,2)))
dev.off()
## add in the text to see sites
par(mar=c(2.1, 2.1, 2.1, 2.1))
nMDS <- metaMDS(vegdist(t(fishdat),method="jaccard",binary=TRUE),trymax=500)
plot(nMDS$points[,1],nMDS$points[,2],
pch=16,
cex=1.5,
col=metadatSites$col[match(sites,metadatSites$SiteID)],
main="",
ylab="",xlab="")
ordihull(nMDS,groups = sites,col = "grey71",draw = "polygon",lty=0)
points(nMDS$points[,1],nMDS$points[,2],pch=16,cex=1.5,
col=metadatSites$col[match(sites,metadatSites$SiteID)])
text(nMDS$points[,1],nMDS$points[,2]+0.05,labels=colnames(fishdat),cex=0.3)
####====5.0 Linking to Oceanography ====####
## Can we link biodiversity patterns to particle release parameters?
# Let's subset the data to take only the -3 day data & match it up with the correct order of sites
particle3 <- particle[particle$day=="-2",]
particle3o <- particle3[match(fishAlpha$ID,particle3$site),]
# Lets run linear models to test for individual effects
summary(lm(fishAlpha$Richness~particle3o$mean_spread))
summary(lm(fishAlpha$Richness~particle3o$ave_dist))
summary(lm(fishAlpha$Richness~particle3o$area..km.))
summary(lm(fishAlpha$Richness~particle3o$mean_dist))
#joint model
summary(lm(fishAlpha$Richness~particle3o$mean_spread+
particle3o$ave_dist+
particle3o$area..km.+
particle3o$mean_dist))
# Now beta diversity with a distance based redundancy analysis
m1 <- dbrda(vegdist(t(fishdatSite),method="jaccard",binary=TRUE)~particle3o$mean_spread+
particle3o$ave_dist+
particle3o$area..km.+
particle3o$mean_dist)
plot(m1)
anova(m1,permutations = 10000)
anova(m1,by="margin",permutations = 10000)
RsquareAdj(m1)
# Let's start with alpha diversity
pdf("figures/FishRichnessToOceanography.pdf",width =9,height=7)
par(mfrow=c(2,2))
par(mar=c(4.1, 4.1, 2.1, 1.1))
plot(particle3o$mean_spread,
fishAlpha$Richness,
ylab="ASV Richness",
xlab="Average Spread of Particles from Mean (km)",
col=metadatSites$col[match(fishAlpha$ID,metadatSites$SiteID)],pch=16,cex=2.5)
plot(particle3o$mean_dist,
fishAlpha$Richness,
ylab="ASV Richness",
xlab="Distance of Particle Centroid from Sampling Site (km)",
col=metadatSites$col[match(fishAlpha$ID,metadatSites$SiteID)],pch=16,cex=2.5)
plot(particle3o$area..km.,
fishAlpha$Richness,
ylab="ASV Richness",
xlab="Surface Area of Particles (km)",
col=metadatSites$col[match(fishAlpha$ID,metadatSites$SiteID)],pch=16,cex=2.5)
plot(particle3o$ave_dist,
fishAlpha$Richness,
ylab="ASV Richness",
xlab="Average Distance of Particles From Sampling Point (km)",
col=metadatSites$col[match(fishAlpha$ID,metadatSites$SiteID)],pch=16,cex=2.5)
dev.off()
### Now beta dissimilarity
#first lets pull in the data and melt it into pairwise observations
geographicDistance.pair <- reshape2::melt(as.matrix(read.csv("distanceData/SiteDistanceMatrix.csv",row.names = 1)),varnames = c("Start","End"))
oceanResistance.pair <- reshape2::melt(as.matrix(read.csv("distanceData/OceanogrphicResistanceMatrix.csv",row.names = 1)),varnames = c("Start","End"))
geographicDistance.pair.No0 <- geographicDistance.pair[-which(geographicDistance.pair$value == 0),]
oceanResistance.pair.No0 <- oceanResistance.pair[-which(geographicDistance.pair$value == 0),]
eDNAdistance.pair.mod = reshape2::melt(myjac_mod(fishdatSite), varnames=c("Start","End"))
eDNAdistance.pair.mod.No0 <- eDNAdistance.pair.mod[-which(eDNAdistance.pair.mod$value == 0),]
#now lets build some models
model1 = lm (eDNAdistance.pair.mod.No0$value~geographicDistance.pair.No0$value)
model2 = lm (eDNAdistance.pair.mod.No0$value~oceanResistance.pair.No0$value)
model3 = lm (model1$residuals ~ oceanResistance.pair.No0$value)
model4 = lm (eDNAdistance.pair.mod.No0$value~geographicDistance.pair.No0$value + oceanResistance.pair.No0$value)
sink("statisticsReports/lmOceanGeo.txt")
summary(model1)
summary(model2)
summary(model3)
summary(model4)
sink()
install.packages("heplots")
library(heplots)
?etasq
etasq(model4)
etasq(model1)
etasq(model2)
etasq(model3)
etasq(model4)
summary(model4)
summary(model1)
summary(model2)
summary(model3)
summary(model4)
etasq(model4)
citation(heplots)
hist(oceanResistance.pair.No0$value)
hist(oceanResistance.pair.No0$value,breaks=100)
list.files(pattern=".*.csv","distanceData/pathPoints")
list.files(pattern=".*.csv","distanceData/pathPointsElNino/")
month <- list.files(pattern=".*.csv","distanceData/pathPointsElNino/")[1]
#month <- "pathPointsTable_Apr.csv"
monthText <- gsub(".csv","",gsub("pathPointsTable_","",month))
print(monthText)
modeldat <-read.csv(paste0("distanceData/pathPoints/pathPointsTable_",monthText,".csv"))
modeldat <-read.csv(paste0("distanceData/pathPointsElNino//pathPointsTable_",monthText,".csv"))
## 1 Calculate angle and magnitude of each lat lon point along the path
#angle
modeldat$resultantAngle <- unlist(mapply(vectorAngle,modeldat$UVEL,modeldat$VVEL))
#magnitude
modeldat$magnitudes <- unlist(mapply(vectorSum,modeldat$UVEL,modeldat$VVEL))
modeldat$journeyID <- paste(modeldat$Start,modeldat$End,sep="_")
journeyOutput <- data.frame("journeyID"=unique(paste(modeldat$Start,modeldat$End,sep="_")),"OceanographicResistance"=rep(0,length(unique(paste(modeldat$Start,modeldat$End,sep="_")))),"OceanographicResistanceSD"=rep(0,length(unique(paste(modeldat$Start,modeldat$End,sep="_")))))
for (journeyIndex in 1:length(journeyOutput$journeyID)){
# journeyIndex <- 8
loopJourney <- journeyOutput$journeyID[journeyIndex]
loopData <- modeldat[modeldat$journeyID==loopJourney,]
loopData$comparisonAngle <- NA
loopData$comparisonAngleDiff <- NA
loopData$comparisonAngleMetric <- NA
loopData$comparisonMetric <- NA
for (loopLocation in 1:length(loopData$Order)){
if(loopData$Order[loopLocation]==max(loopData$Order)){next()}
index <- match(loopData$Order[loopLocation],loopData$Order)
index2 <- match(loopData$Order[loopLocation+1],loopData$Order)
loopData$comparisonAngle[index] <- azimuth(loopData$lat[index],loopData$lon[index],loopData$lat[index2],loopData$lon[index2])
loopData$comparisonAngleDiff[index] <- angleCalc(loopData$comparisonAngle[index],loopData$resultantAngle[index])
loopData$comparisonAngleMetric[index] <- cosTrans(loopData$comparisonAngleDiff[index])
loopData$comparisonMetric[index] <- loopData$comparisonAngleMetric[index] * loopData$magnitudes[index]
}
journeyOutput$OceanographicResistance[journeyIndex] <-mean(loopData$comparisonMetric,na.rm = T)
journeyOutput$OceanographicResistanceSD[journeyIndex] <-sd(loopData$comparisonMetric,na.rm = T)
}
journeyOutput$start <- sapply(strsplit(journeyOutput$journeyID,split = "_"),'[', 1)
journeyOutput$end <- sapply(strsplit(journeyOutput$journeyID,split = "_"),'[', 2)
JourneyMatrix <- dcast(journeyOutput,start~end,value.var = "OceanographicResistance")
JourneyMatrix2 <- as.matrix(JourneyMatrix[,2:24])
rownames(JourneyMatrix2) <- JourneyMatrix$start
write.csv(JourneyMatrix2,paste0("distanceData/monthlyResistanceElNino/OceanogrphicResistanceMatrix_",monthText,".csv"))
write.csv(journeyOutput,paste0("distanceData/monthlyResistanceElNino/OceanogrphicResistancePairwise_",monthText,".csv"))
#month <- "pathPointsTable_Apr.csv"
monthText <- gsub(".csv","",gsub("pathPointsTable_","",month))
print(monthText)
modeldat <-read.csv(paste0("distanceData/pathPointsElNino//pathPointsTable_",monthText,".csv"))
View(modeldat)
## 1 Calculate angle and magnitude of each lat lon point along the path
#angle
modeldat$resultantAngle <- unlist(mapply(vectorAngle,modeldat$UVEL,modeldat$VVEL))
##Function 1 - calculate the resultant angle from a Northing and an Easting
vectorAngle <- function(Northing,Easting){
if(Northing == 0 & Easting == 0){return(0)}
Northing=Northing+0.0000001
Easting=Easting+0.0000001
resultant_angle <- atan2(sqrt(Northing^2),sqrt(Easting^2))
resultant_angle_degrees <- (180/pi) * resultant_angle
if(Northing>0 & Easting>0){return(90-resultant_angle_degrees)} else
if(Northing<0 & Easting>0){return(90+resultant_angle_degrees)} else
if(Northing<0 & Easting<0){return(270-resultant_angle_degrees)} else
if(Northing>0 & Easting<0){return(270+resultant_angle_degrees)}
}
#resultant_angle_degrees <- ifelse(resultant_angle_degrees < 0, 360 + resultant_angle_degrees, resultant_angle_degrees)
#return(resultant_angle_degrees)}
#testing
vectorAngle(5,5)
vectorAngle(-5,5)
vectorAngle(-5,-5)
vectorAngle(5,-5)
##Function 2 Calculate a resultant magnitude of the vector from a Northign and an Easting
vectorSum <- function(Northing,Easting){
if(Northing == 0 & Easting == 0){return(NA)}
resultantMagnitude <- sqrt(Northing^2+Easting^2)
return(resultantMagnitude)}
modeldat$magnitudes <- unlist(mapply(vectorSum,modeldat$UVEL,modeldat$VVEL))
##Function 3 Calculate a the angle (azimuth) between two geographic points with lat lon
azimuth <- function(lat1, lon1, lat2, lon2) {
# Convert decimal degrees to radians
lat1 <- lat1 * pi / 180
lon1 <- lon1 * pi / 180
lat2 <- lat2 * pi / 180
lon2 <- lon2 * pi / 180
# Calculate the difference in longitude
delta_lon <- lon2 - lon1
# Calculate the azimuth (bearing) using the Haversine formula
y <- sin(delta_lon) * cos(lat2)
x <- cos(lat1) * sin(lat2) - sin(lat1) * cos(lat2) * cos(delta_lon)
azimuth_rad <- atan2(y, x)
# Convert radians to degrees
azimuth_deg <- azimuth_rad * 180 / pi
# Make sure the result is in the range [0, 360)
if (azimuth_deg < 0) {
azimuth_deg <- azimuth_deg + 360
}
return(azimuth_deg)
}
#testing
azimuth(55.68517608483797, 12.57629649327822,55.66184699523609, 12.57955805920173)
##Function 4 Calculate the azimuth difference from angle A to angle B
angleCalc <- function(A,B){
input <- B - A
if (input > 0){
return(input)} else
if (input < 0) {
return(input+360)} else
if (input == 0){return(0)}
}
##Function 5 scale an azimuth angle into resistance with 1 being 0 degrees and -1 being 180 degrees
cosTrans <- function(input){
return(cos((input/360)*(2*pi)))
}
for (month in list.files(pattern=".*.csv","distanceData/pathPointsElNino/")){
#month <- "pathPointsTable_Apr.csv"
monthText <- gsub(".csv","",gsub("pathPointsTable_","",month))
print(monthText)
modeldat <-read.csv(paste0("distanceData/pathPointsElNino//pathPointsTable_",monthText,".csv"))
## 1 Calculate angle and magnitude of each lat lon point along the path
#angle
modeldat$resultantAngle <- unlist(mapply(vectorAngle,modeldat$UVEL,modeldat$VVEL))
#magnitude
modeldat$magnitudes <- unlist(mapply(vectorSum,modeldat$UVEL,modeldat$VVEL))
## 2 Create an output dataframe for each journey
modeldat$journeyID <- paste(modeldat$Start,modeldat$End,sep="_")
journeyOutput <- data.frame("journeyID"=unique(paste(modeldat$Start,modeldat$End,sep="_")),"OceanographicResistance"=rep(0,length(unique(paste(modeldat$Start,modeldat$End,sep="_")))),"OceanographicResistanceSD"=rep(0,length(unique(paste(modeldat$Start,modeldat$End,sep="_")))))
## 3 loop over each journey
for (journeyIndex in 1:length(journeyOutput$journeyID)){
# journeyIndex <- 8
loopJourney <- journeyOutput$journeyID[journeyIndex]
loopData <- modeldat[modeldat$journeyID==loopJourney,]
loopData$comparisonAngle <- NA
loopData$comparisonAngleDiff <- NA
loopData$comparisonAngleMetric <- NA
loopData$comparisonMetric <- NA
for (loopLocation in 1:length(loopData$Order)){
if(loopData$Order[loopLocation]==max(loopData$Order)){next()}
index <- match(loopData$Order[loopLocation],loopData$Order)
index2 <- match(loopData$Order[loopLocation+1],loopData$Order)
loopData$comparisonAngle[index] <- azimuth(loopData$lat[index],loopData$lon[index],loopData$lat[index2],loopData$lon[index2])
loopData$comparisonAngleDiff[index] <- angleCalc(loopData$comparisonAngle[index],loopData$resultantAngle[index])
loopData$comparisonAngleMetric[index] <- cosTrans(loopData$comparisonAngleDiff[index])
loopData$comparisonMetric[index] <- loopData$comparisonAngleMetric[index] * loopData$magnitudes[index]
}
journeyOutput$OceanographicResistance[journeyIndex] <-mean(loopData$comparisonMetric,na.rm = T)
journeyOutput$OceanographicResistanceSD[journeyIndex] <-sd(loopData$comparisonMetric,na.rm = T)
}
#Now lets transform and output the data
journeyOutput$start <- sapply(strsplit(journeyOutput$journeyID,split = "_"),'[', 1)
journeyOutput$end <- sapply(strsplit(journeyOutput$journeyID,split = "_"),'[', 2)
JourneyMatrix <- dcast(journeyOutput,start~end,value.var = "OceanographicResistance")
JourneyMatrix2 <- as.matrix(JourneyMatrix[,2:24])
rownames(JourneyMatrix2) <- JourneyMatrix$start
write.csv(JourneyMatrix2,paste0("distanceData/monthlyResistanceElNino/OceanogrphicResistanceMatrix_",monthText,".csv"))
write.csv(journeyOutput,paste0("distanceData/monthlyResistanceElNino/OceanogrphicResistancePairwise_",monthText,".csv"))
}
par(mfrow=c(4,3))
ResistanceMonths <- as.list(c())
par(mfrow=c(4,3))
ResistanceMonths <- as.list(c())
ResistanceMonths <- as.list(c())
for (month in list.files(pattern="OceanogrphicResistanceMatrix.*","distanceData/monthlyResistanceElNino/")){
oceanResistance <- as.dist(as.matrix(read.csv(paste0("distanceData/monthlyResistance/",month),row.names = 1)))
nMDS.resist <- metaMDS(oceanResistance,trymax=500)
plot(nMDS.resist,type = "t",main="Resistance")
ResistanceMonths <- append(ResistanceMonths,list(as.matrix(oceanResistance)))
}
list.files(pattern="OceanogrphicResistanceMatrix.*","distanceData/monthlyResistanceElNino/")
par(mfrow=c(4,3))
ResistanceMonths <- as.list(c())
for (month in list.files(pattern="OceanogrphicResistanceMatrix.*","distanceData/monthlyResistanceElNino/")){
oceanResistance <- as.dist(as.matrix(read.csv(paste0("distanceData/monthlyResistanceElNino//",month),row.names = 1)))
nMDS.resist <- metaMDS(oceanResistance,trymax=500)
plot(nMDS.resist,type = "t",main="Resistance")
ResistanceMonths <- append(ResistanceMonths,list(as.matrix(oceanResistance)))
}
par(mfrow=c(4,3))
ResistanceMonths <- as.list(c())
for (month in list.files(pattern="OceanogrphicResistanceMatrix.*","distanceData/monthlyResistance/")){
oceanResistance <- as.dist(as.matrix(read.csv(paste0("distanceData/monthlyResistance/",month),row.names = 1)))
nMDS.resist <- metaMDS(oceanResistance,trymax=500)
plot(nMDS.resist,type = "t",main="Resistance")
ResistanceMonths <- append(ResistanceMonths,list(as.matrix(oceanResistance)))
}
