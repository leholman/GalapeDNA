model6.subset = lm (eDNAdistance.pair.mod.No0$value[index]~geographicDistance.pair.No0$value[index] + tempDist.pair.No0$value[index] + oceanResistance.pair.No0$value[index])
summary(model6.subset)
#Now we output the models
sink("statisticsReports/lmOceanGeo.txt")
summary(model1)
summary(model2)
summary(model3)
summary(model4)
summary(model5)
summary(model6)
etasq(model6)
### Great now let's plot the final model for both temp and oceanography
## Oceanographic resistance with a loess smooth
#Predict using loess across top & bottom 20% percent of data
prop.loess <- 0.20
z.OceR <- oceanResistance.pair.No0$value
y.eDNA <- eDNAdistance.pair.mod.No0$value[z.OceR>quantile(z.OceR,1-prop.loess)]
x.GeoG <- geographicDistance.pair.No0$value[z.OceR>quantile(z.OceR,1-prop.loess)]
modelPredict.H = loess(y.eDNA~x.GeoG,span = 1)
y.eDNA <- eDNAdistance.pair.mod.No0$value[z.OceR<quantile(z.OceR,prop.loess)]
x.GeoG <- geographicDistance.pair.No0$value[z.OceR<quantile(z.OceR,prop.loess)]
modelPredict.L = loess(y.eDNA~x.GeoG,span = 1)
predictedData.H <- cbind(data.frame("x.GeoG"=seq(0,320000,1000)),predict(modelPredict.H,data.frame("x.GeoG"=seq(0,320000,1000)),se = TRUE))
predictedData.H$lwr <- predictedData.H$fit-1.96*predictedData.H$se.fit
predictedData.H$upr <- predictedData.H$fit+1.96*predictedData.H$se.fit
predictedData.L <- cbind(data.frame("x.GeoG"=seq(0,320000,1000)),predict(modelPredict.L,data.frame("x.GeoG"=seq(0,320000,1000)),se = TRUE))
predictedData.L$lwr <- predictedData.L$fit-1.96*predictedData.L$se.fit
predictedData.L$upr <- predictedData.L$fit+1.96*predictedData.L$se.fit
#RED = negative BLUE = positive
my_palette <- colorRampPalette(colors = c("red", "white","blue"))
my_colours <- my_palette(100)
pdf("figures/DistDecayV2.pdf",width = 7,height = 5)
par(mar=c(4.1, 4.1, 2.1, 6.1))
plot(geographicDistance.pair.No0$value/1000,
eDNAdistance.pair.mod.No0$value,
pch=16, cex=0.95,
xlab="Geographic Distance (km)",
ylab="Jaccard Dissimilarity")
polygon(x = c(predictedData.L$x.GeoG,
rev(predictedData.L$x.GeoG))[!is.na(predictedData.L$lwr)]/1000,
y = c(predictedData.L$lwr,
rev(predictedData.L$upr))[!is.na(predictedData.L$lwr)],
col =  adjustcolor("red", alpha.f = 0.10), border = NA)
points(predictedData.L$x.GeoG[!is.na(predictedData.L$fit)]/1000,
predictedData.L$fit[!is.na(predictedData.L$fit)],
type="l",col=adjustcolor("red", alpha.f = 0.30),lwd=2)
polygon(x = c(predictedData.H$x.GeoG,
rev(predictedData.H$x.GeoG))[!is.na(predictedData.H$lwr)]/1000,
y = c(predictedData.H$lwr,
rev(predictedData.H$upr))[!is.na(predictedData.H$lwr)],
col =  adjustcolor("blue", alpha.f = 0.10), border = NA)
points(predictedData.H$x.GeoG[!is.na(predictedData.H$fit)]/1000,
predictedData.H$fit[!is.na(predictedData.H$fit)],
type="l",col=adjustcolor("blue", alpha.f = 0.30),lwd=2)
points(geographicDistance.pair.No0$value/1000,
eDNAdistance.pair.mod.No0$value,
col=my_colours[findInterval(oceanResistance.pair.No0$value, seq(-0.38, 0.38, length.out = 100))],
pch=16,cex=0.8)
points(predictedData.H$x.GeoG[!is.na(predictedData.H$fit)]/1000,
predictedData.H$fit[!is.na(predictedData.H$fit)],
type="l",col=adjustcolor("blue", alpha.f = 0.70),lwd=2)
points(predictedData.L$x.GeoG[!is.na(predictedData.L$fit)]/1000,
predictedData.L$fit[!is.na(predictedData.L$fit)],
type="l",col=adjustcolor("red", alpha.f = 0.70),lwd=2)
legend_image <- as.raster(matrix(rev(my_palette(100)), ncol=1))
rasterImage(legend_image, 330, 0.40, 340,0.6,xpd=T)
text(x=333, y = seq(0.4,0.6,l=5), labels = paste0("-  ",seq(-0.38,0.38,l=5)),xpd=T,pos = 4,cex=0.7)
dev.off()
pdf("figures/DistDecayV2.pdf",width = 7,height = 5)
par(mar=c(4.1, 4.1, 2.1, 6.1))
plot(geographicDistance.pair.No0$value/1000,
eDNAdistance.pair.mod.No0$value,
pch=16, cex=0.95,
xlab="Geographic Distance (km)",
ylab="Jaccard Dissimilarity")
polygon(x = c(predictedData.L$x.GeoG,
rev(predictedData.L$x.GeoG))[!is.na(predictedData.L$lwr)]/1000,
y = c(predictedData.L$lwr,
rev(predictedData.L$upr))[!is.na(predictedData.L$lwr)],
col =  adjustcolor("red", alpha.f = 0.30), border = NA)
points(predictedData.L$x.GeoG[!is.na(predictedData.L$fit)]/1000,
predictedData.L$fit[!is.na(predictedData.L$fit)],
type="l",col=adjustcolor("red", alpha.f = 0.30),lwd=2)
polygon(x = c(predictedData.H$x.GeoG,
rev(predictedData.H$x.GeoG))[!is.na(predictedData.H$lwr)]/1000,
y = c(predictedData.H$lwr,
rev(predictedData.H$upr))[!is.na(predictedData.H$lwr)],
col =  adjustcolor("blue", alpha.f = 0.30), border = NA)
points(predictedData.H$x.GeoG[!is.na(predictedData.H$fit)]/1000,
predictedData.H$fit[!is.na(predictedData.H$fit)],
type="l",col=adjustcolor("blue", alpha.f = 0.30),lwd=2)
points(geographicDistance.pair.No0$value/1000,
eDNAdistance.pair.mod.No0$value,
col=my_colours[findInterval(oceanResistance.pair.No0$value, seq(-0.38, 0.38, length.out = 100))],
pch=16,cex=0.8)
points(predictedData.H$x.GeoG[!is.na(predictedData.H$fit)]/1000,
predictedData.H$fit[!is.na(predictedData.H$fit)],
type="l",col=adjustcolor("blue", alpha.f = 0.70),lwd=2)
points(predictedData.L$x.GeoG[!is.na(predictedData.L$fit)]/1000,
predictedData.L$fit[!is.na(predictedData.L$fit)],
type="l",col=adjustcolor("red", alpha.f = 0.70),lwd=2)
legend_image <- as.raster(matrix(rev(my_palette(100)), ncol=1))
rasterImage(legend_image, 330, 0.40, 340,0.6,xpd=T)
text(x=333, y = seq(0.4,0.6,l=5), labels = paste0("-  ",seq(-0.38,0.38,l=5)),xpd=T,pos = 4,cex=0.7)
dev.off()
pdf("figures/DistDecayV2.pdf",width = 7,height = 5)
par(mar=c(4.1, 4.1, 2.1, 6.1))
plot(geographicDistance.pair.No0$value/1000,
eDNAdistance.pair.mod.No0$value,
pch=16, cex=0.95,
xlab="Geographic Distance (km)",
ylab="Jaccard Dissimilarity")
polygon(x = c(predictedData.L$x.GeoG,
rev(predictedData.L$x.GeoG))[!is.na(predictedData.L$lwr)]/1000,
y = c(predictedData.L$lwr,
rev(predictedData.L$upr))[!is.na(predictedData.L$lwr)],
col =  adjustcolor("red", alpha.f = 0.25), border = NA)
points(predictedData.L$x.GeoG[!is.na(predictedData.L$fit)]/1000,
predictedData.L$fit[!is.na(predictedData.L$fit)],
type="l",col=adjustcolor("red", alpha.f = 0.30),lwd=2)
polygon(x = c(predictedData.H$x.GeoG,
rev(predictedData.H$x.GeoG))[!is.na(predictedData.H$lwr)]/1000,
y = c(predictedData.H$lwr,
rev(predictedData.H$upr))[!is.na(predictedData.H$lwr)],
col =  adjustcolor("blue", alpha.f = 0.25), border = NA)
points(predictedData.H$x.GeoG[!is.na(predictedData.H$fit)]/1000,
predictedData.H$fit[!is.na(predictedData.H$fit)],
type="l",col=adjustcolor("blue", alpha.f = 0.30),lwd=2)
points(geographicDistance.pair.No0$value/1000,
eDNAdistance.pair.mod.No0$value,
col=my_colours[findInterval(oceanResistance.pair.No0$value, seq(-0.38, 0.38, length.out = 100))],
pch=16,cex=0.8)
points(predictedData.H$x.GeoG[!is.na(predictedData.H$fit)]/1000,
predictedData.H$fit[!is.na(predictedData.H$fit)],
type="l",col=adjustcolor("blue", alpha.f = 0.50),lwd=2)
points(predictedData.L$x.GeoG[!is.na(predictedData.L$fit)]/1000,
predictedData.L$fit[!is.na(predictedData.L$fit)],
type="l",col=adjustcolor("red", alpha.f = 0.50),lwd=2)
legend_image <- as.raster(matrix(rev(my_palette(100)), ncol=1))
rasterImage(legend_image, 330, 0.40, 340,0.6,xpd=T)
text(x=333, y = seq(0.4,0.6,l=5), labels = paste0("-  ",seq(-0.38,0.38,l=5)),xpd=T,pos = 4,cex=0.7)
dev.off()
####====0.0 Packages====####
library(tidyverse)
library(dplyr)
library(maditr)
library(vegan)
library(breakaway)
#### METABARCODING ####
euk <- read.csv("cleanedData/clean.EUK.raw.names.csv.csv",row.names = 1)
dev.off()
# Load packages
library(ncdf4)
library(raster)
library(sp)
library(sf)
##Lots of lines hashed out here, original file is 10GB+ so only subset used ;)
#load GEBCO_2022 netcdf downloaded on 110822 - https://www.gebco.net/data_and_products/gridded_bathymetry_data/
#gebco <- raster("mapBuilding/GEBCO_2022_sub_ice_topo.nc")
# Create extent (our map area)
#galap.ex <- extent(-92, -89, -1.55, 0.68)
# Create a crop of the bathymetric data
#gebco.crop <- crop(gebco, galap.ex)
#Save file
#saveRDS(gebco.crop,file="mapBuilding/GalapBathy.rds")
gebco.crop <- readRDS("mapBuilding/GalapBathy.rds")
#load lat lon
metadata <- read.csv(file = "metadata.site.out.csv")
#function to calculate break points for colours from https://www.benjaminbell.co.uk/2019/08/bathymetric-maps-in-r-colour-palettes.html
## x = raster, b1 & b2 = number of divisions for each sequence, r1 & r2 = rounding value
colbr <- function(x, b1=50, b2=50, r1=-2, r2=-2) {
# Min/max values of the raster (x)
mi <- cellStats(x, stat="min")-100
ma <- cellStats(x, stat="max")+100
# Create sequences, but only use unique numbers
s1 <- unique(round(seq(mi, 0, 0-mi/b1),r1))
s2 <- unique(round(seq(0, ma, ma/b2),r2))
# Combine sequence for our break points, removing duplicate 0
s3 <- c(s1, s2[-1])
# Create a list with the outputs
# [[1]] = length of the first sequence minus 1 (water)
# [[2]] = length of the second sequence minus 1 (land)
# [[3]] = The break points
x <- list(length(s1)-1, length(s2)-1, s3)
}
galap.br <- colbr(gebco.crop,b2=1)
galap.br[[3]][43] <- 10
# Get country shapefiles
eq <- getData("GADM", country="ECU", level=0)
# Colour palette
blue.col <- colorRampPalette(c("darkblue", "lightblue"))
#First plot
pdf(width = 8,height=6.5,file="mapBuilding/test1.pdf")
plot(gebco.crop, col=c(blue.col(galap.br[[1]]+1), grey.colors(0)), breaks=galap.br[[3]],axes = FALSE,box=F,legend=F)
plot(eq, add=TRUE,border=NA,col="grey34")
#-92, -89, -1.55, 0.68)
axis(1,
at=pretty(c(-92, -89)),
labels = parse(text=degreeLabelsEW(pretty(c(-92, -89)))))
axis(2,
at=pretty(c(-1.55, 0.68)),
labels = parse(text=degreeLabelsNS(pretty(c(-1.55, 0.68)))),las=TRUE)
#plot(eq, add=TRUE)
#points(metadata$lon2,metadata$lat2,pch=16, col='black',cex=1)
#points(metadata$lon2,metadata$lat2,pch=16, col='white',cex=0.5)
dev.off()
#Adding in colours per island
cols <- c("#80B1D3","#FFFFB3","#FFFFB3","#80B1D3","#FB8072","#BEBADA","#FFED6F","#CCEBC5",
"#80B1D3","#8DD3C7","#FDB462","#FFFFB3","#B3DE69","gray85","#FFFFB3","#80B1D3",
"#FCCDE5","#80B1D3","#80B1D3","#CCEBC5","#BC80BD","#8DD3C7","#80B1D3")
##Make a colour index so each ecoregion-island has a different colour
SEasternCols <- colorRampPalette(c("#D55E00","#E69F00","#faf6c1"))
#NorthernCols <-colorRampPalette(c("#0072B2","#56B4E9"))
NorthernCols <-colorRampPalette(c("#003e60","#56B4E9"))
ElizCols <- colorRampPalette(c("#CC79A7","#762d55"))
WesternCols <- colorRampPalette(c("#009E73","#004935"))
AllCols <- c(SEasternCols(8),ElizCols(2),NorthernCols(4),WesternCols(2))
ColIndex <- data.frame("EcoIsland"=sort(unique(paste0(metadata$EcoRegion,"-",metadata$island))),
"Colour"=AllCols)
ColIndex$Colour[match(paste0(metadata$EcoRegion,"-",metadata$island),ColIndex$EcoIsland)]
test <- st_read("mapBuilding/Marine_Bioregions_Edgaretal2004_Moity2019_utm/Marine_Bioregions_Edgaretal2004_Moity2019_utm.shp")
plot(test)
1+1
ecoregions <- st_read("mapBuilding/Marine_Bioregions_Edgaretal2004_Moity2019_utm/Marine_Bioregions_Edgaretal2004_Moity2019_utm.shp")
ecoregions$BIOREGION
ecoregions$geometry[1]
plot(gebco.crop, col=c(blue.col(galap.br[[1]]+1), grey.colors(0)), breaks=galap.br[[3]],axes = FALSE,box=F,legend=F)
plot(eq, add=TRUE,border=NA,col="grey34")
plot(ecoregions$geometry[1],col="darkblue",add=TRUE)
pdf("mapBuilding/test.pdf",width = 8,height=6.35,)
plot(gebco.crop)
plot(ecoregions$geometry[1],col="darkblue",add=TRUE)
plot(eq, add=TRUE,border=NA,col="grey34")
dev.off()
datasetsharks <- dataset[dataset$Assign.Category=="G"&dataset$B.class=="Chondrichthyes",69:86]
plot(ecoregions$geometry[1],col="darkblue",add=TRUE)
dev.off()
plot(ecoregions$geometry[1],col="darkblue",add=TRUE)
ecoregions$geometry[1]
ecoregions <- st_read("mapBuilding/Marine_Bioregions_Edgaretal2004_Moity2019_utm/Marine_Bioregions_Edgaretal2004_Moity2019_utm.sbx")
st_drivers()
ecoregions <- st_read("mapBuilding/Marine_Bioregions_Edgaretal2004_Moity2019_utm/Marine_Bioregions_Edgaretal2004_Moity2019_utm.kmz")
ecoregions <- st_read("mapBuilding/Marine_Bioregions_Edgaretal2004_Moity2019_utm/Marine_Bioregions_Edgaretal2004_Moity2019_utm.prj")
ecoregions <- st_read("mapBuilding/Marine_Bioregions_Edgaretal2004_Moity2019_utm/Marine_Bioregions_Edgaretal2004_Moity2019_utm.shp")
plot(ecoregions$geometry)
1+1
?st_read
ecoregions2 <- as_Spatial(ecoregions)
plot(eq, add=TRUE,border=NA,col="grey34")
plot(ecoregions2)
library(tmap)
pdf("mapBuilding/test.pdf",width = 8,height=6.35,)
plot(ecoregions2)
#plot(ecoregions$geometry,col="darkblue",add=TRUE)
plot(eq, add=TRUE,border=NA,col="grey34")
dev.off()
axis(1,
at=pretty(c(-92, -89)),
labels = parse(text=degreeLabelsEW(pretty(c(-92, -89)))),lwd = 0, lwd.ticks = 1)
axis(2,
at=pretty(c(-1.55, 0.68)),
labels = parse(text=degreeLabelsNS(pretty(c(-1.55, 0.68)))),las=TRUE,lwd = 0, lwd.ticks = 1)
plot(eq,border=NA,col="grey34")
plot(ecoregions2,col="red",add=TRUE)
#plot(ecoregions$geometry,col="darkblue",add=TRUE)
plot(eq, add=TRUE,border=NA,col="grey34")
dev.off()
pdf("mapBuilding/test.pdf",width = 8,height=6.35,)
plot(eq,border=NA,col="grey34")
plot(ecoregions2,col="red",add=TRUE)
#plot(ecoregions$geometry,col="darkblue",add=TRUE)
plot(eq, add=TRUE,border=NA,col="grey34")
dev.off()
pdf("mapBuilding/test.pdf",width = 8,height=6.35,)
plot(eq,border=NA,col="grey34")
plot(st_geometry(ecoregions), col ="red", border = "white")
#plot(ecoregions$geometry,col="darkblue",add=TRUE)
plot(eq, add=TRUE,border=NA,col="grey34")
dev.off()
st_crs(eq)
st_crs(ecoregions)
ecoregions2 <- st_transform(ecoregions, "+proj=longlat +datum=WGS84")
pdf("mapBuilding/test.pdf",width = 8,height=6.35,)
plot(eq,border=NA,col="grey34")
plot(st_geometry(ecoregions2), col ="red", border = "white")
#plot(ecoregions$geometry,col="darkblue",add=TRUE)
plot(eq, add=TRUE,border=NA,col="grey34")
dev.off()
plot(gebco.crop, col=c(blue.col(galap.br[[1]]+1), grey.colors(0)), breaks=galap.br[[3]],axes = FALSE,box=F,legend=F)
plot(eq,border=NA,col="grey34")
dev.off()
pdf("mapBuilding/test.pdf",width = 8,height=6.35,)
plot(gebco.crop, col=c(blue.col(galap.br[[1]]+1), grey.colors(0)), breaks=galap.br[[3]],axes = FALSE,box=F,legend=F)
plot(eq,border=NA,col="grey34")
plot(st_geometry(ecoregions2), col ="red", border = "white")
#plot(ecoregions$geometry,col="darkblue",add=TRUE)
plot(eq, add=TRUE,border=NA,col="grey34")
dev.off()
pdf("mapBuilding/test.pdf",width = 8,height=6.35,)
plot(gebco.crop, col=c(blue.col(galap.br[[1]]+1), grey.colors(0)), breaks=galap.br[[3]],axes = FALSE,box=F,legend=F)
plot(st_geometry(ecoregions2), col ="red", border = "white", add=TRUE)
#plot(ecoregions$geometry,col="darkblue",add=TRUE)
plot(eq, add=TRUE,border=NA,col="grey34")
dev.off()
pdf("mapBuilding/test.pdf",width = 8,height=6.35,)
plot(gebco.crop, col=c(blue.col(galap.br[[1]]+1), grey.colors(0)), breaks=galap.br[[3]],axes = FALSE,box=F,legend=F)
plot(st_geometry(ecoregions2), col =c("red","blue","green","purple"), border = "white", add=TRUE)
#plot(ecoregions$geometry,col="darkblue",add=TRUE)
plot(eq, add=TRUE,border=NA,col="grey34")
dev.off()
pdf("mapBuilding/test.pdf",width = 8,height=6.35,)
plot(gebco.crop, col=c(blue.col(galap.br[[1]]+1), grey.colors(0)), breaks=galap.br[[3]],axes = FALSE,box=F,legend=F)
plot(st_geometry(ecoregions2), col =c("red","blue","green","purple"), border = "white", add=TRUE)
plot(eq, add=TRUE,border=NA,col="grey34")
axis(1,
at=pretty(c(-92, -89)),
labels = parse(text=degreeLabelsEW(pretty(c(-92, -89)))),lwd = 0, lwd.ticks = 1)
axis(2,
at=pretty(c(-1.55, 0.68)),
labels = parse(text=degreeLabelsNS(pretty(c(-1.55, 0.68)))),las=TRUE,lwd = 0, lwd.ticks = 1)
dev.off()
pdf("mapBuilding/test.pdf",width = 8,height=6.35,)
plot(gebco.crop, col=c(blue.col(galap.br[[1]]+1), grey.colors(0)), breaks=galap.br[[3]],axes = FALSE,box=F,legend=F)
plot(st_geometry(ecoregions2), col =c("red","blue","green","purple"), add=TRUE)
plot(eq, add=TRUE,border=NA,col="grey34")
axis(1,
at=pretty(c(-92, -89)),
labels = parse(text=degreeLabelsEW(pretty(c(-92, -89)))),lwd = 0, lwd.ticks = 1)
axis(2,
at=pretty(c(-1.55, 0.68)),
labels = parse(text=degreeLabelsNS(pretty(c(-1.55, 0.68)))),las=TRUE,lwd = 0, lwd.ticks = 1)
dev.off()
ecoregions2
ecoregions2$BIOREGION
pdf("mapBuilding/test.pdf",width = 8,height=6.35,)
plot(gebco.crop, col=c(blue.col(galap.br[[1]]+1), grey.colors(0)), breaks=galap.br[[3]],axes = FALSE,box=F,legend=F)
plot(st_geometry(ecoregions2), col =IslandPalette, add=TRUE)
plot(eq, add=TRUE,border=NA,col="grey34")
axis(1,
at=pretty(c(-92, -89)),
labels = parse(text=degreeLabelsEW(pretty(c(-92, -89)))),lwd = 0, lwd.ticks = 1)
axis(2,
at=pretty(c(-1.55, 0.68)),
labels = parse(text=degreeLabelsNS(pretty(c(-1.55, 0.68)))),las=TRUE,lwd = 0, lwd.ticks = 1)
dev.off()
pdf("mapBuilding/test.pdf",width = 8,height=6.35,)
plot(gebco.crop, col=c(blue.col(galap.br[[1]]+1), grey.colors(0)), breaks=galap.br[[3]],axes = FALSE,box=F,legend=F)
plot(st_geometry(ecoregions2), col =c("#762d55","#E69F00","#004935","#003e60"), add=TRUE)
plot(eq, add=TRUE,border=NA,col="grey34")
axis(1,
at=pretty(c(-92, -89)),
labels = parse(text=degreeLabelsEW(pretty(c(-92, -89)))),lwd = 0, lwd.ticks = 1)
axis(2,
at=pretty(c(-1.55, 0.68)),
labels = parse(text=degreeLabelsNS(pretty(c(-1.55, 0.68)))),las=TRUE,lwd = 0, lwd.ticks = 1)
dev.off()
pdf("mapBuilding/test.pdf",width = 8,height=6.35,)
plot(gebco.crop, col=c(blue.col(galap.br[[1]]+1), grey.colors(0)), breaks=galap.br[[3]],axes = FALSE,box=F,legend=F)
plot(st_geometry(ecoregions2), col =c("#762d55","#E69F00","#004935","#003e60"),boarder="white" ,add=TRUE)
plot(eq, add=TRUE,border=NA,col="grey34")
axis(1,
at=pretty(c(-92, -89)),
labels = parse(text=degreeLabelsEW(pretty(c(-92, -89)))),lwd = 0, lwd.ticks = 1)
axis(2,
at=pretty(c(-1.55, 0.68)),
labels = parse(text=degreeLabelsNS(pretty(c(-1.55, 0.68)))),las=TRUE,lwd = 0, lwd.ticks = 1)
dev.off()
pdf("mapBuilding/test.pdf",width = 8,height=6.35,)
plot(gebco.crop, col=c(blue.col(galap.br[[1]]+1), grey.colors(0)), breaks=galap.br[[3]],axes = FALSE,box=F,legend=F)
plot(st_geometry(ecoregions2), col =c("#762d55","#E69F00","#004935","#003e60"),border = "white" ,add=TRUE)
plot(eq, add=TRUE,border=NA,col="grey34")
axis(1,
at=pretty(c(-92, -89)),
labels = parse(text=degreeLabelsEW(pretty(c(-92, -89)))),lwd = 0, lwd.ticks = 1)
axis(2,
at=pretty(c(-1.55, 0.68)),
labels = parse(text=degreeLabelsNS(pretty(c(-1.55, 0.68)))),las=TRUE,lwd = 0, lwd.ticks = 1)
dev.off()
View(ecoregions2)
pdf("mapBuilding/test.pdf",width = 8,height=6.35,)
plot(gebco.crop, col="white",axes = FALSE,box=F,legend=F)
plot(st_geometry(ecoregions2), col =c("#762d55","#E69F00","#004935","#003e60"),border = "white" ,add=TRUE)
plot(eq, add=TRUE,border=NA,col="grey34")
axis(1,
at=pretty(c(-92, -89)),
labels = parse(text=degreeLabelsEW(pretty(c(-92, -89)))),lwd = 0, lwd.ticks = 1)
axis(2,
at=pretty(c(-1.55, 0.68)),
labels = parse(text=degreeLabelsNS(pretty(c(-1.55, 0.68)))),las=TRUE,lwd = 0, lwd.ticks = 1)
dev.off()
SEasternCols <- colorRampPalette(c("#D55E00","#E69F00","#faf6c1"))
NorthernCols <-colorRampPalette(c("#003e60","#56B4E9"))
ElizCols <- colorRampPalette(c("#CC79A7","#762d55"))
WesternCols <- colorRampPalette(c("#009E73","#004935"))
pdf("mapBuilding/test.pdf",width = 8,height=6.35,)
plot(gebco.crop, col="white",axes = FALSE,box=F,legend=F)
plot(st_geometry(ecoregions2), col =c("#762d55","#E69F00","#004935","#003e60"),border = "white" ,add=TRUE)
plot(eq, add=TRUE,border=NA,col="grey34")
axis(1,
at=pretty(c(-92, -89)),
labels = parse(text=degreeLabelsEW(pretty(c(-92, -89)))),lwd = 0, lwd.ticks = 1)
axis(2,
at=pretty(c(-1.55, 0.68)),
labels = parse(text=degreeLabelsNS(pretty(c(-1.55, 0.68)))),las=TRUE,lwd = 0, lwd.ticks = 1)
dev.off()
svg("mapBuilding/test.svg",width = 8,height=6.35,)
plot(gebco.crop, col="white",axes = FALSE,box=F,legend=F)
plot(st_geometry(ecoregions2), col =c("#762d55","#E69F00","#004935","#003e60"),border = "white" ,add=TRUE)
plot(eq, add=TRUE,border=NA,col="grey34")
axis(1,
at=pretty(c(-92, -89)),
labels = parse(text=degreeLabelsEW(pretty(c(-92, -89)))),lwd = 0, lwd.ticks = 1)
axis(2,
at=pretty(c(-1.55, 0.68)),
labels = parse(text=degreeLabelsNS(pretty(c(-1.55, 0.68)))),las=TRUE,lwd = 0, lwd.ticks = 1)
dev.off()
datasetsharks <- dataset[dataset$Assign.Category=="G"&dataset$B.class=="Chondrichthyes",69:86]
pdf("mapBuilding/test.pdf",width = 8,height=6.35,)
plot(gebco.crop, col="white",axes = FALSE,box=F,legend=F)
plot(st_geometry(ecoregions2), col =c("#762d55","#E69F00","#004935","#003e60"),border = "white" ,add=TRUE)
plot(eq, add=TRUE,border=NA,col="grey34")
axis(1,
at=pretty(c(-92, -89)),
labels = parse(text=degreeLabelsEW(pretty(c(-92, -89)))),lwd = 0, lwd.ticks = 1)
axis(2,
at=pretty(c(-1.55, 0.68)),
labels = parse(text=degreeLabelsNS(pretty(c(-1.55, 0.68)))),las=TRUE,lwd = 0, lwd.ticks = 1)
dev.off()
pdf("mapBuilding/test.pdf",width = 16,height=12.7,)
plot(gebco.crop, col="white",axes = FALSE,box=F,legend=F)
plot(st_geometry(ecoregions2), col =c("#762d55","#E69F00","#004935","#003e60"),border = "white" ,add=TRUE)
plot(eq, add=TRUE,border=NA,col="grey34")
axis(1,
at=pretty(c(-92, -89)),
labels = parse(text=degreeLabelsEW(pretty(c(-92, -89)))),lwd = 0, lwd.ticks = 1)
axis(2,
at=pretty(c(-1.55, 0.68)),
labels = parse(text=degreeLabelsNS(pretty(c(-1.55, 0.68)))),las=TRUE,lwd = 0, lwd.ticks = 1)
dev.off()
pdf("mapBuilding/test.pdf",width = 16,height=12.7,)
par(mar=cc(10.1, 8.1, 8.1, 4.1))
plot(gebco.crop, col="white",axes = FALSE,box=F,legend=F)
plot(st_geometry(ecoregions2), col =c("#762d55","#E69F00","#004935","#003e60"),border = "white" ,add=TRUE)
plot(eq, add=TRUE,border=NA,col="grey34")
axis(1,
at=pretty(c(-92, -89)),
labels = parse(text=degreeLabelsEW(pretty(c(-92, -89)))),lwd = 0, lwd.ticks = 1)
axis(2,
at=pretty(c(-1.55, 0.68)),
labels = parse(text=degreeLabelsNS(pretty(c(-1.55, 0.68)))),las=TRUE,lwd = 0, lwd.ticks = 1)
dev.off()
pdf("mapBuilding/test.pdf",width = 16,height=12.7,)
par(mar=c(10.1, 8.1, 8.1, 4.1))
plot(gebco.crop, col="white",axes = FALSE,box=F,legend=F)
plot(st_geometry(ecoregions2), col =c("#762d55","#E69F00","#004935","#003e60"),border = "white" ,add=TRUE)
plot(eq, add=TRUE,border=NA,col="grey34")
axis(1,
at=pretty(c(-92, -89)),
labels = parse(text=degreeLabelsEW(pretty(c(-92, -89)))),lwd = 0, lwd.ticks = 1)
axis(2,
at=pretty(c(-1.55, 0.68)),
labels = parse(text=degreeLabelsNS(pretty(c(-1.55, 0.68)))),las=TRUE,lwd = 0, lwd.ticks = 1)
dev.off()
pdf("mapBuilding/test.pdf",width = 8,height=6.35,)
par(mar=c(10.1, 8.1, 8.1, 4.1))
plot(gebco.crop, col="white",axes = FALSE,box=F,legend=F)
plot(st_geometry(ecoregions2), col =c("#762d55","#E69F00","#004935","#003e60"),border = "white" ,add=TRUE)
plot(eq, add=TRUE,border=NA,col="grey34")
axis(1,
at=pretty(c(-92, -89)),
labels = parse(text=degreeLabelsEW(pretty(c(-92, -89)))),lwd = 0, lwd.ticks = 1)
axis(2,
at=pretty(c(-1.55, 0.68)),
labels = parse(text=degreeLabelsNS(pretty(c(-1.55, 0.68)))),las=TRUE,lwd = 0, lwd.ticks = 1)
dev.off()
pdf("mapBuilding/test.pdf",width = 8,height=6.35,)
plot(gebco.crop, col="white",axes = FALSE,box=F,legend=F)
plot(st_geometry(ecoregions2), col =c("#762d55","#E69F00","#004935","#003e60"),border = "white" ,add=TRUE)
plot(eq, add=TRUE,border=NA,col="grey34")
axis(1,
at=pretty(c(-92, -89)),
labels = parse(text=degreeLabelsEW(pretty(c(-92, -89)))),lwd = 0, lwd.ticks = 1)
axis(2,
at=pretty(c(-1.55, 0.68)),
labels = parse(text=degreeLabelsNS(pretty(c(-1.55, 0.68)))),las=TRUE,lwd = 0, lwd.ticks = 1)
dev.off()
masterTAX <- read.csv("taxonomy/MasterAssignments.csv")
#Here we are first reassembling the datasets so they have the ASV seq as the row name
U_fishdat <- read.csv("cleandata/Cleaned.MiFish_U.dada2.lulu.csv",row.names = 1)
U_masterTAX <-masterTAX[substr(masterTAX$Index,1,1)=="U",]
U_ASVs <- U_masterTAX$Sequence[match(row.names(U_fishdat),U_masterTAX$ID)]
rownames(U_fishdat) <- U_ASVs
E_fishdat <- read.csv("cleandata/Cleaned.MiFish_E.dada2.lulu.csv",row.names = 1)
E_masterTAX <-masterTAX[substr(masterTAX$Index,1,1)=="E",]
E_ASVs <- E_masterTAX$Sequence[match(row.names(E_fishdat),E_masterTAX$ID)]
rownames(E_fishdat) <- E_ASVs
View(U_fishdat)
View(U_masterTAX)
View(U_fishdat)
#Here we are first reassembling the datasets so they have the ASV seq as the row name
U_fishdat <- read.csv("cleandata/Cleaned.MiFish_U.dada2.lulu.csv",row.names = 1)
U_masterTAX <-masterTAX[substr(masterTAX$Index,1,1)=="U",]
View(U_fishdat)
View(U_masterTAX)
U_ASVs <- U_masterTAX$Sequence[match(row.names(U_fishdat),U_masterTAX$ID)]
write.csv("GBIFupload/MiFishUGBIF.csv",cbind(U_fishdat,U_masterTAX,U_ASVs))
cbind(U_fishdat,U_masterTAX,U_ASVs)
write.csv(cbind(U_fishdat,U_masterTAX,U_ASVs),"GBIFupload/MiFishUGBIF.csv")
E_fishdat <- read.csv("cleandata/Cleaned.MiFish_E.dada2.lulu.csv",row.names = 1)
E_masterTAX <-masterTAX[substr(masterTAX$Index,1,1)=="E",]
E_ASVs <- E_masterTAX$Sequence[match(row.names(E_fishdat),E_masterTAX$ID)]
write.csv(cbind(E_fishdat,E_masterTAX,E_ASVs),"GBIFupload/MiFishE.GBIF.csv")
