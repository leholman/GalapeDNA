metadat <- read.csv("metadata.csv")
metadatSites <- read.csv("metadata.site.out.csv",row.names=1)
#Make a dataset across sites with mean values
fishdatSite <- as.data.frame(matrix(ncol=length(unique(sites)),nrow=dim(fishdat[1])))
colnames(fishdatSite) <- unique(sites)
rownames(fishdatSite) <- rownames(fishdat)
for (column in colnames(fishdatSite)){
running <- fishdat[,sites==column]
fishdatSite[,colnames(fishdatSite)==column] <- rowSums(running)/3
}
## pull in distance measures
siteDist <- as.matrix(read.csv("distanceData/SiteDistanceMatrix.csv",row.names = 1))
oceanResistance <- as.matrix(read.csv("distanceData/OceanogrphicResistanceMatrix.csv",row.names = 1))
tempDist <- as.matrix(read.csv("distanceData/tempDistance.csv",row.names = 1))
# pull the data in
particle <- read.csv("ParticleTracking/ParticleSpread.csv")
# make the colour index
cols <- c("#80B1D3","#FFFFB3","#FFFFB3","#80B1D3","#FB8072","#BEBADA","#FFED6F","#CCEBC5",
"#80B1D3","#8DD3C7","#FDB462","#FFFFB3","#B3DE69","gray85","#FFFFB3","#80B1D3",
"#FCCDE5","#80B1D3","#80B1D3","#CCEBC5","#BC80BD","#8DD3C7","#80B1D3")
SEasternCols <- colorRampPalette(c("#D55E00","#E69F00","#faf6c1"))
NorthernCols <-colorRampPalette(c("#003e60","#56B4E9"))
ElizCols <- colorRampPalette(c("#CC79A7","#762d55"))
WesternCols <- colorRampPalette(c("#009E73","#004935"))
AllCols <- c(SEasternCols(8),ElizCols(2),NorthernCols(4),WesternCols(2))
ColIndex <- data.frame("EcoIsland"=sort(unique(paste0(metadatSites$EcoRegion,"-",metadatSites$island))),
"Colour"=AllCols)
metadatSites$col <- ColIndex$Colour[match(paste0(metadatSites$EcoRegion,"-",metadatSites$island),ColIndex$EcoIsland)]
####====2.0 Taxonomy ====####
sum(table(fishAll$Assign.BestLevel))
table(fishAll$Assign.BestLevel)
table(fishAll$Assign.Assigment[fishAll$Assign.BestLevel=="Species"])
barplot(table(fishAll$Assign.Assigment[fishAll$Assign.BestLevel=="Genus"]))
####====3.0 Alpha Diversity ====####
# Set up a richness dataset
fishdatB <- fishdatSite
fishdatB[fishdatB>0] <- 1
fishAlpha <- data.frame("ID"=names(fishdatB),"Richness"= colSums(fishdatB))
## test for sig difference between ecoregions
#build the model
lm1 <- lm(fishAlpha$Richness~as.factor(metadatSites$EcoRegion[match(fishAlpha$ID,metadatSites$SiteID)]))
summary(lm1)
# are residuals norm distributed?
shapiro.test(residuals(lm1))
#any sig differences? (no)
TukeyHSD(aov(lm1))
#mean values
unlist(by(fishAlpha$Richness,as.factor(metadatSites$EcoRegion[match(fishAlpha$ID,metadatSites$SiteID)]),FUN=mean))
##Plots
##by island
pdf("figures/FishRichness.pdf",height = 5,width = 6)
par(mar=c(6.1, 4.1, 2.1, 2.1))
plot(as.numeric(as.factor(metadatSites$island[match(fishAlpha$ID,metadatSites$SiteID)])),fishAlpha$Richness,
col=metadatSites$col[match(fishAlpha$ID,metadatSites$SiteID)],
pch=16,
cex=2.5,
ylab="ASV Richness",
xlab="",
xaxt='n'
)
axis(1,at=1:12,labels=levels(as.factor(metadatSites$island[match(fishAlpha$ID,metadatSites$SiteID)])),cex=0.2,las=2)
dev.off()
#by ecoregion
pdf("figures/FishRichness.ecoregion.pdf",height = 5,width = 3)
par(mar=c(7.1, 2.1, 2.1, 5.1))
plot(as.numeric(as.factor(metadatSites$EcoRegion[match(fishAlpha$ID,metadatSites$SiteID)])),fishAlpha$Richness,
col=adjustcolor(metadatSites$col[match(fishAlpha$ID,metadatSites$SiteID)],alpha.f = 0.5),
pch=16,
cex=1.5,
ylab="ASV Richness",
xlab="",
xaxt='n',xlim=c(0,5),yaxt='n',
bty="n"
)
box(lwd=0.5)
points(1:4,unlist(by(fishAlpha$Richness,as.factor(metadatSites$EcoRegion[match(fishAlpha$ID,metadatSites$SiteID)]),FUN=mean)),
col=c(SEasternCols(3)[1],
ElizCols(3)[1],
NorthernCols(3)[1],
WesternCols(3)[1]),pch="-",cex=3)
#axis(1,at=1:4,labels=levels(as.factor(metadatSites$EcoRegion[match(fishAlpha$ID,metadatSites$SiteID)])),cex=0.2,las=2,lwd=0.5)
axis(1,at=1:4,labels=rep("",4),cex=0.2,las=2,lwd=0.5)
axis(4,lwd=0.5)
dev.off()
####====4.0 Beta Diversity ====####
### What are the previously described ecoregions from
groups0 <- sapply(strsplit(colnames(fishdatSite),"\\."),"[",1)
#Groups 1 as ecoregions
groups1 <- metadatSites$EcoRegion[match(groups0,metadatSites$SiteID)]
#Groups 2 w/ RED as Northern
groups2 <- groups1
groups2[groups0=="RED"]<-"Western"
#ius the variance between ecoregions similar? -  lets run a PERMdisp
fishbetadisp <- betadisper(vegdist(t(fishdatSite), "jaccard",binary=TRUE),groups1)
#fishbetadisp <- betadisper(vegdist(t(fishdatSite), "bray"),groups1)
anova(fishbetadisp)
sink("statisticsReports/betadisp.txt")
TukeyHSD(fishbetadisp)
sink()
#Sig difference in multivariate homogeneity - probably due to different numbers of samples
#Is there a sig diff in PERMANOVA between ecoregions?
sink("statisticsReports/PERMANOVA.txt")
adonis2(vegdist(t(fishdatSite), "jaccard",binary=TRUE)~groups1,permutations = 10000)
## quite uneven samples so lets test individually
adonis.pair(vegdist(t(fishdatSite), "jaccard",binary=TRUE),as.factor(groups1),nper = 10000)
#adonis.pair(vegdist(t(fishdatSite), "bray"),as.factor(groups1),nper = 1000)
sink()
## Elizabeth bio region simply doesnt have enough observations....... here we run again with reps not averaged
adonis.pair(vegdist(t(fishdat), "jaccard",binary=TRUE),
as.factor(metadatSites$EcoRegion[match(sapply(strsplit(colnames(fishdat),"\\."),"[",1),metadatSites$SiteID)]),
nper = 10000)
# plots
pdf("figures/FishBetaDiv.pdf",height = 5,width = 6)
par(mar=c(2.1, 2.1, 2.1, 2.1))
nMDS <- metaMDS(vegdist(t(fishdat),method="jaccard",binary=TRUE),trymax=500)
#nMDS <- metaMDS(vegdist(t(fishdat),method="bray"),trymax=500)
plot(nMDS$points[,1],nMDS$points[,2],
pch=16,
cex=1.5,
col=metadatSites$col[match(sites,metadatSites$SiteID)],
#col=cols[match(sites,metadatSites$SiteID)],
main="",
ylab="",xlab="")
ordihull(nMDS,groups = sites,col = "grey71",draw = "polygon",lty=0)
points(nMDS$points[,1],nMDS$points[,2],pch=16,cex=1.5,
col=metadatSites$col[match(sites,metadatSites$SiteID)])
#col=cols[match(sites,metadatSites$SiteID)])
text(-0.8,-0.6,labels = paste0("Stress = ",round(nMDS$stress,2)))
dev.off()
## add in the text to see sites
par(mar=c(2.1, 2.1, 2.1, 2.1))
nMDS <- metaMDS(vegdist(t(fishdat),method="jaccard",binary=TRUE),trymax=500)
plot(nMDS$points[,1],nMDS$points[,2],
pch=16,
cex=1.5,
col=metadatSites$col[match(sites,metadatSites$SiteID)],
main="",
ylab="",xlab="")
ordihull(nMDS,groups = sites,col = "grey71",draw = "polygon",lty=0)
points(nMDS$points[,1],nMDS$points[,2],pch=16,cex=1.5,
col=metadatSites$col[match(sites,metadatSites$SiteID)])
text(nMDS$points[,1],nMDS$points[,2]+0.05,labels=colnames(fishdat),cex=0.3)
####====5.0 Linking to Oceanography ====####
## Can we link biodiversity patterns to particle release parameters?
# Let's subset the data to take only the -3 day (changed to -2 - 48 hours) data & match it up with the correct order of sites
particle3 <- particle[particle$day=="-2",]
particle3o <- particle3[match(fishAlpha$ID,particle3$site),]
# Lets run linear models to test for individual effects
summary(lm(fishAlpha$Richness~particle3o$mean_spread))
summary(lm(fishAlpha$Richness~particle3o$ave_dist))
summary(lm(fishAlpha$Richness~particle3o$area..km.))
summary(lm(fishAlpha$Richness~particle3o$mean_dist))
#joint model
summary(lm(fishAlpha$Richness~particle3o$mean_spread+
particle3o$ave_dist+
particle3o$area..km.+
particle3o$mean_dist))
# Now beta diversity with a distance based redundancy analysis
m1 <- dbrda(vegdist(t(fishdatSite),method="jaccard",binary=TRUE)~particle3o$mean_spread+
particle3o$ave_dist+
particle3o$area..km.+
particle3o$mean_dist)
plot(m1)
anova(m1,permutations = 10000)
anova(m1,by="margin",permutations = 10000)
RsquareAdj(m1)
# Let's start with alpha diversity
pdf("figures/FishRichnessToOceanography.pdf",width =9,height=7)
par(mfrow=c(2,2))
par(mar=c(4.1, 4.1, 2.1, 1.1))
plot(particle3o$mean_spread,
fishAlpha$Richness,
ylab="ASV Richness",
xlab="Average Spread of Particles from Mean (km)",
col=metadatSites$col[match(fishAlpha$ID,metadatSites$SiteID)],pch=16,cex=2.5)
#col=cols,pch=16,cex=2.5)
plot(particle3o$mean_dist,
fishAlpha$Richness,
ylab="ASV Richness",
xlab="Distance of Particle Centroid from Sampling Site (km)",
col=metadatSites$col[match(fishAlpha$ID,metadatSites$SiteID)],pch=16,cex=2.5)
#col=cols,pch=16,cex=2.5)
plot(particle3o$area..km.,
fishAlpha$Richness,
ylab="ASV Richness",
xlab="Surface Area of Particles (km)",
col=metadatSites$col[match(fishAlpha$ID,metadatSites$SiteID)],pch=16,cex=2.5)
#col=cols,pch=16,cex=2.5)
plot(particle3o$ave_dist,
fishAlpha$Richness,
ylab="ASV Richness",
xlab="Average Distance of Particles From Sampling Point (km)",
col=metadatSites$col[match(fishAlpha$ID,metadatSites$SiteID)],pch=16,cex=2.5)
#col=cols,pch=16,cex=2.5)
dev.off()
### Now beta dissimilarity
#first lets pull in the data and melt it into pairwise observations
geographicDistance.pair <- reshape2::melt(as.matrix(read.csv("distanceData/SiteDistanceMatrix.csv",row.names = 1)),varnames = c("Start","End"))
oceanResistance.pair <- reshape2::melt(as.matrix(read.csv("distanceData/OceanogrphicResistanceMatrix.csv",row.names = 1)),varnames = c("Start","End"))
geographicDistance.pair.No0 <- geographicDistance.pair[-which(geographicDistance.pair$value == 0),]
oceanResistance.pair.No0 <- oceanResistance.pair[-which(geographicDistance.pair$value == 0),]
eDNAdistance.pair.mod = reshape2::melt(myjac_mod(fishdatSite), varnames=c("Start","End"))
eDNAdistance.pair.mod.No0 <- eDNAdistance.pair.mod[-which(eDNAdistance.pair.mod$value == 0),]
tempDist.pair <- reshape2::melt(as.matrix(read.csv("distanceData/tempDistance.csv",row.names = 1)),varnames = c("Start","End"))
tempDist.pair.No0 <- tempDist.pair[-which(eDNAdistance.pair.mod$value == 0),]
#now lets build some models
model1 = lm (eDNAdistance.pair.mod.No0$value~geographicDistance.pair.No0$value)
model2 = lm (eDNAdistance.pair.mod.No0$value~oceanResistance.pair.No0$value)
model3 = lm (model1$residuals ~ oceanResistance.pair.No0$value)
model4 = lm (eDNAdistance.pair.mod.No0$value~geographicDistance.pair.No0$value + oceanResistance.pair.No0$value)
model5 = lm (eDNAdistance.pair.mod.No0$value~geographicDistance.pair.No0$value + tempDist.pair.No0$value)
model6 = lm (eDNAdistance.pair.mod.No0$value~geographicDistance.pair.No0$value + tempDist.pair.No0$value+ oceanResistance.pair.No0$value)
# A little exploration of subsetting the data - I havent gone any further with this
index <- geographicDistance.pair.No0$value < 100000
index <- geographicDistance.pair.No0$value > 100000 & geographicDistance.pair.No0$value < 200000
index <- geographicDistance.pair.No0$value > 200000
model6.subset = lm (eDNAdistance.pair.mod.No0$value[index]~geographicDistance.pair.No0$value[index] + tempDist.pair.No0$value[index] + oceanResistance.pair.No0$value[index])
summary(model6.subset)
#Now we output the models
sink("statisticsReports/lmOceanGeo.txt")
summary(model1)
summary(model2)
summary(model3)
summary(model4)
summary(model5)
summary(model6)
etasq(model6)
prop.loess <- 0.20
z.OceR <- oceanResistance.pair.No0$value
y.eDNA <- eDNAdistance.pair.mod.No0$value[z.OceR>quantile(z.OceR,1-prop.loess)]
x.GeoG <- geographicDistance.pair.No0$value[z.OceR>quantile(z.OceR,1-prop.loess)]
modelPredict.H = loess(y.eDNA~x.GeoG,span = 1)
y.eDNA <- eDNAdistance.pair.mod.No0$value[z.OceR<quantile(z.OceR,prop.loess)]
x.GeoG <- geographicDistance.pair.No0$value[z.OceR<quantile(z.OceR,prop.loess)]
modelPredict.L = loess(y.eDNA~x.GeoG,span = 1)
predictedData.H <- cbind(data.frame("x.GeoG"=seq(0,320000,1000)),predict(modelPredict.H,data.frame("x.GeoG"=seq(0,320000,1000)),se = TRUE))
predictedData.H$lwr <- predictedData.H$fit-1.96*predictedData.H$se.fit
predictedData.H$upr <- predictedData.H$fit+1.96*predictedData.H$se.fit
predictedData.L <- cbind(data.frame("x.GeoG"=seq(0,320000,1000)),predict(modelPredict.L,data.frame("x.GeoG"=seq(0,320000,1000)),se = TRUE))
predictedData.L$lwr <- predictedData.L$fit-1.96*predictedData.L$se.fit
predictedData.L$upr <- predictedData.L$fit+1.96*predictedData.L$se.fit
#RED = negative BLUE = positive
my_palette <- colorRampPalette(colors = c("red", "white","blue"))
my_colours <- my_palette(100)
pdf("figures/DistDecayV2.pdf",width = 7,height = 5)
par(mar=c(4.1, 4.1, 2.1, 6.1))
plot(geographicDistance.pair.No0$value/1000,
eDNAdistance.pair.mod.No0$value,
pch=16, cex=0.95,
xlab="Geographic Distance (km)",
ylab="Jaccard Dissimilarity")
polygon(x = c(predictedData.L$x.GeoG,
rev(predictedData.L$x.GeoG))[!is.na(predictedData.L$lwr)]/1000,
y = c(predictedData.L$lwr,
rev(predictedData.L$upr))[!is.na(predictedData.L$lwr)],
col =  adjustcolor("red", alpha.f = 0.25), border = NA)
points(predictedData.L$x.GeoG[!is.na(predictedData.L$fit)]/1000,
predictedData.L$fit[!is.na(predictedData.L$fit)],
type="l",col=adjustcolor("red", alpha.f = 0.30),lwd=2)
polygon(x = c(predictedData.H$x.GeoG,
rev(predictedData.H$x.GeoG))[!is.na(predictedData.H$lwr)]/1000,
y = c(predictedData.H$lwr,
rev(predictedData.H$upr))[!is.na(predictedData.H$lwr)],
col =  adjustcolor("blue", alpha.f = 0.25), border = NA)
points(predictedData.H$x.GeoG[!is.na(predictedData.H$fit)]/1000,
predictedData.H$fit[!is.na(predictedData.H$fit)],
type="l",col=adjustcolor("blue", alpha.f = 0.30),lwd=2)
points(geographicDistance.pair.No0$value/1000,
eDNAdistance.pair.mod.No0$value,
col=my_colours[findInterval(oceanResistance.pair.No0$value, seq(-0.38, 0.38, length.out = 100))],
pch=16,cex=0.8)
points(predictedData.H$x.GeoG[!is.na(predictedData.H$fit)]/1000,
predictedData.H$fit[!is.na(predictedData.H$fit)],
type="l",col=adjustcolor("blue", alpha.f = 0.50),lwd=2)
points(predictedData.L$x.GeoG[!is.na(predictedData.L$fit)]/1000,
predictedData.L$fit[!is.na(predictedData.L$fit)],
type="l",col=adjustcolor("red", alpha.f = 0.50),lwd=2)
legend_image <- as.raster(matrix(rev(my_palette(100)), ncol=1))
rasterImage(legend_image, 330, 0.40, 340,0.6,xpd=T)
text(x=333, y = seq(0.4,0.6,l=5), labels = paste0("-  ",seq(-0.38,0.38,l=5)),xpd=T,pos = 4,cex=0.7)
dev.off()
## Temperature maybe also with a smooth?
#Predict using loess across top & bottom 25% percent of data
prop.loess <- 0.25
z.temp <- tempDist.pair.No0$value
y.eDNA <- eDNAdistance.pair.mod.No0$value[z.temp>quantile(z.temp,1-prop.loess)]
x.GeoG <- geographicDistance.pair.No0$value[z.temp>quantile(z.temp,1-prop.loess)]
modelPredict.H = loess(y.eDNA~x.GeoG,span = 1)
y.eDNA <- eDNAdistance.pair.mod.No0$value[z.temp<quantile(z.temp,prop.loess)]
x.GeoG <- geographicDistance.pair.No0$value[z.temp<quantile(z.temp,prop.loess)]
modelPredict.L = loess(y.eDNA~x.GeoG,span = 1)
predictedData.H <- cbind(data.frame("x.GeoG"=seq(0,320000,1000)),predict(modelPredict.H,data.frame("x.GeoG"=seq(0,320000,1000)),se = TRUE))
predictedData.H$lwr <- predictedData.H$fit-1.96*predictedData.H$se.fit
predictedData.H$upr <- predictedData.H$fit+1.96*predictedData.H$se.fit
predictedData.L <- cbind(data.frame("x.GeoG"=seq(0,320000,1000)),predict(modelPredict.L,data.frame("x.GeoG"=seq(0,320000,1000)),se = TRUE))
predictedData.L$lwr <- predictedData.L$fit-1.96*predictedData.L$se.fit
predictedData.L$upr <- predictedData.L$fit+1.96*predictedData.L$se.fit
#RED = negative BLUE = positive
my_palette <- colorRampPalette(colors = c("blue", "white","red"))
my_colours_temp <- my_palette(100)
pdf("figures/DistDecayV2.temp.pdf",width = 7,height = 5)
par(mar=c(4.1, 4.1, 2.1, 6.1))
plot(geographicDistance.pair.No0$value/1000,
eDNAdistance.pair.mod.No0$value,
pch=16, cex=0.95,
xlab="Geographic Distance (km)",
ylab="Jaccard Dissimilarity")
polygon(x = c(predictedData.L$x.GeoG,
rev(predictedData.L$x.GeoG))[!is.na(predictedData.L$lwr)]/1000,
y = c(predictedData.L$lwr,
rev(predictedData.L$upr))[!is.na(predictedData.L$lwr)],
col =  adjustcolor("blue", alpha.f = 0.25), border = NA)
points(predictedData.L$x.GeoG[!is.na(predictedData.L$fit)]/1000,
predictedData.L$fit[!is.na(predictedData.L$fit)],
type="l",col=adjustcolor("blue", alpha.f = 0.30),lwd=2)
polygon(x = c(predictedData.H$x.GeoG,
rev(predictedData.H$x.GeoG))[!is.na(predictedData.H$lwr)]/1000,
y = c(predictedData.H$lwr,
rev(predictedData.H$upr))[!is.na(predictedData.H$lwr)],
col =  adjustcolor("red", alpha.f = 0.25), border = NA)
points(predictedData.H$x.GeoG[!is.na(predictedData.H$fit)]/1000,
predictedData.H$fit[!is.na(predictedData.H$fit)],
type="l",col=adjustcolor("red", alpha.f = 0.30),lwd=2)
points(geographicDistance.pair.No0$value/1000,
eDNAdistance.pair.mod.No0$value,
col=my_colours_temp[findInterval(tempDist.pair.No0$value, seq(min(tempDist.pair.No0$value), max(tempDist.pair.No0$value), length.out = 100))],
pch=16,cex=0.8)
#[findInterval(tempDist.pair.No0$value, seq(min(tempDist.pair.No0$value), max(tempDist.pair.No0$value), length.out = 100))]
legend_image <- as.raster(matrix(rev(my_palette(100)), ncol=1))
rasterImage(legend_image, 330, 0.40, 340,0.6,xpd=T)
text(x=333, y = seq(0.4,0.6,l=5), labels = paste0("-  ",seq(-5.128,5.128,l=5)),xpd=T,pos = 4,cex=0.7)
dev.off()
for (month in list.files(pattern=".*.csv","distanceData/pathPointsElNino/")){
#month <- "pathPointsTable_Apr.csv"
monthText <- gsub(".csv","",gsub("pathPointsTable_","",month))
print(monthText)
modeldat <-read.csv(paste0("distanceData/pathPointsElNino//pathPointsTable_",monthText,".csv"))
## 1 Calculate angle and magnitude of each lat lon point along the path
#angle
modeldat$resultantAngle <- unlist(mapply(vectorAngle,modeldat$UVEL,modeldat$VVEL))
#magnitude
modeldat$magnitudes <- unlist(mapply(vectorSum,modeldat$UVEL,modeldat$VVEL))
## 2 Create an output dataframe for each journey
modeldat$journeyID <- paste(modeldat$Start,modeldat$End,sep="_")
journeyOutput <- data.frame("journeyID"=unique(paste(modeldat$Start,modeldat$End,sep="_")),"OceanographicResistance"=rep(0,length(unique(paste(modeldat$Start,modeldat$End,sep="_")))),"OceanographicResistanceSD"=rep(0,length(unique(paste(modeldat$Start,modeldat$End,sep="_")))))
## 3 loop over each journey
for (journeyIndex in 1:length(journeyOutput$journeyID)){
# journeyIndex <- 8
loopJourney <- journeyOutput$journeyID[journeyIndex]
loopData <- modeldat[modeldat$journeyID==loopJourney,]
loopData$comparisonAngle <- NA
loopData$comparisonAngleDiff <- NA
loopData$comparisonAngleMetric <- NA
loopData$comparisonMetric <- NA
for (loopLocation in 1:length(loopData$Order)){
if(loopData$Order[loopLocation]==max(loopData$Order)){next()}
index <- match(loopData$Order[loopLocation],loopData$Order)
index2 <- match(loopData$Order[loopLocation+1],loopData$Order)
loopData$comparisonAngle[index] <- azimuth(loopData$lat[index],loopData$lon[index],loopData$lat[index2],loopData$lon[index2])
loopData$comparisonAngleDiff[index] <- angleCalc(loopData$comparisonAngle[index],loopData$resultantAngle[index])
loopData$comparisonAngleMetric[index] <- cosTrans(loopData$comparisonAngleDiff[index])
loopData$comparisonMetric[index] <- loopData$comparisonAngleMetric[index] * loopData$magnitudes[index]
}
journeyOutput$OceanographicResistance[journeyIndex] <-mean(loopData$comparisonMetric,na.rm = T)
journeyOutput$OceanographicResistanceSD[journeyIndex] <-sd(loopData$comparisonMetric,na.rm = T)
}
#Now lets transform and output the data
journeyOutput$start <- sapply(strsplit(journeyOutput$journeyID,split = "_"),'[', 1)
journeyOutput$end <- sapply(strsplit(journeyOutput$journeyID,split = "_"),'[', 2)
JourneyMatrix <- dcast(journeyOutput,start~end,value.var = "OceanographicResistance")
JourneyMatrix2 <- as.matrix(JourneyMatrix[,2:24])
rownames(JourneyMatrix2) <- JourneyMatrix$start
write.csv(JourneyMatrix2,paste0("distanceData/monthlyResistanceElNino/OceanogrphicResistanceMatrix_",monthText,".csv"))
write.csv(journeyOutput,paste0("distanceData/monthlyResistanceElNino/OceanogrphicResistancePairwise_",monthText,".csv"))
}
par(mfrow=c(4,3))
ResistanceMonths <- as.list(c())
for (month in list.files(pattern="OceanogrphicResistanceMatrix.*","distanceData/monthlyResistance/")){
oceanResistance <- as.dist(as.matrix(read.csv(paste0("distanceData/monthlyResistance/",month),row.names = 1)))
nMDS.resist <- metaMDS(oceanResistance,trymax=500)
plot(nMDS.resist,type = "t",main="Resistance")
ResistanceMonths <- append(ResistanceMonths,list(as.matrix(oceanResistance)))
}
library(vegan)
for (month in list.files(pattern="OceanogrphicResistanceMatrix.*","distanceData/monthlyResistance/")){
oceanResistance <- as.dist(as.matrix(read.csv(paste0("distanceData/monthlyResistance/",month),row.names = 1)))
nMDS.resist <- metaMDS(oceanResistance,trymax=500)
plot(nMDS.resist,type = "t",main="Resistance")
ResistanceMonths <- append(ResistanceMonths,list(as.matrix(oceanResistance)))
}
warnings()
list.files(pattern="OceanogrphicResistanceMatrix.*","distanceData/monthlyResistance/")
par(mfrow=c(4,3))
ResistanceMonths <- as.list(c())
for (month in list.files(pattern="OceanogrphicResistanceMatrix.*","distanceData/monthlyResistance/")){
oceanResistance <- as.dist(as.matrix(read.csv(paste0("distanceData/monthlyResistance/",month),row.names = 1)))
nMDS.resist <- metaMDS(oceanResistance,trymax=500)
plot(nMDS.resist,type = "t",main="Resistance")
ResistanceMonths <- append(ResistanceMonths,list(as.matrix(oceanResistance)))
}
par(mfrow=c(4,3))
ResistanceMonths <- as.list(c())
for (month in list.files(pattern="OceanogrphicResistanceMatrix.*","distanceData/monthlyResistanceElNino/")){
oceanResistance <- as.dist(as.matrix(read.csv(paste0("distanceData/monthlyResistanceElNino/",month),row.names = 1)))
nMDS.resist <- metaMDS(oceanResistance,trymax=500)
plot(nMDS.resist,type = "t",main="Resistance")
ResistanceMonths <- append(ResistanceMonths,list(as.matrix(oceanResistance)))
}
<- read.csv("ParticleTracking/AlexData071222/sites_in_range_named.csv")
drift.days <- read.csv("ParticleTracking/AlexData071222/sites_in_range_named.csv")
View(drift.days)
drift.days.long <- as.matrix(read.csv("ParticleTracking/AlexData071222/sites_in_range_named.csv"),row.names = 1))
drift.days.long <- as.matrix(read.csv("ParticleTracking/AlexData071222/sites_in_range_named.csv"),row.names = 1)
View(drift.days.long)
drift.days.long <- as.matrix(read.csv("ParticleTracking/AlexData071222/sites_in_range_named.csv",row.names = 1))
View(drift.days)
drift.days <- as.matrix(read.csv("ParticleTracking/AlexData071222/sites_in_range_named.csv",row.names = 1))
drift.days.long <- reshape2::melt(drift.days,varnames = c("Start","End"))
View(drift.days.long)
drift.frac <- as.matrix(read.csv("ParticleTracking/AlexData071222/fract_in_range_named.csv",row.names = 1))
drift.frac.long <- reshape2::melt(drift.days,varnames = c("Start","End"))
View(drift.frac.long)
which(!is.na(drift.days.long) & !is.na(drift.frac.long))
which(!is.na(drift.days.long$value) & !is.na(drift.frac.long$value))
plot(drift.frac.long$value[index],drift.days.long$value[index])
index <- which(!is.na(drift.days.long$value) & !is.na(drift.frac.long$value))
plot(drift.frac.long$value[index],drift.days.long$value[index])
drift.days <- as.matrix(read.csv("ParticleTracking/AlexData071222/sites_in_range_named.csv",row.names = 1))
drift.days.long <- reshape2::melt(drift.days,varnames = c("Start","End"))
drift.frac <- as.matrix(read.csv("ParticleTracking/AlexData071222/fract_in_range_named.csv",row.names = 1))
drift.frac.long <- reshape2::melt(drift.days,varnames = c("Start","End"))
index <- which(!is.na(drift.days.long$value) & !is.na(drift.frac.long$value))
plot(drift.frac.long$value[index],drift.days.long$value[index])
View(drift.frac.long)
View(drift.frac)
drift.frac.long <- reshape2::melt(drift.frac,varnames = c("Start","End"))
View(drift.frac)
index <- which(!is.na(drift.days.long$value) & !is.na(drift.frac.long$value))
plot(drift.frac.long$value[index],drift.days.long$value[index])
plot(log10(drift.frac.long$value[index]),drift.days.long$value[index])
plot(log10(drift.frac.long$value[index]),log10(drift.days.long$value[index]))
##let's pull in other distances
geographicDistance.pair <- reshape2::melt(as.matrix(read.csv("distanceData/SiteDistanceMatrix.csv",row.names = 1)),varnames = c("Start","End"))
oceanResistance.pair <- reshape2::melt(as.matrix(read.csv("distanceData/OceanogrphicResistanceMatrix.csv",row.names = 1)),varnames = c("Start","End"))
geographicDistance.pair.No0 <- geographicDistance.pair[-which(geographicDistance.pair$value == 0),]
oceanResistance.pair.No0 <- oceanResistance.pair[-which(geographicDistance.pair$value == 0),]
index <- which(!is.na(drift.days.long$value) & !is.na(oceanResistance.pair.No0$value))
paste0(drift.days.long$Start,drift.days.long$End)
paste0(drift.days.long$Start[!is.na(drift.days.long$value)],drift.days.long$End[!is.na(drift.days.long$value)])
comparisons <- paste0(drift.days.long$Start[!is.na(drift.days.long$value)],drift.days.long$End[!is.na(drift.days.long$value)])
match(comparisons,paste0(oceanResistance.pair.No0$Start,oceanResistance.pair.No0$End))
oc.resis.subset <- oceanResistance.pair.No0[match(comparisons,paste0(oceanResistance.pair.No0$Start,oceanResistance.pair.No0$End)),]
View(oc.resis.subset)
View(drift.days.long)
drift.days.long.subset <- drift.days.long[!is.na(drift.days.long$value),]
View(drift.days.long.subset)
plot(oc.resis.subset,drift.days.long.subset,pch=16)
plot(oc.resis.subset$value,drift.days.long.subset$value,pch=16)
summary(lm(drift.days.long.subset$value~oc.resis.subset$value))
abline(lm(drift.days.long.subset$value~oc.resis.subset$value),col="red")
plot(oc.resis.subset$value,log10(drift.days.long.subset$value),pch=16)
summary(lm(log10(drift.days.long.subset$value)~oc.resis.subset$value))
abline(lm(log10(drift.days.long.subset$value)~oc.resis.subset$value),col="red")
plot(oc.resis.subset$value,drift.days.long.subset$value,pch=16)
summary(lm(drift.days.long.subset$value~oc.resis.subset$value))
abline(lm(drift.days.long.subset$value~oc.resis.subset$value),col="red")
oc.resis.subset$value.10
oc.resis.subset$value>10
oc.resis.subset$value>0.1
plot(oc.resis.subset$value[oc.resis.subset$value>0.1],drift.days.long.subset$value[oc.resis.subset$value>0.1],pch=16)
plot(oc.resis.subset$value,drift.days.long.subset$value,pch=16)
[oc.resis.subset$value>-0.1]
plot(oc.resis.subset$value[oc.resis.subset$value>-0.1],drift.days.long.subset$value[oc.resis.subset$value>-0.1],pch=16)
summary(lm(drift.days.long.subset$value[oc.resis.subset$value>-0.1]~oc.resis.subset$value[oc.resis.subset$value>-0.1]))
abline(lm(drift.days.long.subset$value[oc.resis.subset$value>-0.1]~oc.resis.subset$value[oc.resis.subset$value>-0.1]),col="red")
plot(oc.resis.subset$value[oc.resis.subset$value>-0.1],drift.days.long.subset$value[oc.resis.subset$value>-0.1],pch=16)
plot(oc.resis.subset$value,drift.days.long.subset$value,pch=16)
drift.days <- as.matrix(read.csv("ParticleTracking/AlexData071222/sites_in_range_named.csv",row.names = 1))
drift.days.long <- reshape2::melt(drift.days,varnames = c("Start","End"))
drift.frac <- as.matrix(read.csv("ParticleTracking/AlexData071222/fract_in_range_named.csv",row.names = 1))
drift.frac.long <- reshape2::melt(drift.frac,varnames = c("Start","End"))
index <- which(!is.na(drift.days.long$value) & !is.na(drift.frac.long$value))
plot(log10(drift.frac.long$value[index]),log10(drift.days.long$value[index]))
summary(lm(log10(drift.frac.long$value[index])~log10(drift.days.long$value[index])))
## there seems to be a relationship with poor R2 0.08
plot(oc.resis.subset$value,drift.days.long.subset$value,pch=16)
summary(lm(drift.days.long.subset$value~oc.resis.subset$value))
#However it is all driven by the values with low (<-0.1) Oceanresist
plot(oc.resis.subset$value[oc.resis.subset$value>-0.1],drift.days.long.subset$value[oc.resis.subset$value>-0.1],pch=16)
summary(lm(drift.days.long.subset$value[oc.resis.subset$value>-0.1]~oc.resis.subset$value[oc.resis.subset$value>-0.1]))
abline(lm(drift.days.long.subset$value[oc.resis.subset$value>-0.1]~oc.resis.subset$value[oc.resis.subset$value>-0.1]),col="red")
## what about geographic distance? lets compare that
geo.resis.subset <- geographicDistance.pair.No0[match(comparisons,paste0(geographicDistance.pair.No0$Start,geographicDistance.pair.No0$End)),]
## there seems to be a relationship with poor R2 0.086
plot(geo.resis.subset$value,drift.days.long.subset$value,pch=16)
## there seems to be a relationship with poor R2 0.086
plot(geo.resis.subset$value,log10(drift.days.long.subset$value),pch=16)
## there seems to be a relationship with poor R2 0.086
plot(geo.resis.subset$value,log10(drift.days.long.subset$value),col=oc.resis.subset$value,pch=16)
## there seems to be a relationship with poor R2 0.086
plot(geo.resis.subset$value,drift.days.long.subset$value,pch=16)
## there seems to be a relationship with poor R2 0.086
plot(geo.resis.subset$value,drift.days.long.subset$value,pch=16)
summary(lm(drift.days.long.subset$value~geo.resis.subset$value))
abline(lm(drift.days.long.subset$value~geo.resis.subset$value),col="red")
## if we log10 transform the days
plot(geo.resis.subset$value,log10(drift.days.long.subset$value),pch=16)
summary(lm(log10(drift.days.long.subset$value)~geo.resis.subset$value))
abline(lm(log10(drift.days.long.subset$value)~geo.resis.subset$value),col="red")
summary(lm(log10(drift.days.long.subset$value)~geo.resis.subset$value+oc.resis.subset$value))
summary(lm(log10(drift.days.long.subset$value)~geo.resis.subset$value*oc.resis.subset$value))
summary(lm(log10(drift.days.long.subset$value)~geo.resis.subset$value+oc.resis.subset$value))
