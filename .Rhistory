partial_resid_ocean_res <- residuals_gls + coef(model_corMLPE)["OceanResistance"] * data_corMLPE$OceanResistance
# Plot partial residuals for GeographicDistance with model fit (red) and LOESS curve (green)
plot(data_corMLPE$GeographicDistance, partial_resid_geo_dist,
main = "Partial Residuals for GeographicDistance",
xlab = "GeographicDistance", ylab = "Partial Residuals")
# Add the model fit line (red)
abline(lm(partial_resid_geo_dist ~ data_corMLPE$GeographicDistance), col = "red", lwd = 2)
# Add the LOESS curve (green) using sorted values for a smooth line
order_geo <- order(data_corMLPE$GeographicDistance)
loess_fit_geo <- loess(partial_resid_geo_dist ~ data_corMLPE$GeographicDistance)
lines(data_corMLPE$GeographicDistance[order_geo], predict(loess_fit_geo)[order_geo], col = "green", lwd = 2)
# Plot partial residuals for TempDistance with model fit (red) and LOESS curve (green)
summary(model_corMLPE)
par(mfrow=c(2,2))
# Extract the residuals from the GLS model
residuals_gls <- residuals(model_corMLPE)
# Calculate the partial residuals for each predictor
partial_resid_geo_dist <- residuals_gls + coef(model_corMLPE)["GeographicDistance"] * data_corMLPE$GeographicDistance
partial_resid_temp_dist <- residuals_gls + coef(model_corMLPE)["TempDistance"] * data_corMLPE$TempDistance
partial_resid_ocean_res <- residuals_gls + coef(model_corMLPE)["OceanResistance"] * data_corMLPE$OceanResistance
# Plot partial residuals for GeographicDistance with model fit (red) and LOESS curve (green)
plot(data_corMLPE$GeographicDistance, partial_resid_geo_dist,
main = "Partial Residuals for GeographicDistance",
xlab = "GeographicDistance", ylab = "Partial Residuals")
# Add the model fit line (red)
abline(lm(partial_resid_geo_dist ~ data_corMLPE$GeographicDistance), col = "red", lwd = 2)
# Add the LOESS curve (green) using sorted values for a smooth line
order_geo <- order(data_corMLPE$GeographicDistance)
loess_fit_geo <- loess(partial_resid_geo_dist ~ data_corMLPE$GeographicDistance)
lines(data_corMLPE$GeographicDistance[order_geo], predict(loess_fit_geo)[order_geo], col = "green", lwd = 2)
# Plot partial residuals for TempDistance with model fit (red) and LOESS curve (green)
plot(data_corMLPE$TempDistance, partial_resid_temp_dist,
main = "Partial Residuals for TempDistance",
xlab = "TempDistance", ylab = "Partial Residuals")
# Add the model fit line (red)
abline(lm(partial_resid_temp_dist ~ data_corMLPE$TempDistance), col = "red", lwd = 2)
# Add the LOESS curve (green) using sorted values for a smooth line
order_temp <- order(data_corMLPE$TempDistance)
loess_fit_temp <- loess(partial_resid_temp_dist ~ data_corMLPE$TempDistance)
lines(data_corMLPE$TempDistance[order_temp], predict(loess_fit_temp)[order_temp], col = "green", lwd = 2)
# Plot partial residuals for OceanResistance with model fit (red) and LOESS curve (green)
plot(data_corMLPE$OceanResistance, partial_resid_ocean_res,
main = "Partial Residuals for OceanResistance",
xlab = "OceanResistance", ylab = "Partial Residuals")
# Add the model fit line (red)
abline(lm(partial_resid_ocean_res ~ data_corMLPE$OceanResistance), col = "red", lwd = 2)
# Add the LOESS curve (green) using sorted values for a smooth line
order_ocean <- order(data_corMLPE$OceanResistance)
loess_fit_ocean <- loess(partial_resid_ocean_res ~ data_corMLPE$OceanResistance)
lines(data_corMLPE$OceanResistance[order_ocean], predict(loess_fit_ocean)[order_ocean], col = "green", lwd = 2)
View(model4)
par(mfrow=c(2,2))
# Extract the residuals from the GLS model
residuals_gls <- residuals(model_corMLPE)
# Calculate the partial residuals for each predictor
partial_resid_geo_dist <- residuals_gls + coef(model_corMLPE)["GeographicDistance"] * data_corMLPE$GeographicDistance
partial_resid_temp_dist <- residuals_gls + coef(model_corMLPE)["TempDistance"] * data_corMLPE$TempDistance
partial_resid_ocean_res <- residuals_gls + coef(model_corMLPE)["OceanResistance"] * data_corMLPE$OceanResistance
# Plot partial residuals for GeographicDistance with model fit (darkred, dashed) and LOESS curve (darkgreen)
plot(data_corMLPE$GeographicDistance, partial_resid_geo_dist,
main = "Partial Residuals for GeographicDistance",
xlab = "GeographicDistance", ylab = "Partial Residuals",
pch = 16)  # Use solid points
# Add the model fit line (darkred, dashed)
abline(lm(partial_resid_geo_dist ~ data_corMLPE$GeographicDistance), col = "darkred", lty = 2, lwd = 2)
# Add the LOESS curve (darkgreen) using sorted values for a smooth line
order_geo <- order(data_corMLPE$GeographicDistance)
loess_fit_geo <- loess(partial_resid_geo_dist ~ data_corMLPE$GeographicDistance)
lines(data_corMLPE$GeographicDistance[order_geo], predict(loess_fit_geo)[order_geo], col = "darkgreen", lwd = 2)
# Plot partial residuals for TempDistance with model fit (darkred, dashed) and LOESS curve (darkgreen)
plot(data_corMLPE$TempDistance, partial_resid_temp_dist,
main = "Partial Residuals for TempDistance",
xlab = "TempDistance", ylab = "Partial Residuals",
pch = 16)  # Use solid points
# Add the model fit line (darkred, dashed)
abline(lm(partial_resid_temp_dist ~ data_corMLPE$TempDistance), col = "darkred", lty = 2, lwd = 2)
# Add the LOESS curve (darkgreen) using sorted values for a smooth line
order_temp <- order(data_corMLPE$TempDistance)
loess_fit_temp <- loess(partial_resid_temp_dist ~ data_corMLPE$TempDistance)
lines(data_corMLPE$TempDistance[order_temp], predict(loess_fit_temp)[order_temp], col = "darkgreen", lwd = 2)
# Plot partial residuals for OceanResistance with model fit (darkred, dashed) and LOESS curve (darkgreen)
plot(data_corMLPE$OceanResistance, partial_resid_ocean_res,
main = "Partial Residuals for OceanResistance",
xlab = "OceanResistance", ylab = "Partial Residuals",
pch = 16)  # Use solid points
# Add the model fit line (darkred, dashed)
abline(lm(partial_resid_ocean_res ~ data_corMLPE$OceanResistance), col = "darkred", lty = 2, lwd = 2)
# Add the LOESS curve (darkgreen) using sorted values for a smooth line
order_ocean <- order(data_corMLPE$OceanResistance)
loess_fit_ocean <- loess(partial_resid_ocean_res ~ data_corMLPE$OceanResistance)
lines(data_corMLPE$OceanResistance[order_ocean], predict(loess_fit_ocean)[order_ocean], col = "darkgreen", lwd = 2)
# Extract the residuals from the GLS model
residuals_gls <- residuals(model_corMLPE)
# Calculate the partial residuals for each predictor
partial_resid_geo_dist <- residuals_gls + coef(model_corMLPE)["GeographicDistance"] * data_corMLPE$GeographicDistance
partial_resid_temp_dist <- residuals_gls + coef(model_corMLPE)["TempDistance"] * data_corMLPE$TempDistance
partial_resid_ocean_res <- residuals_gls + coef(model_corMLPE)["OceanResistance"] * data_corMLPE$OceanResistance
# Plot partial residuals for GeographicDistance with model fit (red, dashed) and LOESS curve (green)
plot(data_corMLPE$GeographicDistance, partial_resid_geo_dist,
xlab = "Geographic Distance (m)", ylab = "Component + Residual", pch = 16)
# Add the model fit line (red, dashed)
abline(lm(partial_resid_geo_dist ~ data_corMLPE$GeographicDistance), col = "red", lty = 2, lwd = 2)
# Add the LOESS curve (green) using sorted values for a smooth line
order_geo <- order(data_corMLPE$GeographicDistance)
loess_fit_geo <- loess(partial_resid_geo_dist ~ data_corMLPE$GeographicDistance)
lines(data_corMLPE$GeographicDistance[order_geo], predict(loess_fit_geo)[order_geo], col = "green", lwd = 2)
# Plot partial residuals for TempDistance with model fit (red, dashed) and LOESS curve (green)
plot(data_corMLPE$TempDistance, partial_resid_temp_dist,
xlab = expression(Temperature~(degree*C)), ylab = "Component + Residual", pch = 16)
# Add the model fit line (red, dashed)
abline(lm(partial_resid_temp_dist ~ data_corMLPE$TempDistance), col = "red", lty = 2, lwd = 2)
# Add the LOESS curve (green) using sorted values for a smooth line
order_temp <- order(data_corMLPE$TempDistance)
loess_fit_temp <- loess(partial_resid_temp_dist ~ data_corMLPE$TempDistance)
lines(data_corMLPE$TempDistance[order_temp], predict(loess_fit_temp)[order_temp], col = "green", lwd = 2)
# Plot partial residuals for OceanResistance with model fit (red, dashed) and LOESS curve (green)
plot(data_corMLPE$OceanResistance, partial_resid_ocean_res,
xlab = expression(Ocean~Resistance~(ms^{-1})), ylab = "Component + Residual", pch = 16)
# Add the model fit line (red, dashed)
abline(lm(partial_resid_ocean_res ~ data_corMLPE$OceanResistance), col = "red", lty = 2, lwd = 2)
# Add the LOESS curve (green) using sorted values for a smooth line
order_ocean <- order(data_corMLPE$OceanResistance)
loess_fit_ocean <- loess(partial_resid_ocean_res ~ data_corMLPE$OceanResistance)
lines(data_corMLPE$OceanResistance[order_ocean], predict(loess_fit_ocean)[order_ocean], col = "green", lwd = 2)
par(mfrow=c(2,2),marc(5.1, 4.1, 4.1, 2.1))
# Extract the residuals from the GLS model
residuals_gls <- residuals(model_corMLPE)
# Calculate the partial residuals for each predictor
partial_resid_geo_dist <- residuals_gls + coef(model_corMLPE)["GeographicDistance"] * data_corMLPE$GeographicDistance
partial_resid_temp_dist <- residuals_gls + coef(model_corMLPE)["TempDistance"] * data_corMLPE$TempDistance
partial_resid_ocean_res <- residuals_gls + coef(model_corMLPE)["OceanResistance"] * data_corMLPE$OceanResistance
# Plot partial residuals for GeographicDistance with model fit (red, dashed) and LOESS curve (green)
plot(data_corMLPE$GeographicDistance, partial_resid_geo_dist,
xlab = "Geographic Distance (m)", ylab = "Component + Residual", pch = 16)
# Add the model fit line (red, dashed)
abline(lm(partial_resid_geo_dist ~ data_corMLPE$GeographicDistance), col = "red", lty = 2, lwd = 2)
# Add the LOESS curve (green) using sorted values for a smooth line
order_geo <- order(data_corMLPE$GeographicDistance)
loess_fit_geo <- loess(partial_resid_geo_dist ~ data_corMLPE$GeographicDistance)
lines(data_corMLPE$GeographicDistance[order_geo], predict(loess_fit_geo)[order_geo], col = "green", lwd = 2)
# Plot partial residuals for TempDistance with model fit (red, dashed) and LOESS curve (green)
plot(data_corMLPE$TempDistance, partial_resid_temp_dist,
xlab = expression(Temperature~(degree*C)), ylab = "Component + Residual", pch = 16)
# Add the model fit line (red, dashed)
abline(lm(partial_resid_temp_dist ~ data_corMLPE$TempDistance), col = "red", lty = 2, lwd = 2)
# Add the LOESS curve (green) using sorted values for a smooth line
order_temp <- order(data_corMLPE$TempDistance)
loess_fit_temp <- loess(partial_resid_temp_dist ~ data_corMLPE$TempDistance)
lines(data_corMLPE$TempDistance[order_temp], predict(loess_fit_temp)[order_temp], col = "green", lwd = 2)
# Plot partial residuals for OceanResistance with model fit (red, dashed) and LOESS curve (green)
plot(data_corMLPE$OceanResistance, partial_resid_ocean_res,
xlab = expression(Ocean~Resistance~(ms^{-1})), ylab = "Component + Residual", pch = 16)
# Add the model fit line (red, dashed)
abline(lm(partial_resid_ocean_res ~ data_corMLPE$OceanResistance), col = "red", lty = 2, lwd = 2)
# Add the LOESS curve (green) using sorted values for a smooth line
order_ocean <- order(data_corMLPE$OceanResistance)
loess_fit_ocean <- loess(partial_resid_ocean_res ~ data_corMLPE$OceanResistance)
dev.off()
par(mfrow=c(2,2),mar(5.1, 4.1, 4.1, 2.1))
# Extract the residuals from the GLS model
residuals_gls <- residuals(model_corMLPE)
# Calculate the partial residuals for each predictor
partial_resid_geo_dist <- residuals_gls + coef(model_corMLPE)["GeographicDistance"] * data_corMLPE$GeographicDistance
partial_resid_temp_dist <- residuals_gls + coef(model_corMLPE)["TempDistance"] * data_corMLPE$TempDistance
partial_resid_ocean_res <- residuals_gls + coef(model_corMLPE)["OceanResistance"] * data_corMLPE$OceanResistance
par(mfrow=c(2,2),mar=(5.1, 4.1, 4.1, 2.1))
# Extract the residuals from the GLS model
residuals_gls <- residuals(model_corMLPE)
# Calculate the partial residuals for each predictor
partial_resid_geo_dist <- residuals_gls + coef(model_corMLPE)["GeographicDistance"] * data_corMLPE$GeographicDistance
partial_resid_temp_dist <- residuals_gls + coef(model_corMLPE)["TempDistance"] * data_corMLPE$TempDistance
partial_resid_ocean_res <- residuals_gls + coef(model_corMLPE)["OceanResistance"] * data_corMLPE$OceanResistance
# Plot partial residuals for GeographicDistance with model fit (red, dashed) and LOESS curve (green)
plot(data_corMLPE$GeographicDistance, partial_resid_geo_dist,
xlab = "Geographic Distance (m)", ylab = "Component + Residual", pch = 16)
# Add the model fit line (red, dashed)
abline(lm(partial_resid_geo_dist ~ data_corMLPE$GeographicDistance), col = "red", lty = 2, lwd = 2)
# Add the LOESS curve (green) using sorted values for a smooth line
order_geo <- order(data_corMLPE$GeographicDistance)
loess_fit_geo <- loess(partial_resid_geo_dist ~ data_corMLPE$GeographicDistance)
lines(data_corMLPE$GeographicDistance[order_geo], predict(loess_fit_geo)[order_geo], col = "green", lwd = 2)
# Plot partial residuals for TempDistance with model fit (red, dashed) and LOESS curve (green)
plot(data_corMLPE$TempDistance, partial_resid_temp_dist,
xlab = expression(Temperature~(degree*C)), ylab = "Component + Residual", pch = 16)
# Add the model fit line (red, dashed)
abline(lm(partial_resid_temp_dist ~ data_corMLPE$TempDistance), col = "red", lty = 2, lwd = 2)
# Add the LOESS curve (green) using sorted values for a smooth line
order_temp <- order(data_corMLPE$TempDistance)
loess_fit_temp <- loess(partial_resid_temp_dist ~ data_corMLPE$TempDistance)
par(mar=(5.1, 4.1, 4.1, 2.1))
par(mfrow=c(2,2))
par(mar=(5.1,4.1,4.1,2.1))
par(mar=c(5.1,4.1,4.1,2.1))
# Extract the residuals from the GLS model
residuals_gls <- residuals(model_corMLPE)
# Calculate the partial residuals for each predictor
partial_resid_geo_dist <- residuals_gls + coef(model_corMLPE)["GeographicDistance"] * data_corMLPE$GeographicDistance
partial_resid_temp_dist <- residuals_gls + coef(model_corMLPE)["TempDistance"] * data_corMLPE$TempDistance
partial_resid_ocean_res <- residuals_gls + coef(model_corMLPE)["OceanResistance"] * data_corMLPE$OceanResistance
# Plot partial residuals for GeographicDistance with model fit (red, dashed) and LOESS curve (green)
plot(data_corMLPE$GeographicDistance, partial_resid_geo_dist,
xlab = "Geographic Distance (m)", ylab = "Component + Residual", pch = 16)
# Add the model fit line (red, dashed)
abline(lm(partial_resid_geo_dist ~ data_corMLPE$GeographicDistance), col = "red", lty = 2, lwd = 2)
# Add the LOESS curve (green) using sorted values for a smooth line
order_geo <- order(data_corMLPE$GeographicDistance)
loess_fit_geo <- loess(partial_resid_geo_dist ~ data_corMLPE$GeographicDistance)
lines(data_corMLPE$GeographicDistance[order_geo], predict(loess_fit_geo)[order_geo], col = "green", lwd = 2)
# Plot partial residuals for TempDistance with model fit (red, dashed) and LOESS curve (green)
plot(data_corMLPE$TempDistance, partial_resid_temp_dist,
xlab = expression(Temperature~(degree*C)), ylab = "Component + Residual", pch = 16)
par(mfrow=c(2,2))
par(mar=c(5.1,4.1,2.1,2.1))
# Extract the residuals from the GLS model
residuals_gls <- residuals(model_corMLPE)
# Calculate the partial residuals for each predictor
partial_resid_geo_dist <- residuals_gls + coef(model_corMLPE)["GeographicDistance"] * data_corMLPE$GeographicDistance
partial_resid_temp_dist <- residuals_gls + coef(model_corMLPE)["TempDistance"] * data_corMLPE$TempDistance
partial_resid_ocean_res <- residuals_gls + coef(model_corMLPE)["OceanResistance"] * data_corMLPE$OceanResistance
dev.off()
# Plot partial residuals for GeographicDistance with model fit (red, dashed) and LOESS curve (green)
plot(data_corMLPE$GeographicDistance, partial_resid_geo_dist,
xlab = "Geographic Distance (m)", ylab = "Component + Residual", pch = 16)
# Add the model fit line (red, dashed)
abline(lm(partial_resid_geo_dist ~ data_corMLPE$GeographicDistance), col = "red", lty = 2, lwd = 2)
# Add the LOESS curve (green) using sorted values for a smooth line
order_geo <- order(data_corMLPE$GeographicDistance)
loess_fit_geo <- loess(partial_resid_geo_dist ~ data_corMLPE$GeographicDistance)
par(mfrow=c(2,2))
par(mar=c(5.1,4.1,2.1,2.1))
# Extract the residuals from the GLS model
residuals_gls <- residuals(model_corMLPE)
# Calculate the partial residuals for each predictor
partial_resid_geo_dist <- residuals_gls + coef(model_corMLPE)["GeographicDistance"] * data_corMLPE$GeographicDistance
partial_resid_temp_dist <- residuals_gls + coef(model_corMLPE)["TempDistance"] * data_corMLPE$TempDistance
partial_resid_ocean_res <- residuals_gls + coef(model_corMLPE)["OceanResistance"] * data_corMLPE$OceanResistance
# Plot partial residuals for GeographicDistance with model fit (red, dashed) and LOESS curve (green)
plot(data_corMLPE$GeographicDistance, partial_resid_geo_dist,
xlab = "Geographic Distance (m)", ylab = "Component + Residual", pch = 16)
# Add the model fit line (red, dashed)
abline(lm(partial_resid_geo_dist ~ data_corMLPE$GeographicDistance), col = "red", lty = 2, lwd = 2)
# Add the LOESS curve (green) using sorted values for a smooth line
order_geo <- order(data_corMLPE$GeographicDistance)
loess_fit_geo <- loess(partial_resid_geo_dist ~ data_corMLPE$GeographicDistance)
lines(data_corMLPE$GeographicDistance[order_geo], predict(loess_fit_geo)[order_geo], col = "green", lwd = 2)
# Plot partial residuals for TempDistance with model fit (red, dashed) and LOESS curve (green)
plot(data_corMLPE$TempDistance, partial_resid_temp_dist,
xlab = expression(Temperature~(degree*C)), ylab = "Component + Residual", pch = 16)
# Add the model fit line (red, dashed)
abline(lm(partial_resid_temp_dist ~ data_corMLPE$TempDistance), col = "red", lty = 2, lwd = 2)
# Add the LOESS curve (green) using sorted values for a smooth line
order_temp <- order(data_corMLPE$TempDistance)
loess_fit_temp <- loess(partial_resid_temp_dist ~ data_corMLPE$TempDistance)
lines(data_corMLPE$TempDistance[order_temp], predict(loess_fit_temp)[order_temp], col = "green", lwd = 2)
# Plot partial residuals for OceanResistance with model fit (red, dashed) and LOESS curve (green)
plot(data_corMLPE$OceanResistance, partial_resid_ocean_res,
xlab = expression(Ocean~Resistance~(ms^{-1})), ylab = "Component + Residual", pch = 16)
# Add the model fit line (red, dashed)
abline(lm(partial_resid_ocean_res ~ data_corMLPE$OceanResistance), col = "red", lty = 2, lwd = 2)
# Add the LOESS curve (green) using sorted values for a smooth line
order_ocean <- order(data_corMLPE$OceanResistance)
loess_fit_ocean <- loess(partial_resid_ocean_res ~ data_corMLPE$OceanResistance)
lines(data_corMLPE$OceanResistance[order_ocean], predict(loess_fit_ocean)[order_ocean], col = "green", lwd = 2)
pdf("figures/Suppl/GLS.pdf",height = 5,width = 6)
par(mfrow=c(2,2))
par(mar=c(5.1,4.1,2.1,2.1))
# Extract the residuals from the GLS model
residuals_gls <- residuals(model_corMLPE)
# Calculate the partial residuals for each predictor
partial_resid_geo_dist <- residuals_gls + coef(model_corMLPE)["GeographicDistance"] * data_corMLPE$GeographicDistance
partial_resid_temp_dist <- residuals_gls + coef(model_corMLPE)["TempDistance"] * data_corMLPE$TempDistance
partial_resid_ocean_res <- residuals_gls + coef(model_corMLPE)["OceanResistance"] * data_corMLPE$OceanResistance
# Plot partial residuals for GeographicDistance with model fit (red, dashed) and LOESS curve (green)
plot(data_corMLPE$GeographicDistance, partial_resid_geo_dist,
xlab = "Geographic Distance (m)", ylab = "Component + Residual", pch = 16)
# Add the model fit line (red, dashed)
abline(lm(partial_resid_geo_dist ~ data_corMLPE$GeographicDistance), col = "red", lty = 2, lwd = 2)
# Add the LOESS curve (green) using sorted values for a smooth line
order_geo <- order(data_corMLPE$GeographicDistance)
loess_fit_geo <- loess(partial_resid_geo_dist ~ data_corMLPE$GeographicDistance)
lines(data_corMLPE$GeographicDistance[order_geo], predict(loess_fit_geo)[order_geo], col = "green", lwd = 2)
# Plot partial residuals for TempDistance with model fit (red, dashed) and LOESS curve (green)
plot(data_corMLPE$TempDistance, partial_resid_temp_dist,
xlab = expression(Temperature~(degree*C)), ylab = "Component + Residual", pch = 16)
# Add the model fit line (red, dashed)
abline(lm(partial_resid_temp_dist ~ data_corMLPE$TempDistance), col = "red", lty = 2, lwd = 2)
# Add the LOESS curve (green) using sorted values for a smooth line
order_temp <- order(data_corMLPE$TempDistance)
loess_fit_temp <- loess(partial_resid_temp_dist ~ data_corMLPE$TempDistance)
lines(data_corMLPE$TempDistance[order_temp], predict(loess_fit_temp)[order_temp], col = "green", lwd = 2)
# Plot partial residuals for OceanResistance with model fit (red, dashed) and LOESS curve (green)
plot(data_corMLPE$OceanResistance, partial_resid_ocean_res,
xlab = expression(Ocean~Resistance~(ms^{-1})), ylab = "Component + Residual", pch = 16)
# Add the model fit line (red, dashed)
abline(lm(partial_resid_ocean_res ~ data_corMLPE$OceanResistance), col = "red", lty = 2, lwd = 2)
# Add the LOESS curve (green) using sorted values for a smooth line
order_ocean <- order(data_corMLPE$OceanResistance)
loess_fit_ocean <- loess(partial_resid_ocean_res ~ data_corMLPE$OceanResistance)
lines(data_corMLPE$OceanResistance[order_ocean], predict(loess_fit_ocean)[order_ocean], col = "green", lwd = 2)
dev.off()
pdf("figures/Suppl/GLS.pdf",height = 7,width = 8)
par(mfrow=c(2,2))
par(mar=c(5.1,4.1,2.1,2.1))
# Extract the residuals from the GLS model
residuals_gls <- residuals(model_corMLPE)
# Calculate the partial residuals for each predictor
partial_resid_geo_dist <- residuals_gls + coef(model_corMLPE)["GeographicDistance"] * data_corMLPE$GeographicDistance
partial_resid_temp_dist <- residuals_gls + coef(model_corMLPE)["TempDistance"] * data_corMLPE$TempDistance
partial_resid_ocean_res <- residuals_gls + coef(model_corMLPE)["OceanResistance"] * data_corMLPE$OceanResistance
# Plot partial residuals for GeographicDistance with model fit (red, dashed) and LOESS curve (green)
plot(data_corMLPE$GeographicDistance, partial_resid_geo_dist,
xlab = "Geographic Distance (m)", ylab = "Component + Residual", pch = 16)
# Add the model fit line (red, dashed)
abline(lm(partial_resid_geo_dist ~ data_corMLPE$GeographicDistance), col = "red", lty = 2, lwd = 2)
# Add the LOESS curve (green) using sorted values for a smooth line
order_geo <- order(data_corMLPE$GeographicDistance)
loess_fit_geo <- loess(partial_resid_geo_dist ~ data_corMLPE$GeographicDistance)
lines(data_corMLPE$GeographicDistance[order_geo], predict(loess_fit_geo)[order_geo], col = "green", lwd = 2)
# Plot partial residuals for TempDistance with model fit (red, dashed) and LOESS curve (green)
plot(data_corMLPE$TempDistance, partial_resid_temp_dist,
xlab = expression(Temperature~(degree*C)), ylab = "Component + Residual", pch = 16)
# Add the model fit line (red, dashed)
abline(lm(partial_resid_temp_dist ~ data_corMLPE$TempDistance), col = "red", lty = 2, lwd = 2)
# Add the LOESS curve (green) using sorted values for a smooth line
order_temp <- order(data_corMLPE$TempDistance)
loess_fit_temp <- loess(partial_resid_temp_dist ~ data_corMLPE$TempDistance)
lines(data_corMLPE$TempDistance[order_temp], predict(loess_fit_temp)[order_temp], col = "green", lwd = 2)
# Plot partial residuals for OceanResistance with model fit (red, dashed) and LOESS curve (green)
plot(data_corMLPE$OceanResistance, partial_resid_ocean_res,
xlab = expression(Ocean~Resistance~(ms^{-1})), ylab = "Component + Residual", pch = 16)
# Add the model fit line (red, dashed)
abline(lm(partial_resid_ocean_res ~ data_corMLPE$OceanResistance), col = "red", lty = 2, lwd = 2)
# Add the LOESS curve (green) using sorted values for a smooth line
order_ocean <- order(data_corMLPE$OceanResistance)
loess_fit_ocean <- loess(partial_resid_ocean_res ~ data_corMLPE$OceanResistance)
lines(data_corMLPE$OceanResistance[order_ocean], predict(loess_fit_ocean)[order_ocean], col = "green", lwd = 2)
dev.off()
residuals_gls
View(tempdist)
summary(model_corMLPE)
install.packages("MuMIn")
library(MuMIn)
# Assuming your model is named model_corMLPE
r_squared <- r.squaredGLMM(model_corMLPE)
install.packages("r2glmm")
library(r2glmm)
r2 <- r2beta(model_corMLPE, method = "sgv")
install.packages("rsq")
install.packages("rsq")
# Calculate model R-squared
model_rsq <- rsq(model_corMLPE, adj = TRUE)
library(rsq)
# Calculate model R-squared
model_rsq <- rsq(model_corMLPE, adj = TRUE)
print(model_rsq)
# Calculate semi-partial R-squared for each predictor
sp_rsq <- rsq.partial(model_corMLPE, adj = TRUE)
# Ensure the global model is updated to include na.action = na.fail
model_corMLPE <- update(model_corMLPE, na.action = na.fail)
# Perform model selection
model_set <- dredge(model_corMLPE)
# Get the relative importance of each predictor
importance(model_set)
sw(model_set)
# Install and load necessary packages
install.packages(c("r2glmm", "rsq", "MuMIn", "nlme"))
library(r2glmm)
library(rsq)
library(MuMIn)
library(nlme)
# Your existing gls model
model_corMLPE <- gls(
eDNA_Distance ~ GeographicDistance + TempDistance + OceanResistance,
data = data_corMLPE,
correlation = corMLPE(form = ~ Start + End),
method = "REML"
)
# Method 1: Using r2glmm
r2_results <- r2beta(model_corMLPE, method = "sgv")
install.packages(c("r2glmm", "rsq", "MuMIn", "nlme"))
# Your existing gls model
model_corMLPE <- gls(
eDNA_Distance ~ GeographicDistance + TempDistance + OceanResistance,
data = data_corMLPE,
correlation = corMLPE(form = ~ Start + End),
method = "REML"
)
# Method 1: Using r2glmm
r2_results <- r2beta(model_corMLPE, method = "sgv")
# Method 2: Using rsq
model_rsq <- rsq(model_corMLPE, adj = TRUE)
sp_rsq <- rsq.partial(model_corMLPE, adj = TRUE)
# Method 3: Using MuMIn for model selection
model_corMLPE <- update(model_corMLPE, na.action = na.fail)
model_set <- dredge(model_corMLPE)
importance_values <- importance(model_set)
# Method 4: Likelihood ratio tests
model_no_geo <- update(model_corMLPE, . ~ . - GeographicDistance)
anova_geo <- anova(model_corMLPE, model_no_geo)
print(anova_geo)
model_corMLPE_ML <- gls(
eDNA_Distance ~ GeographicDistance + TempDistance + OceanResistance,
data = data_corMLPE,
correlation = corMLPE(form = ~ Start + End),
method = "ML"
)
summary( model_corMLPE_ML)
# Refit the full model using ML
model_corMLPE_ML <- gls(
eDNA_Distance ~ GeographicDistance + TempDistance + OceanResistance,
data = data_corMLPE,
correlation = corMLPE(form = ~ Start + End),
method = "ML"
)
# Refit models without each predictor
# Without GeographicDistance
model_no_geo_ML <- gls(
eDNA_Distance ~ TempDistance + OceanResistance,
data = data_corMLPE,
correlation = corMLPE(form = ~ Start + End),
method = "ML"
)
# Without TempDistance
model_no_temp_ML <- gls(
eDNA_Distance ~ GeographicDistance + OceanResistance,
data = data_corMLPE,
correlation = corMLPE(form = ~ Start + End),
method = "ML"
)
# Without OceanResistance
model_no_ocean_ML <- gls(
eDNA_Distance ~ GeographicDistance + TempDistance,
data = data_corMLPE,
correlation = corMLPE(form = ~ Start + End),
method = "ML"
)
# Compare full model with model without GeographicDistance
anova_geo <- anova(model_corMLPE_ML, model_no_geo_ML)
print(anova_geo)
# Compare full model with model without TempDistance
anova_temp <- anova(model_corMLPE_ML, model_no_temp_ML)
print(anova_temp)
# Compare full model with model without OceanResistance
anova_ocean <- anova(model_corMLPE_ML, model_no_ocean_ML)
print(anova_ocean)
# Install and load the package
install.packages("piecewiseSEM")
library(piecewiseSEM)
summary(model_corMLPE)
?gls
rcompanion::nagelkerke(model_corMLPE)
install.packages("rcompanion")
rcompanion::nagelkerke(model_corMLPE)
?nagelkerke
summary(model_corMLPE)
summary(model_corMLPE_scaled)
model_corMLPE <- gls(
eDNA_Distance ~ GeographicDistance + TempDistance + OceanResistance,
data = data_corMLPE,
correlation = corMLPE(form = ~ Start + End),
method = "REML"
)
model_corMLPE.1 <- gls(
eDNA_Distance ~ GeographicDistance + TempDistance ,
data = data_corMLPE,
correlation = corMLPE(form = ~ Start + End),
method = "REML"
)
model_corMLPE.2 <- gls(
eDNA_Distance ~ GeographicDistance +  OceanResistance,
data = data_corMLPE,
correlation = corMLPE(form = ~ Start + End),
method = "REML"
)
model_corMLPE.3 <- gls(
eDNA_Distance ~ TempDistance + OceanResistance,
data = data_corMLPE,
correlation = corMLPE(form = ~ Start + End),
method = "REML"
)
anova(model_corMLPE,model_corMLPE.1,model_corMLPE.2,model_corMLPE.3)
model_corMLPE <- gls(
eDNA_Distance ~ GeographicDistance + TempDistance + OceanResistance,
data = data_corMLPE,
correlation = corMLPE(form = ~ Start + End),
method = "ML"
)
model_corMLPE.1 <- gls(
eDNA_Distance ~ GeographicDistance + TempDistance ,
data = data_corMLPE,
correlation = corMLPE(form = ~ Start + End),
method = "ML"
)
model_corMLPE.2 <- gls(
eDNA_Distance ~ GeographicDistance +  OceanResistance,
data = data_corMLPE,
correlation = corMLPE(form = ~ Start + End),
method = "ML"
)
model_corMLPE.3 <- gls(
eDNA_Distance ~ TempDistance + OceanResistance,
data = data_corMLPE,
correlation = corMLPE(form = ~ Start + End),
method = "ML"
)
anova(model_corMLPE,model_corMLPE.1,model_corMLPE.2,model_corMLPE.3)
summary(model_corMLPE)
summary(model_corMLPE_scaled)
model6 = lm (eDNAdistance.pair.mod.No0$value~geographicDistance.pair.No0$value + tempDist.pair.No0$value+ oceanResistance.pair.No0$value)
anova(model_corMLPE,model6)
testmod <- lm(eDNA_Distance ~ GeographicDistance_scaled + TempDistance_scaled + OceanResistance_scaled,data = data_corMLPE)
anova(model_corMLPE,testmod)
